/*
 ╔═══════════════════════════════════════════════════════════════════════════╗
 ║ Система       : Основные средства                                         ║
 ║ Назначение    : ИНВЕНТАРНАЯ   КАРТОЧКА ОС или НМА                         ║
 ║ Параметры     : Есть                                                      ║
 ╚═══════════════════════════════════════════════════════════════════════════╝
*/

#define __KATOS_VIP__
#define __KatosFilters__
#define _KatosFRSostObj_

// #include KatOs.vih


#include xlReport.Vih
#include ShowKau.vpp
#include GtKauTbl.vih // Обьектный интерфейс выбора КАУ (только для вызовов ч/з RunInterface в 80)
#include GetMol.vih
#include TirOs.vih
#include GetKau.vih
#include OSStr.vih
#include KatStroy.vih
#include PSManager.vih // Работа с регистрами учета и планами счетов
#include ObjOborot.vih  //Oborot.vih

#include OtchPer.tbl
#include Amort.vih
#include OtchPer.vih //повесил под этот дефайн, ибо вставил туда доработки по запрещению
                     //отката при наличии операций для ОГП
#include OsMcUsl.vih

#include Form_OS6a.vih
#include ChgPar.vih
#include KauReff.vih   // Интерфейс привязки к внешней аналитике
#include OSSums.vih

#include FeeSigners.fun    // Подписанты
#include FeeSigners.vih


#include ExtAttr.vih    // внешние атрибуты
#include ExtClass.vih   // внешняя классификация
#include ExtAttrClass.vih

// Закладки
#include OS_Oper.vih
#include SetDrag.vih
#include SpecOb.vih
#include McInOs.vih
#include OsRazn.vih
#include SostByIF.vih
#include RasKoef.vih          // Объектный интерфейс для работы с расчетными коэффициентами

#include GetAlgam.vih  // Выбор алгоритма
#include FpCO.Vih      // Центры ответственности
#include Attribu_.vih
#include GetHozOper.vih
#include FormOS6.vih
#include PrnOSOper.vih

#include Form11.vih
#include fnDropOS.vih
#include AdrFunc.vih // функции для работы с почтовыми адресами
#include LnkLst.vih
#include RepErrOS.vih
#include ImKolTab.vpp
#include OnExpImp.vih
#include ViewKred.vih
#include GetUserListPodr.vih
#include OSSerialN.vih
#include SopInMov.vih       // накладная на вн.перемещение (для резервирования)
#include GetPrihNKL.vih

#include ExtMenuPGK.vih
#include CheckOpe.vih
// #include SrokIsp.vih  // точка расширения
#include OsFun.vih

#include MoveOS.vih
#include ChangHist.vih
#include ReservOs.vih
#include CompOs.vih
#include GetArc.vih
#include aStatUser.vih
#ifdef __TPR2__
  #include EditCOFilial.Vih
  #include LikvidOss.vih
  #include StavkaDiskont.vih
  #include PrimaryDepartmentXRefs.vih
  #include SpyTNTPR.vih
  #include EditDoc.vih    //для ПИРа 102.182641 см. KatOss_Win.vpp (строку 517 +/-) с комментарием - для ПИРа 102.182641
#end
#include KatKl.vih
#include OSTablSpDIArenda.Vih
#include FieldControl.vih
#include Permission.vih
#ifdef __TPR2__
#include SaldTune.vih          // Настройка объектов учета целевого назначения запасов МТР
#end
#include ObOnAnlt.tbl  // 102.157824 для точки расширения epGetOborotOnAnalitOs
#include mt_OSLgota.tbl


#doc
  Ведение картотеки инвентарных карточек ОС (НМА)
#end
Interface KatOSS 'И Н В Е Н Т А Р Н А Я   К А Р Т О Т Е К А' escclose, cyan;
show at (,,180,40);

const
  ConstPick : word = 117;

  coSumFormat = '\2p[|-]3666''666''666''666''666''666.88';

  lcFromStatField = 'StatusFieldFlag_OS';
  lcLockedByStat  = 'StatusFieldLockFlag_OS';
end;

#include KatOss.tbl

Table Struct mt_PrintTable
(
  NRec       : tNRec   "Номер записи"
, StrName    : s240    "Наименование показателя"
, ParamNum   : s10     "Номер строки"
, FilialNo   : Longint "Номер филиала"
, InvNum     : s20     "Инвентарный номер"
, NameOs     : s150    "Наименование объекта"
, DATOK      : date    "Дата поступления"
)
with index
(
  mt_PrintTable01 = NRec(Unique, Surrogate)
, mt_PrintTable02 = StrName + ParamNum
, mt_PrintTable03 = InvNum + DATOK + NameOs + ParamNum
);

// параметры, которые изменялись для выбранных карточек
Table struct slParams
(
  NumKod : word,
  Name   : s80
)
With Index
(
  Index1 = Name(unique),
  Index2 = NumKod
)
;

Table struct Columns
(
  ColNum   : word,
  ColPos   : word
)
With Index
(
  Index1 = ColNum,
  Index2 = ColPos
)
;

Table Struct mt_PrintCardRow
(
  NRec       : tNRec   "Номер записи"
, StrName    : s240    "Наименование показателя"
, ParamNum   : s10     "Номер строки"
, FilialNo   : Longint "Номер филиала"
, InvNum     : s20     "Инвентарный номер"
, NameOs     : s150    "Наименование объекта"
, DATOK      : date    "Дата поступления"
, Stoim      : tSumma  "Стоимость"
, Ammort     : tSumma  "Амортизация"
, TreeLVL    : integer "Уровень дерева"
, isHaveCard : boolean "Есть подвязанные карты"
)
with index
(
  PrintCardRow01 = NRec(Unique, Surrogate)
, PrintCardRow02 = StrName + ParamNum + FilialNo
, PrintCardRow03 = InvNum + NameOs + DATOK + Stoim + Ammort
);

Table Struct mt_FillAmGrRep
(
  NameOs  : s150 "Наименование объекта"
, InvNum  : s20  "Инвентарный номер"
, OKOF    : s25  "Код ОКОФ"
, OldAmGr : s20  "Амортизационная группа (предыдущая)"
, NewAmGr : s20  "Амортизационная группа (новая)"
)
with index
(
  mt_FillAmGrRep01 = InvNum + NameOs
);

Table Struct tmp_KauReff
(
  NRec    : comp "Номер записи"
, cRec    : comp  "Номер записи"
, coTable : word  "Код таблицы"
, wKau    : word  "Код группы КАУ"
, cKau    : comp  "Ссылка на КАУ"
)
with index
(
  tmp_KauReff01 = coTable + cRec + wKau + cKau,
  tmp_KauReff02 = cRec + wKau + cKau,
  tmp_KauReff03 = coTable + wKau,
  tmp_KauReff04 = coTable + wKau + cKau
);

//------------------------------------
#include GetKau.var
var iTirOs : TirOs;       // Переменная типа VipInterface TirOs
#include PSManagerNew.var // Работа с регистрами учета и планами счетов (iPSManager)

var oGMRef : oNRSetFilter; // GetMol
var iOSStr   : OSStr;
var iPrnOSOper : Print_OS_Operations;
var iFormOs6   : FormOS6;
var iAmort : Amort;
var vOtchPerPick : OtchPerPick;
var iOsMcUsl : OsMcUsl;
var iOSSums  : OsPereocSums new;
var vOtchPerOpers : OtchPerOpers;
var iChgPar  : OsChgPar;
var iKauReff : EditKauReff new; // Переменная типа "Интерфейса EditKauReff"

var iAttr        : iExtAttr;     // внешние атрибуты
var iClass       : iExtClass;    // внешняя классификация
var vExtAttrClass : iExtAttrClass;

// Закладки
var iOS_Oper    : OS_Operations new;
var iNalDrag    : SetDrag new;
var iSpecOb     : SpecOb new;
var iMcInOs     : McInOs new;
var iOsRaznW    : OsRazn new;
var iSostByIF   : SostByIF new;
var iLnkL       : LinkedLinst new;  //объект по работе со списком информации к документу
var pGetArc     : GetArc new;
var pRsrv       : ReservOs;
var pCompOs     : CompOs;
var iRasKoef    : RasKoef;  // Переменная типа "Интерфейса RasKoef"

var iForm11      : Form11;
var AF: AddressFunc; // функции обработки адресов (Кадры)
var iUserListPodr : GetUserListPodr;
var pCheckOper : CheckOper;
var pOsFun : OsFun new;
#include FeeSigners.var

#include RepErrOS.var
#include OnExpImp.var
#include OSSerialN.var
var intChangeHist : iChangHist new;
var iGetLinked : LinkedLinst;
#include aStatUser.var    // iStatUser
Var iKatKl : KatKl;
Var otSpDIArenda : IOSTablSpDIArenda (OSTablSpDIArenda) New;
#ifdef __TPR2__
var  pStavka : StavkaDiskont;
var  pSpyTN  : SpyTNTPR;
#end
var  iFCI    : FieldControl; // видимость элементов
#include Permission.var
#ifdef __TPR2__
#include SaldTune.var
#end
var
   sArrayOS      : array [0..20] of string;
   wArrayOS      : array [0..20] of word;
   sArrayNMA     : array [0..16] of string;
   wArrayNMA     : array [0..16] of word;


function IsUsedOperation(wSysOper : word) : boolean;   forward;
Procedure SetColumnTitleAndHelpLine;                   forward;   // Установить наименования колонок/полей и строк подсказки
Procedure SetFormatScrKatOsEdit(_isCommonCost : boolean); forward;
Function  CopyPick (_src, _dest : word) : longInt;     forward;
Function GetRefKatSopr(pcInSpOrder: comp)     : comp;    forward;
Function GetRefKatSoprOrAkt(pcInSpOrder: comp)     : comp;    forward;
Function GetRefSopr_Sklad_OS(_cSpOrder: comp) : comp;    forward;
function ModAmortStrExt() : string;                      forward;
Procedure InsSpKatos;                                    forward;
#ifdef __TPR2__
Function GetValue   (pNum : integer) : string; Forward;
Function GetRoleName(aiNum: integer): string; Forward;
#end

Create view Katosss
var
  sXLTFileName
, sXLSFileName  //используется  в osReestr.vpp
, FrHeadLabel1
, sFeeSignersStringOsOne      : string;

//-------------------------
  TipDock   // 15, 16, 57, 115, 116, 157, 215, 315   тип документа
, wTipOper  // 15, 16, 57   тип операций
, wTip      // 15, 16    - тип МУ
, GrupVbr
, Diftoc          : word;//тип отчет FR/FCOM
//-------------------------
  SortRg,  SortPr   : byte;

  PrSpecOb,
  isFiltrPodr, isFiltrMOL,
  RunIn,
  Changed,
  frForText    : Boolean;

  NrecNastr,
  NrecPodr,
  NrecMol,
  NrecVid,
  pNrecKatos,
  cNRecPodr,
  cNRecMol,
  cNewKatNalGr : Comp;
  wTipPodr : Word;

  TempString   : String[20];
  sDefaultINnum: String[20];
  wYesNo       : Word;
  TempBool     : Boolean;
  bNeedFind    : Boolean;
  OnlyAll      : Boolean;
  wTemp        : Word;
  wCountry     : Word;    // страна
  wRegNumFrom  : Word;
  bIsEmpty     : Boolean; // признак пустого каталога в момент входа в интерфейс

  nwiEditKatos
, nwiDopInfoOs : Longint;

  isChangeKatosKol : Boolean;

  bOborotSelSuccess,
  bOborotSuccess        : Boolean;
  dStOborot, dEndOborot : Date; // диапазон дат для отбора проводок

//---------------------------
  AvailableInvCardType,
  Os_SrokIspEdIzm,
  OS_Complex,
  OS_RazrKol,
  OS_FormIzn  : word;
  NDE_SIMVRUB : string[8];
  OS_EditOtchPer ,OS_StoimStruct
  ,OS_NoEditIF_Arxiv ,OS_NoEditDragM_Arxiv : boolean;
  DOC_PICKOTVPODR, Doc_PickCOFilial   : boolean;

//---------------------------

  cVibitKatOs : comp;

// для иерархий
   Node            : comp;
   tmpcHigherOs    : comp;
   tmpcHigherOsNew : comp;
   oldHigherOs     : comp;
   oldNRecKatos    : comp;
   tsResult        : boolean;
   isTree          : boolean;
   temp_comp       : comp;
   cKatosNrec      : comp;
   Form11Node      : comp;

#include KatOss_Filtr.var   // переменные для фильтров

   TreeHandle : LongInt;   // Handle текущего Tree (Sanny)

   isPick   : boolean;   //для печати ведомости наличия и износа по помеченным записям

   wEdIzm           : word;   //значение настройки единицы измерения срока исп-я
   bWasOperations   : boolean;//были ли операции изменения стоимости
   dStoimPercent    : tSumma; // значение настройки процентов по сохранению базовой стоимости
   bTstOperNextPer  : boolean;// значение настройки по актуализации данных в операциях при переходе на след период
   bOsRaznCalc      : boolean;// расчет разностей данных по методам учета
   bShowNastrOs     : boolean;// предалагать выбор метода учёта при входе в картотеку

   //для определения доступности полей для ввода данных
   b_InNum_Is_Selectable  : boolean;
   b_NameOs_Is_Selectable : boolean;
   b_Kol_Is_Selectable    : boolean;
   b_DatOk_Is_Selectable  : boolean;
   b_Stoim_Is_Selectable  : boolean;
   b_DatEk_Is_Selectable  : boolean;
   b_SumIzn_Is_Selectable : boolean;

   cMyKatOs               : comp;
   cMySysOper             : comp;

   bCopyAll               : boolean;    // для разных случаев для определения операция выполняется над всеми элементами или только над выбранными

   bClickedOk             : boolean;    // для разных случаев для определения нажатия кнопки Ок
   bContinueOper          : boolean;    // для разных случаев для определения необходимости продолжения выполнения какого-либо действия
   bNeedControlDateK      : boolean;    // контроль заполнения даты ввода в эксплуатацию в карточке
   sCopyExClassName       : string;     // для функции тиражирования внешней классификации
   sCopyExClassSeg        : string;     // для функции тиражирования внешней классификации

   sCopyExAttrName        : string;     // для функции тирожирования внешних атрибутов
   sCopyExAttrVal         : string;     // для функции тирожирования внешних атрибутов
   sMarkerVal             : TPtr; // маркер
   bCopyAttrAll           : boolean;    // признак копирования всех атрибутов

   MyPlansNo              : tNRec;
   FrHeadLabel2           : integer;
   fsCompNastr            : string;     // для сравнения ИК по методам учета
   fwCompField            : word;       //
   fwTipDoc               : word;


   dBeginDate             : date;       // для установки фильтра по операциям
   dEndDate               : date;
   dReeOtchPer            : date;       // для печати ведомости наличия (OSReestr.vpp)

   nRec                   : comp;       // Переменные для печати отчетов в FastReport
   Os_nm                  : string;
   metodU                 : string;
   InvNum                 : string;
   Data                   : string;
   SumSt                  : tSumma;
   SumIzn                 : tSumma;

   wCanEditIznosPs        : word;
   wCanEditStoimPs        : word;
   cParentKatOS           : comp;     // ссылка на запись родителя (KatOS)
   boIsMUCommonCost       : boolean;
   cPerOsNRec             : comp;     // ссылка на переоценку

   cLastNastr             : comp;     // ссылка на настройку отображения колонок в FR-реестре

   CurDesGr   : tDesGr;
   CurDescr   : tDescr;
   CurVisible   : word;
   CurCO        : comp=0;
   CurVisibleCO : word;

   MarkerInMemo : TPtr;
   boInMemLoad,
   boSwitchView,
   boInMemTitle : boolean;
   OS_Reserv_Use : boolean;  // Использовать резерв
   OS_Reserv_NastrOs : comp;
   OS_Comp_Use : boolean;   // Использовать компоненты

   wFillAmGrWith : word;
   boFormRep : boolean;

   IsStatNastr  : boolean;  // Признак активности настройки прав доступа по статусу
   FlUpdStat    : boolean;
   bIsTNPR      : boolean;
   _wIntMode    : Word = 0;
   iFldRgh      : word = 0;
   boManualUnlock : boolean = false;
   boIsNastrOS_MSFO : boolean = false;
   IsNotEditPodrAndMOLbySoprSklad_OS : boolean=false;
   Type_1        : word;
  As select
//---------------------------------
     if (NastrOs.cVal = 0,NDE_SIMVRUB,KlValK.Dollar)                            (FieldName = SimVolVMy)

//---------------------------------
    ,if (SpKatOs.cVal = 0,NDE_SIMVRUB,KlValS.Dollar)                            (FieldName = SimVolVAmort)

//---------------------------------
    ,if (isValid(tnPick),'V','')                                                (FieldName = Vbr)

//---------------------------------
    ,if (Katos.isLeaf = 0, 1, 0)                                                (FieldName = ComplexOrNo)

//---------------------------------
    ,if(NastrOs.Field4 = 0, Katos.Kol, 1)                                       (FieldName = FKatosKol)

//==============================================================================
  // Остаточная стоимость на 31.12.2001
    ,if ( ((KatOs.DatEK <= Date(31,12,2001)) AND (KatOs.DatEK <> ZeroDate)  AND
           (KatOs.OtchPer > Date(1,1,2002))), SpKatos.DbReserv, 0.0 )           (FieldName = fOstStoim_2001_12_31)

//==============================================================================
//---------------------------------
    ,if ( (SpKatos.SrokIsp - (SpKatos.IspPs + SpKatos.IspCur)) > 0,
        (SpKatos.SrokIsp - (SpKatos.IspPs + SpKatos.IspCur)), 0)                (FieldName = OstSrokPolIsp)

//---------------------------------
    ,if(OS_FormIzn = 0, SpKatos.SumIzn, SpKatos.SumIzn + SpKatos.SIznM)         (FieldName = IznosNastr)

//---------------------------------
    ,if (KatOs.wOrigType = osfKatStroy, KatStroy.Name,'')                       (FieldName = KatStroyName)

//---------------------------------
    ,if (KatOs.wOrigType = osfKatStroy, String(KatStroy.DataReg),'')            (FieldName = KatStroyDataReg)

//---------------------------------
    ,if (KatOs.wOrigType = osfKatStroy, KatStroy.NoSvidReg,'')                  (FieldName = KatStroyNoSvidReg)

//---------------------------------
    ,pOsFun.LastDayDate(Sub_Months(KatOs.OtchPer,1))                            (FieldName = DateOfPrevArchive)

//---------------------------------
    ,pOsFun.LastDayDate(Sub_Months(KatOsS.OtchPer,1))                           (FieldName = DateOfPrevArchiveS)

//---------------------------------
    ,if (wCountry = ccBel, DoubleToStr(VidNorma.SrokIsp,'\2p[|-]3666.89') , DoubleToStr(VidNorma.Norma,'\6p[|-]3666.888999') )  (FieldName = VidNormaNorma)

//---------------------------------
    ,#ShowKau(cgKau_FpCO, KatOs.cCO)                                            (FieldName = CoName)

//---------------------------------
    ,GetKauReffArrayName('KatOs',KatOs.nRec)                                    (FieldName = KauReffArray)

//---------------------------------
    ,if ( Not (IsValid(tnKatOS) AND (KatOS.cReserv2 <> comp(0)))
      , '', AF.GetFullAddressInd(KatOS.cReserv2) )                              (FieldName = FullAdresOS)

//---------------------------------
    , if (KatOs.wReserv1 <> osfKatStroy, GetRefKatSoprOrAkt(KatOs.cInSpOrder), 0)    (FieldName = fcRecKatSopr)

//---------------------------------
    , if (KatOs.wReserv1 <> osfKatStroy, GetRefSopr_Sklad_OS(KatOs.cSpOrder), 0)    (FieldName = fcRecSopr_Sklad_OS)

//---------------------------------
, #include fSumValueIK.vpp
//---------------------------------
, #include O_Field1.vpp // Oborot property's

,  if(isValid(tnRepGrLst), RepGrLst.Name, '')                                       (FieldName = DlgFldNastr )
//--------------------------------------------------
,  if (Os_SrokIspEdIzm=0,'мес','лет')                                               (FieldName = DlgSrokIspTime )
//--------------------------------------------------
,  #ShowKau(cgKau_KatPodr, KatOs.cPodr)                                             (FieldName = fKatPodrName )
#ifdef __TPR2__
//--------------------------------------------------
,  #ShowKau(cgKau_KatPodr, KatOs.cPodrTr)                                           (FieldName = fPodrTrName )
#end
//--------------------------------------------------
,  #ShowKau(cgKau_KatMOL, KatOs.cMol)                                               (FieldName = fKatMolName )
#ifdef __TPR2__
, if(not IsValid(tnSaldTune), 'Объект целевого учета не привязан', SaldTuneSop.Name)
    (FieldName = vsNameTune)
, GetRoleName(1) (FieldName = vsRole1)
, GetRoleName(2) (FieldName = vsRole2)
, GetRoleName(3) (FieldName = vsRole3)
, GetRoleName(4) (FieldName = vsRole4)
, GetRoleName(5) (FieldName = vsRole5)
, GetRoleName(6) (FieldName = vsRole6)
, GetRoleName(7) (FieldName = vsRole7)
, GetRoleName(8) (FieldName = vsRole8)
, GetRoleName(9) (FieldName = vsRole9)
, GetRoleName(10) (FieldName = vsRole10)
, GetValue(1) (FieldName = vsKau1)
, GetValue(2) (FieldName = vsKau2)
, GetValue(3) (FieldName = vsKau3)
, GetValue(4) (FieldName = vsKau4)
, GetValue(5) (FieldName = vsKau5)
, GetValue(6) (FieldName = vsKau6)
, GetValue(7) (FieldName = vsKau7)
, GetValue(8) (FieldName = vsKau8)
, GetValue(9) (FieldName = vsKau9)
, GetValue(10) (FieldName = vsKau10)
#end
//--------------------------------------------------

    , KatOs.*, SpKatOs.*, VidNorma.Kod, VidNormaS.Kod, IspOs.NAMEIS,
     GrOs.NameGr, OsAlg.Name, AllMemo.Mem, Kodof.Name_of, Kodof.Kod_of,
     KatMol.Name, KatPodr.Name, Sposob.NameSb, KlValK.Dollar, KlassOS.Name,
     KlVal.Dollar, KlVal.Dollarah, KlVal.SimvolV, HozOper.Name1,
     KlValO.SimvolV, KatosLink.NameOs,
     NastrOs.*, ArcIznosD.*, ArcIznosAnyMU.*
     // ПИР 101.32118
     , OSRazn.*

   From

    Katos,
    SpKatos,
    SpMoveOs,
    MyStruct,
    ExClassName,
    ExClassSeg,
    KatMc,
    MoveOs,
    KatStroy,
    VidNorma,
    Oborot,
    IspOs,
    GrOs,
    KatMol,
    KatPodr,
    KlassOs,
    HozOper,
    tOborotSel (tObSelDatOb),
    Transp,
    KlVal,
    PlansSch(ReadOnly),
    OsAlg   (ReadOnly),
    Sposob  (ReadOnly),
    ProbTr  (Normal),
    NastrOs,
    NalDrag,
    PerOs   (ReadOnly),
    ArcIznos,
    Pick,
    KodOf,
    ExClassVal,
    AllMemo,
    KatEd,
    NalGrOs,
    KatNalGr,
    PrSb,
    KatOrg,
    KatOrg KatOrgArenda,

    FrCrossTbl,     // таблицы для FR
    FrKartVal,      // <-//->
    FrKartOSTbl,    // <-//->
    FrKatOsGr,      // <-//->


    AttrVal,        // таблица значений внешних атрибутов
// для иерархий
    Katos    KatosLink,
    SpKatos  SpKatosLink,
    Katos    Katos6,
    Katos    KatosS,

    ArcIznos ArcIznosS,
    ArcIznos ArcIznosD,
    ArcIznos ArcIznosAnyMU,
    VidNorma VidNormaS,
    VidNorma VidNormaN,
    // VidNorma VidNormaQC,
    VidNorma VidNorma6,

    IspOs    IspOs_Syn,
//
    Kodof    Kodof6,
    Pick     PickS,
    KlVal    KlValO,
    KlVal    KlValK,
    KlVal    KlValC,
    KlVal    KlValS,
    NastrOs  NastrOsO,
    SpKatOs  SpKatOsO,
    SpKatOs  SpKatOsN,
    SpKatOs  SpKatOs6,
    ExClassVal ExClassValS1,
    ExClassVal ExClassValS2,
    ExClassVal ExClassValS3,
    ExClassVal ExClassValS4,
    ExClassVal ExClassValS5,
    ExClassVal ExClassValS6,
    SpVvStroy  SpVvStroyN,
    NalDrag    NalDragS,
    AllMemo    AllMemoS,
    KauReff,
    KauReff KauReff1,
    KauReff KauReff2,
    KauReff KauReff3,
    KauReff KauReff4,
    KauReff KauReff5,
    KauReff KauReff6,
#ifdef __TPR2__
    tmp_KauReff tmp_KauReffI, // для фильтров по внешним КАУ
    tmp_KauReff tmp_KauReffD,
    tmp_KauReff tmp_KauReff1,
    tmp_KauReff tmp_KauReff2,

    tmp_KauReff tmp_KauReff3,
    tmp_KauReff tmp_KauReff4,
    tmp_KauReff tmp_KauReff5,
    tmp_KauReff tmp_KauReff6,
#end
    UserPermit,
    UserPermit USERPERMITD,
    KatKau,

    //для пересчёта сумм по методам учёта
    Pick     PickNastr,

    //для печати ведомости наличия и износа по помеченным записям
    Katos    KatosInv,
    Pick     PickInv,

    //все подцепленные ОС-ы одного уровня вложенности
    KatOs    KatosSel,

    //для определения типа операции Изменения стоимости (модернизация-ремонт) при пересчёте поля Изм.стоимости
    KlassOs  KlassOsOsn
   ,SpMoveOs SpMoveOsS
   ,SpMoveOs SpMoveOsPartialMove
   ,MoveOs   MoveOsPartialMove
   ,tmpMySelTbl
   ,MoveOs    MoveOsVib      (ReadOnly)
   ,MoveOs    MoveOsVibPart  (ReadOnly)
   ,SpMoveOs  SpMoveOsVib    (ReadOnly)
   ,SpMoveOs  SpMoveOsVibPart(ReadOnly)
   ,KlassOs   KlassOsVib     (ReadOnly)
   ,KlassOs   KlassOsVibPart (ReadOnly)
   ,ProbTr    ProbTrCurr

   ,OSRazn
   ,ArcIznos ArcIznos_PrevOtchPer
   ,FrReestr
   ,FrReestrWithOS (FrReestrWithOS1)
   ,FrNeOtch
   ,FrSostObj
   ,FrMC
   ,FrUsl
   , FrUsl FrUslObj

   , ImKol
   , mtFltOs
   , SpForm
   , KatOs   KatOsTemp   // для заполнения ИК по шаблону
   , SpKatOs SpKatOsTemp
   , AddressN
   , AddressN  AddressNFil
   , Sterr

   , SpOrder
   , SklOrder

   , KatOs KatOsTrans

   , mt_PrintTable (mt_PrintTable03)
   , mt_PrintCardRow
   , Katform
   , Katform Katform_Tr (KatForm04)
   , SpForm  SpForm_Tr

   , Aval

   , KatDrag
   , slParams (Index1)
   , ArcIznOS ArcIznosFind
   , ArcIznOS ArcIznos_N
   , ArcIznOS ArcIznOS_Higher
   , ArcIznOS ArcIznOS_Higher_N
   , SpKatOS  SpKatOS_Cur
   , NastrOS  NastrOS_Cur
   , VidNorma VidNorma_Cur_cVid
   , KatOS    KatOS_Higher
   , KatOS    KatOS_Higher_N
   , KatOs    KatOsReserv
   , SpKatOS  SpKatOSReserv
   , KlassOs  KlassOsRsrv
   , RepGrLst
   , RepGrOne
   , Columns
   , DocInfo
   , SpDocInfo
   , DocInfo   DocInfo_Copy
   , SpDocInfo SpDocInfo_Copy
   , mt_FillAmGrRep
   , KlassOs KlassOs6
   , mt_OSLgota
   , otSpDIArenda
   , KatNotes        // статусы документа

#ifdef __TPR2__
   , Katos    KatosCompUp
   , CoFilial
   , LikvidOs

   , SaldTune
   , SpecMTR    SpecMTRSop
   , SaldTune   SaldTuneSop
   , SpSopr     SpSopUsl(SpSopr11)
   , SpSopr     SpSopr_L
#end


where ((
        TipDock           ==  Katos.tidk       and

        Katos.cGrup       ==  GrOs.Nrec        and  // группа
        Katos.cVid        ==  VidNormaS.Nrec   and  // Вид
        Katos.cOKOF       ==  Kodof.Nrec       and  // ОКОФ
        Katos.cPodr       ==  KatPodr.Nrec     and  // подразделение
        Katos.cMol        ==  KatMol.Nrec      and  // МОЛ
        KatOs.cPrSb       ==  PrSb.nRec        and  // признак собственности
        SpKatos.cIsp      ==  Ispos.Nrec       and  // использование
        SpKatOs.cGrAm     ==  KlassOs.nRec     and  // амортизационная группа
        word(3000)        ==  AllMemo.wTable   and  // характеристика
        Katos.NRec        ==  AllMemo.cRec     and
        Katos.cSposob     ==  Sposob.Nrec      and  // спецоборудование

        NastrOs.Nrec      ==  SpKatos.cNastrOs and
        Katos.Nrec        ==  SpKatos.cKatos   and  // спецификация
        SpKatos.cNorma    ==  VidNorma.Nrec    and  // норма
        SpKatos.cMetod    ==  OsAlg.Nrec       and  // алгоритмы
        SpKatos.cHozOper  ==  HozOper.Nrec     and  // ТХО
        NastrOs.cVal      ==  KlValK.NRec      and  // валюта
        SpKatos.cVal      ==  KlValS.Nrec      and

//-----------------------------------------------------
        Katos.Nrec        ==  ARCIZNOS.cKatos  and  // архив за предыдущий месяц
        NastrOs.Nrec      ==  ARCIZNOS.cNastrOs and
        DateOfPrevArchive ==  ARCIZNOS.Data     and

        Katos.NRec        ==  ArcIznosAnyMU.cKatos and // наличие архива на дату
        DateOfPrevArchive ==  ArcIznosAnyMU.Data   and // хотя бы для одного метода учета
//-----------------------------------------------------
        wTipOper          ==  tOborotSel.TiDk  and
        tOborotSel.cOborot==  Oborot.NRec      and // проводки по карточке
//-----------------------------------------------------
        Katos.NRec        ==  Pick.cRec        and  // групповой выбор
        cgPick_KatOs      ==  Pick.wList       and

//-----------------------------------------------------
        Katos.cHigherOs   ==  KatosLink.NRec       and  // для иерархий
//-----------------------------------------------------
        NastrOs.Nrec      ==  SpKatosLink.cNastrOs and  // для резервов
        KatosLink.Nrec    ==  SpKatosLink.cKatos   and

//-----------------------------------------------------
        SpMoveOs.cMoveOs  ==  MoveOs.Nrec      and  // пометка поступивших с помеченными
        SpMoveOs.cSpMove  ==  SpMove.Nrec      and
        MoveOs.cOsnov     ==  KlassOsOsn.Nrec  and
//-----------------------------------------------------
        KatOs.cEd         ==  KatEd.NRec       and  // единица измерения количества
//-----------------------------------------------------
        Katos.NRec        ==  ArcIznosD.cKatos   and // архив на дату перехода России на налоговый учет
        NastrOs.NRec      ==  ArcIznosD.cNastrOs and // to do
        date(31,12,2001)  ==  ArcIznosD.Data     and //    вынести эту дату на настройку
//-----------------------------------------------------
        TipDock           ==  KatosSel.TiDk      and  //все подцепленные ОС-ы одного уровня вложенности
        KatOs.nRec        ==  KatosSel.cHigherOs and
//-----------------------------------------------------
        Katos.NRec        ==  NalGrOs.cKatos     and  //привязка к налоговым группам
        NalGrOs.cKatNalGr ==  KatNalGr.NRec      and
//-----------------------------------------------------
        KatOs.nRec        ==  Transp.cKatOs      and  //привязка к автотранспорту
//-----------------------------------------------------
        myPlansNo         ==  PlansSch.NRec      and    // план счетов

        //для пересчёта сумм по методам учёта
        NastrOs.nRec      ==  PickNastr.cRec     and
        cgPick_NastrOs    ==  PickNastr.wList    and

        //для печати ведомости наличия и износа по помеченным записям
        KatosInv.NRec     ==  PickInv.cRec       and
        cgPick_KatOs      ==  PickInv.wList      and

//-----------------------------------------------------
        KatOs.nRec        ==  SpVvStroyN.cKatOs  and  // привязка операции поступления из УКСа
        KatOs.cOrigDoc    ==  KatStroy.nRec      and  // ссылка на Объект тстроительства  KatOs.wOrigType = osfKatStroy

        // KatOs.cSpOrder    ==  SpOrder.nRec      and    // Ордер на передачу в ОС

        fcRecKatSopr      ==  KatSopr.NRec       and  // Приходная накладная (KatOs.InSpOrdern - ссылка на приходный ордер KatOs.wReserv1=0)

// ---------------------------------------------------------------------------
     //данные о пробеге за текущий месяц
        KatOs.nRec          ==  ProbTrCurr.cKatOs  and
        Year(KatOs.OtchPer) ==  ProbTrCurr.TekGod  and
// ---------------------------------------------------------------------------
     //для номера документа и причины выбытия
        cVibitKatOs          == SpMoveOsVib.cKatOs   and
        NastrOs.nRec         == SpMoveOsVib.cNastrOs and
        cgOs_4_Vybyt         == SpMoveOsVib.SysOper  and
        SpMoveOsVib.cMoveOs  == MoveOsVib.NRec       and
        MoveOsVib.cOsnov     == KlassOsVib.NRec      and

        cVibitKatOs             == SpMoveOsVibPart.cKatOsNew and
        cgOs_4_Vybyt            == SpMoveOsVibPart.SysOper   and
        SpMoveOsVibPart.cMoveOs == MoveOsVibPart.NRec        and
        MoveOsVibPart.cOsnov    == KlassOsVibPart.NRec       and
        // ПИР 101.32118
        KatOs.TiDk              == OsRazn.TiDk               and
        KatOs.NRec              == OsRazn.cDoc               and

        FrSostObj.cSpKatOs      == FrMC.cSpKatOs             and
        FrMC.cSpOsMc            == FrUsl.cSpOsMc             and
        FrSostObj.cSpKatOs      == FrUslObj.cSpKatOs         and

        SpForm.cKatForm         == KatForm.NRec              and

        KatOs.NRec              == ArcIznosFind.cKatOs       and
        NastrOs.NRec            == ArcIznosFind.cNastrOs     and
        dBeginDate             <<= ArcIznosFind.Data         and
        dEndDate               >>= ArcIznosFind.Data         and
        KatOs.NRec              == ArcIznos_N.cKatOs         and
        NastrOs.NRec            == ArcIznos_N.cNastrOs       and
        dBeginDate             <<= ArcIznos_N.Data           and
        dEndDate               >>= ArcIznos_N.Data           and
        KatOS.nRec              == SpKatOS_Cur.cKatOS        and
        NastrOs.NRec            == SpKatOS_Cur.cNastrOS      and
        KatOS.TiDk              == NastrOS_Cur.TiDk          and
        KatOS.cVid              == VidNorma_Cur_cVid.nRec    and
        ArcIznOS_N.cHigherOS    == ArcIznOS_Higher_N.nRec    and
        ArcIznOS_Higher_N.cKatOS == KatOS_Higher_N.nRec      and
        ArcIznosFind.cHigherOS   == ArcIznOS_Higher.nRec     and
        ArcIznOS_Higher.cKatOS   == KatOS_Higher.nRec        and

        Form11Node               ==  KatForm_Tr.cForm        and
        word(11)                 ==  KatForm_Tr.cSpKat11 (noIndex) and
        KatForm_Tr.nRec          ==  SpForm_Tr.cKatForm

        and KatOs.cReserv3       ==  KlassOsRsrv.nRec        // тип резерва
        and OS_Reserv_NastrOs    ==  SpKatosReserv.cNastrOs
        and KatosReserv.Nrec     ==  SpKatosReserv.cKatos

        and cLastNastr           ==  RepGrLst.NRec
        and cLastNastr           ==  RepGrOne.cRepGrLst
        and RepGrOne.cRec        ==  RepGroup.NRec

        and KatOs.nRec           ==  mt_OSLgota.cKatOS
        and NastrOs.nRec         ==  mt_OSLgota.cNastrOS

        and DocInfo.NRec         == otSpDIArenda.cDocInfo
        and TipDocK              == otSpDIArenda.DocType

//-----------------------------------------------------
#ifdef __TPR2__
        and KatOs.cNote          ==  KatNotes.NRec            // статусы
        and Katos.cCompOs        ==  KatosCompUp.NRec         // компоненты ОС (связанные карточки)
        and Katos.cCOFilial      ==  CoFilial.NRec            // ЦО филиал

        and Katos.cLikvidOs      ==  LikvidOs.NRec            // Объекты ликвидации для карточки резерва
        // and LikvidOs.cKatStroy   ==  KatStroyLikvid.nRec


  AND  fcRecSopr_Sklad_OS     == SpSopUsl.cSopr
  and  coSpSopr               == SpecMTRSop.coTable
  and  SpSopUsl.nRec          == SpecMTRSop.cSpec
  and  SpecMTRSop.cSaldTune   == SaldTuneSop.nRec
#end
    ))
//--------------------------------------------------------------

// сортировка дерево
order trOrderInnum    by Katos.tidk, Katos.cHigherOs, KatOs.InNum
order trOrderName     by Katos.tidk, Katos.cHigherOs, KatOs.NameOs

// сортировка cписок
order brOrderInnum    by Katos.tidk, Katos.isLeaf, KatOs.InNum
order brOrderName     by Katos.tidk, Katos.isLeaf, KatOs.NameOs

order brOrderDatEk    by Katos.tidk, KatOs.DatEk


#ifdef __TPR2__
// сортировка дерево
order trOrderMol      by Katos.tidk, KatOs.cMol
order trOrderOKOF     by Katos.tidk, KatOs.cOKOF
order trOrderVid      by Katos.tidk, KatOs.cVid,   Katos.Innum
order trOrderGr       by Katos.tidk, KatOs.cGrup,  Katos.cVid
order trOrderPodrName by Katos.tidk, KatOs.cPodr,  Katos.NameOs
order trOrderPodrVid  by Katos.tidk, KatOs.cPodr,  Katos.cVID
order trOrderSposob   by Katos.tidk, KatOs.cSPOSOB
order trOrderDatEk    by Katos.tidk, KatOs.DatEk
order trOrderOtchPer  by Katos.tidk, KatOs.OtchPer, Katos.Innum

// сортировка cписок
order brOrderMol      by Katos.tidk, KatOs.cMol
order brOrderOKOF     by Katos.tidk, KatOs.cOKOF
order brOrderVid      by Katos.tidk, KatOs.cVid,   Katos.Innum
order brOrderGr       by Katos.tidk, KatOs.cGrup,  Katos.cVid
order brOrderPodrName by Katos.tidk, KatOs.cPodr,  Katos.NameOs
order brOrderPodrVid  by Katos.tidk, KatOs.cPodr,  Katos.cVID
order brOrderSposob   by Katos.tidk, KatOs.cSPOSOB, Katos.isLeaf, Katos.INNUM
#else
// сортировка дерево
order trOrderOKOF     by Katos.tidk, Katos.cHigherOs, KatOs.cOKOF
order trOrderMol      by Katos.tidk, Katos.cHigherOs, KatOs.cMol
order trOrderVid      by Katos.tidk, Katos.cHigherOs, KatOs.cVid,   Katos.Innum
order trOrderGr       by Katos.tidk, Katos.cHigherOs, KatOs.cGrup,  Katos.cVid
order trOrderPodrName by Katos.tidk, Katos.cHigherOs, KatOs.cPodr,  Katos.NameOs
order trOrderPodrVid  by Katos.tidk, Katos.cHigherOs, KatOs.cPodr,  Katos.cVID
order trOrderSposob   by Katos.tidk, Katos.cHigherOs, KatOs.cSPOSOB,Katos.INNUM
order trOrderDatEk    by Katos.tidk,                  KatOs.DatEk
order trOrderOtchPer  by Katos.tidk, KatOs.OtchPer,   Katos.cHigherOs

// сортировка cписок
order brOrderOKOF     by Katos.tidk, Katos.isLeaf, KatOs.cOKOF
order brOrderMol      by Katos.tidk, Katos.isLeaf, KatOs.cMol
order brOrderVid      by Katos.tidk, Katos.isLeaf, KatOs.cVid,   Katos.Innum
order brOrderGr       by Katos.tidk, Katos.isLeaf, KatOs.cGrup,  Katos.cVid
order brOrderPodrName by Katos.tidk, Katos.isLeaf, KatOs.cPodr,  Katos.NameOs
order brOrderPodrVid  by Katos.tidk, Katos.isLeaf, KatOs.cPodr,  Katos.cVID
order brOrderSposob   by Katos.tidk, Katos.isLeaf, KatOs.cSPOSOB,Katos.INNUM
#end


//--------------------------------------------------------------
//  bounds byNrecKatos = pNrecKatos == KatOs.Nrec  (NoIndex) ordered by tableorder

//--------------------------------------------------------------
#include KatOss_Bounds.vpp // ограничения
//--------------------------------------------------------------
  bounds byTree      = node     ==  Katos.cHigherOs  (NoIndex) ordered by tableorder
  bounds byBrowse    = word(1)  ==  Katos.isLeaf     (NoIndex) ordered by tableorder

//--------------------------------------------------------------
// для печати ОС-6 по пометке
  bounds byPrintOS6 =  Pick.cRec        == KatOs6.nRec

//--------------------------------------------------------------
// для разных пробежек по SpKatOs при наличии пометки в Pick
  bounds byFillAmGr =  NastrOs.nRec     == SpKatOs6.cNastrOs and
                       KatOs6.Nrec      == SpKatOs6.cKatos
  bounds byFillOkof =  KatOs6.cOkof     == Kodof6.Nrec

  bounds byFillSrok =  SpKatos6.cNorma  == VidNorma6.Nrec

  bounds byAmGr6    =  SpKatOs6.cGrAm   == KlassOs6.NRec

//--------------------------------------------------------------
//  bounds bySpMoveOs =  NastrOs.Nrec     == SpMoveOs.cNastrOs and
//                       KatOs.Nrec       == SpMoveOs.cKatOs
//                       ordered by SpMoveOs.DatOb

//--------------------------------------------------------------
  bounds byKatosOtchPer1  =   FilOtchPer   ==  KatOs.OtchPer    (NoIndex) ordered by tableorder
  bounds byKatosOtchPer2  =   FilOtchPer   <<  KatOs.OtchPer    (NoIndex) ordered by tableorder
  bounds byKatosOtchPer3  =   FilOtchPer   >>  KatOs.OtchPer    (NoIndex) ordered by tableorder
  bounds byKatosOtchPer4  =   FilOtchPer  <<=  KatOs.OtchPer    (NoIndex) ordered by tableorder
  bounds byKatosOtchPer5  =   FilOtchPer  >>=  KatOs.OtchPer    (NoIndex) ordered by tableorder

  Condition cnKatosNRec oldNRecKatos <> Katos.NRec

  bounds MarkBounds1 = cMyKatOs         == SpMoveOs.cKatOs   and
                       NastrOs.nRec     == SpMoveOs.cNastrOs and
                       cMySysOper       == SpMoveOs.SysOper

  bounds MarkBounds2 = cMyKatOs         == SpMoveOsPartialMove.cKatOsNew   and
                       cMySysOper       == SpMoveOsPartialMove.SysOper     and
                       NastrOs.nRec     == SpMoveOsPartialMove.cNastrOs (NoIndex)


  bounds MarkBounds3 = MoveOs.nRec      == SpMoveOsS.cMoveOs and
                       NastrOs.nRec     == SpMoveOsS.cNastrOs

  bounds MarkBounds4 = SpMoveOsPartialMove.cMoveOs == MoveOsPartialMove.nRec

//--------------------------------------------------------------

// для печати ведомостей наличия и износа по помеченным записям
  bounds byForNotGrupped   = TipDock       ==  KatosInv.TiDk      and
                             Katos.NRec    ==  KatosInv.cHigherOs

  bounds byPrintTrOKOF     = TipDock       == KatosInv.TiDk       and
                             word(1)       == KatosInv.isLeaf     and
                             Katos.cOKOF   == KatosInv.cOKOF
  bounds byPrintTrMol      = TipDock       == KatosInv.TiDk       and
                             word(1)       == KatosInv.isLeaf     and
                             Katos.cMol    == KatosInv.cMol
  bounds byPrintTrVid      = TipDock       == KatosInv.TiDk       and
                             word(1)       == KatosInv.isLeaf     and
                             Katos.cVid    == KatosInv.cVid   (noIndex)
  bounds byPrintTrGr       = TipDock       == KatosInv.TiDk       and
                             word(1)       == KatosInv.isLeaf     and
                             Katos.cGrup   == KatosInv.cGrup  (noIndex)
  bounds byPrintTrPodrName = TipDock       == KatosInv.TiDk       and
                             word(1)       == KatosInv.isLeaf     and
                             Katos.cPodr   == KatosInv.cPodr
  bounds byPrintTrPodrVid  = TipDock       == KatosInv.TiDk       and
                             word(1)       == KatosInv.isLeaf     and
                             Katos.cPodr   == KatosInv.cPodr
  bounds byPrintTrSposob   = TipDock       == KatosInv.TiDk       and
                             word(1)       == KatosInv.isLeaf     and
                             Katos.cSPOSOB == KatosInv.cSPOSOB

  bounds byPrintTrGr2      = TipDock       == KatosInv.TiDk       and
                             word(1)       == KatosInv.isLeaf     and
                             Katos.cGrup   == KatosInv.cGrup   (noIndex)   and
                             Katos.cVid    == KatosInv.cVid    (noIndex)
  bounds byPrintTrPodrVid2 = TipDock       == KatosInv.TiDk       and
                             word(1)       == KatosInv.isLeaf     and
                             Katos.cPodr   == KatosInv.cPodr      and
                             Katos.cVID    == KatosInv.cVID    (noIndex)
  // для пакетного изменения привязки ОС к налоговой группе
  Bounds byKatNalGr        = cNewKatNalGr ==  KatNalGr.NRec
  // для печати ведомости наличия и износа
  Bounds byArcIznos_PrevOtchPer =
         KatOS.NRec    == ArcIznos_PrevOtchPer.cKatOS   and
         NastrOS.NRec  == ArcIznos_PrevOtchPer.cNastrOS and
         dReeOtchPer  >>= ArcIznos_PrevOtchPer.Data
  //Наследование архива износа (истории разниц) для новых ИК (101.37757)
  Bounds byArcIznosPrevOtchPer_CopyArchiveInNew =
         08FFFFFFFFFFFFFFFh << ArcIznos_PrevOtchPer.NPP (NoIndex)
//--------------------------------------------------------------
// для поиска инвентарных карточек по операциям за период
  bounds byOsOperation = NastrOs.nRec  == SpMoveOs.cNastrOs and
                         KatOs.nRec    == SpMoveOs.cKatOs   and
                         dBeginDate   <<= SpMoveOs.DatOb    and
                         dEndDate     >>= SpMoveOs.DatOb    (NoIndex)

  bounds byNullOsOper  = NastrOs.Nrec  == SpMoveOs.cNastrOs and
                         KatOs.Nrec    == SpMoveOs.cKatOs   and
                         dBeginDate   <<= SpMoveOs.DatOb

  bounds byOborotDescr = CurDescr      == tOborotSel.Descr  (NoIndex) ordered by TableOrder
  bounds byOborotDesGr = CurDesGr      == tOborotSel.DesGr  (NoIndex) ordered by TableOrder

  condition InMemByMarker = FoundMarker(MarkerInMemo, KatOs.NRec)
//--------------------------------------------------------------
;

parameters TipDock,        // Тип
           pNrecKatos,     //
           GrupVbr,        // 0 - редактирование
                           // 1 - одиночный выбор
                           // 2 - групповой выбор
                           // 3 - для иерархий
                           // 4 - групповой выбор(позволяет выбирать только ветки целиком)
                           // 5 - тоже что и 2, только без чистки Pick
                           // 6 - спецоборудование
                           // 7 - групповой выбор + не позволяет снять фильтры по Подразделению и МОЛ. Не убирать, нужно для амортизации
                           // 8 - вызов для Компонента. Закрывает интерфейс при выходе из окна.
                           // 9 - вызов для Амортизации. Сохраняем Pick и устанавливаем фильтр по Отчетному периоду.
           NrecPodr,       // ограничения по подразделению
           NrecVid,        // ограничения по виду
           NrecMol,        // ограничения по МОЛ
           oldNRecKatos;   // не показывать этот

// Установить Protect для текущей записи KatOS и связанные с ней
Procedure SetProtectedKatOS; Forward;
procedure SetTitles;         Forward;
Function ColorZap : word;    Forward;

var phUNastrOsPos   : comp;
var liWiEditKatOs   : longint; // код окна редактирования
var  wPickNum, wPickNumSort   : LongInt;   // кол-во отмеченных и для сортировки
var aArrCommands    : array [1..1] of word;

var   #include Fld_Amort.var

// для вычисления значений сложных объектов (Sanny)
var    OldSpKatosStoim       : tSumma;
var    OldSpKatosStoimPs     : tSumma;
var    OldKatOsKol           : tSumma;

var  isSetUserRghFields  : boolean = false; // Заданы ли права доступа по полям

property IGetSomeKontrPrimParameters.wIntMode          : word read _wIntMode;
property IGetSomeKontrPrimParameters.LastKatOrgImp_nRec: comp read 0;


form frmOsnSr('OsnSr.OUT','OsnSr');

form frmOsOne('OsOne.OUT','OsOne');
form frmKatRee('OSKATREE.OUT','OSKATREE') with novisual;

Form fOSOpis ('osopis.out', 'osopis') With NoVisual;  // Ведомости наличия и износа
Form frmArcIzm('ArcIzm.OUT','ArcIzm') with NoVisual;  // Ведомости изменения карточек

Form frmKatOtchPer('KatOtchPer.OUT','KatOtchPer') with NoVisual; // Печать отчета по карточкам не в отчетном периоде

Form frmDifSpKatOs('DifSpKatOs.OUT', 'DifSpKatOs') with NoVisual; // Печать результатов сравнения ИК по методам учета



#declare BoundsByLinkTBL(_pSet)
{
  // для KatOS
  #(_pSet)Bounds(tnKatMol);         // МОЛ
  #(_pSet)Bounds(tnGrOs);           // группа
  #(_pSet)Bounds(tnVidNormaS);      // Вид
  #(_pSet)Bounds(tnKodof);          // ОКОФ
  #(_pSet)Bounds(tnKatPodr);        // подразделение
  #(_pSet)Bounds(tnPrSb);           // признак собственности
  #(_pSet)Bounds(tnAllMemo);        // характеристика
  #(_pSet)Bounds(tnSposob);         // спецоборудование
  #(_pSet)Bounds(tnArcIznos);       // архив за предыдущий месяц
  #(_pSet)Bounds(tntOborotSel);     // проводки по карточке
  #(_pSet)Bounds(tnKatEd);          // единица измерения количества
  #(_pSet)Bounds(tnNalGrOs);        // привязка к налоговым группам
  #(_pSet)Bounds(tnArcIznosD);      // архив на дату перехода России на налоговый учет
  #(_pSet)Bounds(tnArcIznosAnyMU);  // наличие архива на дату перехода России на налоговый учет
  #(_pSet)Bounds(tnSpVvStroyN);     // привязка операции поступления из УКСа
  #(_pSet)Bounds(tnTransp);         // привязка к автотранспорту
  #(_pSet)Bounds(tnPickNastr);      // для пересчёта сумм по методам учёта
  #(_pSet)Bounds(tnPickInv);        // для печати ведомости наличия и износа по помеченным записям
  #(_pSet)Bounds(tnKatStroy);       // объект строительства
  #(_pSet)Bounds(tnProbTrCurr);     // данные о пробеге за текущий месяц
  #(_pSet)Bounds(tnSpMoveOsVib);    // для номера документа и причины выбытия
  #(_pSet)Bounds(tnSpMoveOsVibPart);// для номера документа и причины частичного выбытия
  #(_pSet)Bounds(tnOsRazn);         // налоговые разницы

  #(_pSet)Bounds(tnKatosLink); // для иерархий
  #(_pSet)Bounds(tnKatOsSel);       //все подцепленные ОС-ы одного уровня вложенности

  // для SpKatOS
  #(_pSet)Bounds(tnIspOs);  // использование
  #(_pSet)Bounds(tnKlassOs);  // амортизационная группа
  #(_pSet)Bounds(tnVidNorma); // норма
  #(_pSet)Bounds(tnOsAlg);    // алгоритмы
  #(_pSet)Bounds(tnHozOper);   // ТХО
  #(_pSet)Bounds(tnKlValS);

  if not BoundActive(tbbySpKatOs)
    #(_pSet)Bounds(tnSpKatOs);

}
#end

#declare SetOneCostValue(_pField)
{
  if boIsMUCommonCost
    set SpKatOS.#(_pField) := Double(ExprFieldValue) * KatOs.Kol
  else
    set SpKatOS.#(_pField) := Double(ExprFieldValue);
}
#end

#declare SetCommonCostValue(_pField)
{
  if boIsMUCommonCost
    set SpKatOS.#(_pField) := Double(ExprFieldValue);
  else
    set SpKatOS.#(_pField) := Double(ExprFieldValue)/KatOs.Kol
}
#end

#declare SetCostValue(_pField)
{
   set SpKatOS.#(_pField) := Double(ExprFieldValue);
}
#end

//-----------------------------------------------------------------------------
ToolBar
    F_Common::tbBuhFilter
  , F_Common::tbSort
  , F_OS    ::tbMetodUh
  , F_Common::tbPlansNo
  , F_Common::tbTree_brows
  , F_OS    ::tbPrintDoc
  , F_Common::tbClassifier
  , F_Common::tbAttribute
;


//-----------------------------------------------------------------------------
#define FlLink     KatosLink.InNum 'Сложный'('Инвентарный номер сложного объекта')  : [12],  protect, noAutoSize;
#define FlInNum    Katos.InNum     '№'#13'инвентарный' ('Инвентарный номер')        : [16],  protect, noAutoSize;
#define FlNameOs   Katos.NameOs    'Наименование'('Наименование объекта')           : [50],  protect;
#define FlDATEK    Katos.DatEk     'Дата'#13'ввода'  ('Дата ввода в эксплуатацию')  : [10],  protect, noAutoSize, centered;
#define FlStoim    SpKatos.Stoim * FKatosKol  'Стоимость'   ('Первоначальная стоимость')                   : [18,2,'\2p[|-]3666`666`666`666`666.88'], protect, noAutoSize;
#define FlSumIzn   SpKatos.SumIzn * FKatosKol 'Амортизация'('Сумма амортизации на начало текущего отчетного периода') : [18,2,'\2p[|-]3666`666`666`666`666.88'], protect, noAutoSize;
#define FlSIznM    SpKatos.SIznM * FKatosKol  'Амортизация'#13'за период'('Сумма амортизации за текущий период')      : [14,2,'\2p[|-]3666`666`666`666`666.88'], protect, lessNull, noAutoSize;
#define FlSrokIsp  OstSrokPolIsp              'Срок'#13'исп.'('Оставшийся срок использования')   : [8,2], protect, noAutoSize;
#define FlVbr      Vbr '' :[1], protect, noAutoSize;
#define FlRegN     Katos.RegNum               'Регистрац.'#13'номер'                :[10],  skip,     noAutoSize;
#define FlProbeg   ProbTrCurr.mes[13]         'Текущий'#13'месяц'('Данные за текущий месяц') : [7],  noprotect,noAutoSize, lessNull;
#define Fl_OtchPeriod  DateToStr(KatOs.OtchPer,'YYYY/MM')   'Отчетный'#13'период'('Отчетный период ИК')    : [7], protect, noAutoSize, centered;
#define FlDATLV    KatOs.dtReserv1            'Дата'#13'ликвидации'('Дата ликвидации')       : [10],  protect, noAutoSize, centered;



//-----------------------------------------------------------------------------
datastream PrintFR_RowCard
(
  table mt_PrintTable
  (
    [StrName ] mt_PrintTable.StrName;
    [ParamNum] mt_PrintTable.ParamNum;
    [FilialNo] mt_PrintTable.FilialNo;
    [InvNum  ] mt_PrintTable.InvNum;
    [NameOs  ] mt_PrintTable.NameOs;
    [DATOK   ] mt_PrintTable.DATOK;
  );

  table mt_PrintCardRow
  (
    [StrName   ] mt_PrintCardRow.StrName;
    [ParamNum  ] mt_PrintCardRow.ParamNum;
    [FilialNo  ] mt_PrintCardRow.FilialNo;
    [InvNum    ] mt_PrintCardRow.InvNum;
    [NameOs    ] mt_PrintCardRow.NameOs;
    [DATOK     ] mt_PrintCardRow.DATOK;
    [Stoim     ] mt_PrintCardRow.Stoim;
    [Ammort    ] mt_PrintCardRow.Ammort;
    [TreeLVL   ] mt_PrintCardRow.TreeLVL;
    [isHaveCard] mt_PrintCardRow.isHaveCard;
  );
)
end;
//-----------------------------------------------------------------------------
// просмотр не дерево
  // browse pDocument ('', hcOSBInvKart, sci178EnEscInsPM);
  browse pDocument ('', hcOSBInvKart, sci1478EnIns);
    show at (,,,33);
     table KatOs;
      Fields
         {Font ={Color = ColorZap}};
        #ifdef __TPR2__
        KatNotes.sName  'Статус' ('Статус инвентарной карточки') : [10], Protect, NoAutoSize, Centered,
                  browseImage(iCase(KatOs.Status;   'L_DOGOVOR::BmpOformLeave'
                                                  , 'L_DOGOVOR::BmpIspolLeave'
                                                  , 'L_DOGOVOR::BmpZakrLeave'  ; ''));
        #end
        KatOs.DesGr            'Группа'    ('Рабочая группа менеджеров')            : [5], Protect, NoAutoSize;
        KatOs.Descr            'Дескр.'    ('Дескриптор (идентификатор менеджера)') : [5], Protect, NoAutoSize;
        #FlLink
        #FlInNum
        #FlNameOs
        KatPodr.Name           'Подразделение'('Наименование подразделения')        : [18], protect, noAutoSize;
        KatMol.Name            'МОЛ'('Материально-ответственное лицо')              : [18], protect, noAutoSize;
        #FlDATEK
[brColumnPerStoim]  SpKatos.PerStoim * FKatosKol  'Сумма'#13'резерва'   ('Сумма резерва с учетом пероценок')  : [18,2,'\2p[|-]3666`666`666`666`666.88'], protect, noAutoSize;
      [brColumnStoim]
        #FlStoim
      [brColumnSumIzn]
        #FlSumIzn
      [brColumnSIznM]
        #FlSIznM
        #FlSrokIsp
        #FlRegN
        #FlProbeg
        #FlDATLV
        #Fl_OtchPeriod
        #FlVbr
  end;

//----------------------------------------------------------
// просмотр дерево
//tree trDocument ('',hcOSBInvKart, sci178EnEscTreeIns);  // по старому
  tree 3 trDocument ('',hcOSBInvKart, sci1478EnEscTreeI);
    show at (,,,33);
     table KatOs;
      Fields
         {Font ={Color = ColorZap}};
        #ifdef __TPR2__
        KatNotes.sName  'Статус' ('Статус инвентарной карточки') : [8], Protect, NoAutoSize, Centered;
        #end
        KatOs.DesGr            'Группа'    ('Рабочая группа менеджеров')            : [5], Protect, NoAutoSize;
        KatOs.Descr            'Дескр.'    ('Дескриптор (идентификатор менеджера)') : [5], Protect, NoAutoSize;
        #FlInNum
        #FlNameOs
        KatPodr.Name           'Подразделение'('Наименование подразделения')        : [18], protect, noAutoSize;
        KatMol.Name            'МОЛ'('Материально-ответственное лицо')              : [18], protect, noAutoSize;
        #FlDATEK
[trColumnPerStoim]  SpKatos.PerStoim * FKatosKol  'Сумма','с учетом пероценок'   ('Стоимость с учетом пероценок')  : [18,2,'\2p[|-]3666`666`666`666`666.88'], protect, noAutoSize;
        #FlStoim
      [trColumnSumIzn]
        #FlSumIzn
      [trColumnSIznM]
        #FlSIznM
        #FlSrokIsp
        #FlRegN
        #FlProbeg
        #Fl_OtchPeriod
        #FlVbr
  end;

//----------------------------------------------------------
TabbedSheet Bottom tshKatOsInfo
show at(,34,,);

Screen ScKatos 'Карточка' (,hcOSBInvKart,sci1EnEsc);
  Fields
    [Os_Name] if(true,Katos.NameOs,'')                   : skip;        // Наименование

    [GrOs_Show]  #ShowKau(cgKau_GrOs, Katos.cGrup)       : skip;        // Группа ОС
    [OtchPeriod] if (KatOs.OtchPer <> ZeroDate, DateToStr(Katos.OtchPer,'Month YYYY'), '') : skip, RIGHT;
    [Os_Kol] if(true,KatOs.Kol,0)                        : [kol_KatOs],skip; //Кол-во
    [Os_Ed]  if(true,KatEd.ABBR,'')                      : skip;        // Ед.измерения


    [VidOs_Show] #ShowKau(cgKau_VidNor1, Katos.cVid)     : skip;        // Вид ОС
    [GODV_Show]  if(true,Katos.GodV,ZeroDate)            : skip, RIGHT; // Выпуск
    [Os_Isp]     if(true,SpKatos.SrokIsp,0)              : skip, RIGHT; // срок полезного использования


    [Os_of]      if(true,Kodof.Name_of,'')               : skip;         // ОКОФ
    [Katos_DatOk_Show]  if(true,Katos.DatOk,ZeroDate)    : skip, RIGHT; // Поступил
    SpKatos.IspPs + SpKatos.IspCur                       : skip, RIGHT; // текущий срок использования

    #ShowKau(cgKau_IspOs, SpKatos.cIsp)                  : skip;        // признак использования
    [DATAV_Show] if(true,Katos.DATV,ZeroDate)            : skip, RIGHT; // Выбыл
    ModAmortStrExt()                                     : skip, RIGHT; // Состояние

    [Os_Sb]      if(true,Sposob.NameSb,'')               : skip;        // Тип объекта

<<
 `Наименование`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Группа`        .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  `Отчетный период`.@@@@@@@@@@@@@@@  `Количество`  .@@@@@@@@@@@.@@@@
 `Вид`           .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  `Выпуск`              .@@@@@@@@@@  `Срок полезн.испол`  .@@@@
 `ОКОФ`          .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  `Поступил`            .@@@@@@@@@@  `Текущий срок испол` .@@@@
 `Использование` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  `Выбыл`               .@@@@@@@@@@  `Состояние`    .@@@@@@@@@@
 `Тип объекта`   .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end; // screen


Embedded scNalDragBr 'Драгметаллы' interface iNaldrag.winShow;
end;

Embedded ProbTrShow 'Спец.Данные' interface iSpecOb.winShow;
end;

Embedded scMcInOsShow 'Состав' interface iMcInOs.wiMcInOsShow;
end;

Embedded scOsRaznShow 'Разницы' interface iOsRaznW.WinShow;
end;

Embedded brSostByIF 'Финансирование' interface iSostByIF.winShow;
end;

Embedded scRasKoef 'Переоценка' interface iRasKoef;
end;

Embedded scChangeHist 'История изменения' interface intChangeHist.winChangeHistEmb
end;

Embedded brArcBr 'Архив' interface pGetArc.winArcBr;
end;

//-----------------------------------------------------------------
Embedded brReservOsShow 'Резерв' interface pRsrv.WinShow;
end;

//-----------------------------------------------------------------
Embedded brCompOsBr 'Ведомые' interface pCompOs.WinShow;
end;

end; //TabbedSheet


//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
Window wiEditKatos 'Инвентарная Карточка', escclose;
  Show at( , , 125, 34);

ToolBar
    F_OS    ::tbMetodUh
  , F_Common::tbPlansNo
  , F_OS    ::tbPrintDocIK
  , F_Common::tbClassifier
  , F_Common::tbAttribute
  , F_Common::tbDopInfo
  , F_OS    ::tbRelation_Doc
;


#declare FCI_ColorS(Fld)
  {Font = {BackColor = if(#Fld = '',if(iFCI.isNeedField(Katos.cSposob, '#Fld'), ColorNeed,0), 0)}}
#end
#declare FCI_ColorDo(Fld)
  {Font = {BackColor = if(#Fld = 0,if(iFCI.isNeedField(Katos.cSposob, '#Fld'),ColorNeed,0), 0)}}
#end
#declare FCI_ColorD(Fld)
  {Font = {BackColor = if(#Fld = ZeroDate,if(iFCI.isNeedField(Katos.cSposob, '#Fld'),ColorNeed,0), 0)}}
#end
#declare FCI_ColorS_IF(Fld,Option)
  {Font = {BackColor = if(#Option,if(iFCI.isNeedField(Katos.cSposob, '#Fld'),ColorNeed,0), 0)}}
#end


//------------------------------------------------------------------------------
Screen KatOsScr ('',hcOSFInvKart,sci1378Esc);
  Show At (,,,25);
  Table Katos;

  BEVEL Bvl1 {,3, ,,bsRaised,bsHorizontal};
  BEVEL Bvl2 {,14,,,bsRaised,bsHorizontal};
  BEVEL Bvl2 {,20,,,bsRaised,bsHorizontal};
    Fields
       Katos.DesGr    ('Код группы пользователей',hcUserTune_Desgr) : Protect,      #FCI_ColorS(Katos.DesGr);
       Katos.DesCr    ('Дескриптор пользователя',hcUserTune_Descr)  : Protect,      #FCI_ColorS(Katos.DesCr);
       Katos.Innum    ('Инвентарный номер')                         : NoPickButton, #FCI_ColorS(Katos.Innum);
       Katos.Kol      ('Количество однотипных объектов',,sci178Esc) :[kol_KatOs],
         {Font = {BackColor = if(b_Kol_Is_Selectable and Katos.Kol = 0,ColorNeed,0)}};
       KatEd.ABBR     ('Единица измерения количества')              : Protect,      #FCI_ColorS_IF(KatEd.ABBR,Not IsValid(#KatEd));
      #ifdef __TPR2__
       KatNotes.Name    ('Статус документа',,sci13478Esc)             : Protect, PickButton, EditButton, #FCI_ColorS_IF(KatNotes.Name,Not ISValid(#KatNotes));
      #end
       KatOs.OtchPer  : ['Month YYYY'], Skip, Right, NoStatic,
         {Font ={Bold = True}};
       Katos.ZavNom   ('Заводской номер',,sci178Esc)                : NoProtect,    #FCI_ColorS(Katos.ZavNom);
       Katos.PsNum    ('Номер паспорта объекта',,sci178Esc)         : NoProtect,    #FCI_ColorS(Katos.PsNum);

       Katos.NameOs   ('Наименование')                              : NoProtect, NoPickButton,   #FCI_ColorS(Katos.NameOs),
         {Font = {BackColor = if(b_NameOs_Is_Selectable and Trim(KatOs.NameOs) = '',ColorNeed,0)}};
       GrOs.NameGr    ('Группа')                                    : Protect, QuickChoice, #FCI_ColorS_IF(GrOs.NameGr,Not IsValid(#GrOs));
       VidNormaS.KOD  ('Код вида')                                  : Protect, QuickChoice, #FCI_ColorS_IF(VidNormaS.KOD,Not IsValid(#VidNormaS));
       VidNormaS.NAME                                               : Skip;
       VidNorma.KOD   ('Код нормы амортизации ')                    : Protect, QuickChoice, #FCI_ColorS_IF(VidNorma.KOD,Not IsValid(#VidNorma));
       VidNormaNorma                                                : [kol_VidNorma], Skip;
       if (wCountry = ccBel,'лет','')                               : Skip;
       KodOf.Kod_of   ('Код группировки по ОКОФ')                   : Protect, QuickChoice, #FCI_ColorS_IF(KodOf.Kod_of,Not IsValid(#KodOf));
       KodOf.Name_of                                                : Skip;
       KlassOs.Kod    ('Код амортизационной группы')                : Protect, QuickChoice, #FCI_ColorS_IF(KlassOs.Kod,Not IsValid(#KlassOs));
       KlassOs.Name                                                 : Skip;
       IspOs.NameIs   ('Признак использования')                     : Protect, QuickChoice, #FCI_ColorS_IF(IspOs.NameIs,Not IsValid(#IspOs));
       PrSb.Name      ('Признак собственности')                     : Protect, QuickChoice, #FCI_ColorS_IF(PrSb.Name,Not IsValid(#PrSb));
       Sposob.NameSb  ('Тип объекта')                               : Protect, QuickChoice, #FCI_ColorS_IF(Sposob.NameSb,Not IsValid(#Sposob));
       fKatPodrName   ('Подразделение ')                            : Protect, QuickChoice, #FCI_ColorS_IF(fKatPodrName,Not IsValid(#KatPodr));
       fKatMolName    ('Материально-ответственное лицо')            : Protect, QuickChoice, #FCI_ColorS_IF(fKatMolName, Not IsValid(#KatMol));
       #ifdef __TPR2__
       fPodrTrName    ('Обособленное подразделение')                : Protect;
       #end

       Katos.GodV     ('Дата выпуска.'), #FCI_ColorD(Katos.GodV);
       f_StoimOne     ('Балансовая стоимость',,sci178Esc)
                       : [14.2,'\2p[|-]3666`666`666`666`666.88'], NoProtect, CalcButton, #FCI_ColorDo(SpKatOs.Stoim);
       [StoimVal_ShowEx] if(trim(KlValK.SimvolV)<>'','('+KlValK.SimvolV+')','')       : Skip;
       Katos.DatEk    ('Дата ввода в эксплуатацию.'), #FCI_ColorD(Katos.DatEk);
       f_SumIznOne    ('Сумма амортизации',,sci178Esc)
                       : [14.2,'\2p[|-]3666`666`666`666`666.88'], NoProtect, CalcButton,
                         {Label = sNameFieldSumIzn}, #FCI_ColorDo(SpKatOs.SumIzn);
       Katos.DatOk    ('Дата поступления.') :
         {Font = {BackColor = if(b_DatOk_Is_Selectable and Katos.DATOK = ZeroDate,ColorNeed,0)}};
       f_SIznMOne  ('Сумма амортизации за текущий отчетный период ИК',,sci178Esc)
                       : [14.2,'\2p[|-]3666`666`666`666`666.88'], NoProtect, CalcButton,
                         {Label = sNameFieldSIznM}, #FCI_ColorDo(SpKatOs.SIznM);
       Katos.DatV     ('Дата выбытия.'), #FCI_ColorD(Katos.DatV);
       f_OstStoimOne   : [14.2,'\2p[|-]3666`666`666`666`666.88']            Skip, #FCI_ColorDo(f_OstStoim);

       SpKatos.SrokIsp('Срок полезного использования',,sci178Esc)         : [5.2], NoProtect, #FCI_ColorDo(SpKatos.SrokIsp);
       DlgSrokIspTime : Skip;
       SpKatos.IspPs  ('Срок использования до поступления',,sci178Esc)    : [5.2], NoProtect, #FCI_ColorDo(SpKatos.IspPs);
       OstSrokPolIsp  ('Оставшийся срок полезного использования')         : [5.2], Skip, NoStatic, NoPickButton;
       SpKatos.IspCur ('Срок использования после поступления',,sci178Esc) : [5.2], NoProtect, #FCI_ColorDo(SpKatos.IspCur);
 Buttons
  cmAttrib,[icon bmpDopInfo],,,   'Дополнительная информация по карточке',hcOSFInvKartDop,sci1Esc;
  cmPrintDoc,[icon bmpPrintDoc],,,'Печать инвентарной карточки',hcOSPrmInvCard,sci1Esc;
  cmIEHist,[icon  bmpMetodUh],,,  'Смена метода учета',hcOSChanNastrOs,sci1Esc;
<<
 #ifdef __TPR2__
 .@@@@@@.@@@@@@@@`Инвентарный №`.@@@@@@@@@@@@@@@@@@`Кол-во`.@@@@@@@@@.@@@@@@`Статус`.@@@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@
`Заводской №`         .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@`№ паспорта`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Наименование`        .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 #else
 .@@@@@@@ .@@@@@@@@`  Инвентарный №`.@@@@@@@@@@@@@@@@`Количество`.@@@@@@@@@@@ .@@@@@@  .@@@@@@@@@@@@@@@
`Заводской №`         .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@`№ паспорта`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Наименование`        .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 #end

`Группа`              .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<. Доп. информация  .>
`Вид`                 .@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@`Норма`.@@@@@@@@.@@@@@.@@@
`Группировка ОКОФ`    .@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<. Печать карточки  .>
`Амортизац. группа`   .@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Призн.использования` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<.Смена метода учета.>
`Призн.собственности` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Тип объекта`         .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Подразделение`       .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`МОЛ`                 .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#ifdef __TPR2__
`Обособленное подр.`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#else

#end


`Дата выпуска`        .@@@@@@@@@@       `Стоимость`             .@@@@@@@@@@@@@@@@@@@@@@@@@@.@@@@@@
`Дата ввода`          .@@@@@@@@@@        `Label`                .@@@@@@@@@@@@@@@@@@@@@@@@@@
`Дата поступления`    .@@@@@@@@@@        `Label`                .@@@@@@@@@@@@@@@@@@@@@@@@@@
`Дата выбытия`        .@@@@@@@@@@       `Остаточная стоимость`  .@@@@@@@@@@@@@@@@@@@@@@@@@@

`Срок полезного испол`.@@@@@ .@@@    `до поступления`        .@@@@@
 оставшийся           .@@@@@         `после поступления`     .@@@@@
>>
end; // screen


//------------------------------------------------------------------------------
Screen KatOsScrCommonCost ('',hcOSFInvKart,sci1378Esc);
  Show At (,,,25);
  Table Katos;

  BEVEL Bvl1 {,3, ,,bsRaised,bsHorizontal};
  BEVEL Bvl2 {,14,,,bsRaised,bsHorizontal};
  BEVEL Bvl2 {,20,,,bsRaised,bsHorizontal};
Fields
   Katos.DesGr    ('Код группы пользователей',hcUserTune_Desgr) : Protect,      #FCI_ColorS(Katos.DesGr);
   Katos.DesCr    ('Дескриптор пользователя',hcUserTune_Descr)  : Protect,      #FCI_ColorS(Katos.DesCr);
   Katos.Innum    ('Инвентарный номер')                         : NoPickButton, #FCI_ColorS(Katos.Innum);
   Katos.Kol      ('Количество однотипных объектов',,sci178Esc) :[kol_KatOs],
     {Font = {BackColor = if(b_Kol_Is_Selectable and Katos.Kol = 0,ColorNeed,0)}};
   KatEd.ABBR     ('Единица измерения количества')              : Protect,      #FCI_ColorS_IF(KatEd.ABBR,Not IsValid(#KatEd));
  #ifdef __TPR2__
   KatNotes.Name    ('Статус документа',,sci13478Esc)             : Protect, PickButton, EditButton, #FCI_ColorS_IF(KatNotes.Name,Not ISValid(#KatNotes));
  #end
   KatOs.OtchPer  : ['Month YYYY'], Skip, Right, NoStatic,
         {Font ={Bold = True}};
   Katos.ZavNom   ('Заводской номер',,sci178Esc)                : NoProtect,    #FCI_ColorS(Katos.ZavNom);
   Katos.PsNum    ('Номер паспорта объекта',,sci178Esc)         : NoProtect,    #FCI_ColorS(Katos.PsNum);
   Katos.NameOs   ('Наименование')                              : NoProtect, NoPickButton,    #FCI_ColorS(Katos.NameOs),
     {Font = {BackColor = if(b_NameOs_Is_Selectable and Trim(KatOs.NameOs) = '',ColorNeed,0)}};

   GrOs.NameGr    ('Группа ОС/НМА')                             : Protect, QuickChoice,  #FCI_ColorS_IF(GrOs.NameGr,Not IsValid(#GrOs));
   VidNormaS.KOD  ('Код вида ОС/НМА')                           : Protect, QuickChoice,  #FCI_ColorS_IF(VidNormaS.KOD,Not IsValid(#VidNormaS));
   VidNormaS.NAME                                               : Skip;
   VidNorma.KOD   ('Код нормы амортизации ')                    : Protect, QuickChoice, #FCI_ColorS_IF(VidNorma.KOD,Not IsValid(#VidNorma));
   VidNormaNorma                                                : [kol_VidNorma], Skip;
   if (wCountry = ccBel,'лет','')                               : Skip;
   KodOf.Kod_of   ('Код группировки по ОКОФ')                   : Protect, #FCI_ColorS_IF(KodOf.Kod_of,Not IsValid(#KodOf));
   KodOf.Name_of                                                : Skip;
   KlassOs.Kod    ('Код амортизационной группы')                : Protect, #FCI_ColorS_IF(KlassOs.Kod,Not IsValid(#KlassOs));
   KlassOs.Name                                                 : Skip;
   IspOs.NameIs   ('Признак использование')                     : Protect, QuickChoice, #FCI_ColorS_IF(IspOs.NameIs,Not IsValid(#IspOs));
   PrSb.Name      ('Признак собственности')                     : Protect, QuickChoice, #FCI_ColorS_IF(PrSb.Name,Not IsValid(#PrSb));
   Sposob.NameSb  ('Тип объекта')                               : Protect, QuickChoice, #FCI_ColorS_IF(Sposob.NameSb,Not IsValid(#Sposob));
   fKatPodrName   ('Подразделение ')                            : Protect, QuickChoice, #FCI_ColorS_IF(fKatPodrName,Not IsValid(#KatPodr));
   fKatMolName    ('Материально-ответственное лицо')            : Protect, QuickChoice, #FCI_ColorS_IF(fKatPodrName,Not IsValid(#KatMol));
   #ifdef __TPR2__
   fPodrTrName    ('Обособленное подразделение')                : Protect;
   #end

   'за единицу                                сумма' : Skip, Right, {Font = {BackColor = 0}};
   Katos.GodV     ('Дата выпуска.'), #FCI_ColorD(Katos.GodV);
   f_StoimOne     ('Балансовая стоимость за единицу учета',,sci178Esc)
                   : [14.2,'\2p[|-]3666`666`666`666`666.88'], NoProtect, CalcButton, #FCI_ColorDo(SpKatOs.Stoim);
   f_StoimSum     ('Балансовая стоимость',,sci178Esc)
                   : [14.2,'\2p[|-]3666`666`666`666`666.88'], NoProtect, CalcButton, #FCI_ColorDo(SpKatOs.Stoim);
   if(trim(KlValK.SimvolV)<>'','('+KlValK.SimvolV+')','')       : Skip;
   Katos.DatEk    ('Дата ввода в эксплуатацию.'), #FCI_ColorD(Katos.DatEk);
   // проект 2.0054
   f_SumIznOne    ('Сумма амортизации за единицу учета',,sci178Esc)
                  : [14.2,'\2p[|-]3666`666`666`666`666.88'], NoProtect, CalcButton, #FCI_ColorDo(SpKatOs.SumIzn),
                    {Label = sNameFieldSumIzn};
   f_SumIznSum    ('Сумма амортизации',,sci178Esc)
                  : [14.2,'\2p[|-]3666`666`666`666`666.88'], NoProtect, CalcButton,#FCI_ColorDo(SpKatOs.SumIzn);
   Katos.DatOk    ('Дата поступления.') :
     {Font = {BackColor = if(b_DatOk_Is_Selectable and Katos.DATOK = ZeroDate,ColorNeed,0)}};
   // проект 2.0054
   f_SIznMOne     ('Сумма амортизации за единицу учета за текущий отчетный период ИК',,sci178Esc)
                   : [14.2,'\2p[|-]3666`666`666`666`666.88'], NoProtect, CalcButton,
                     {Label = sNameFieldSIznM}, #FCI_ColorDo(SpKatOs.SIznM);
   f_SIznMSum ('Сумма амортизации за текущий отчетный период ИК',,sci178Esc)
                   : [14.2,'\2p[|-]3666`666`666`666`666.88'], NoProtect, CalcButton, #FCI_ColorDo(SpKatOs.SIznM);
   Katos.DatV     ('Дата выбытия.'), #FCI_ColorD(Katos.DatV);
   f_OstStoimOne    : [14.2,'\2p[|-]3666`666`666`666`666.88']            Skip, #FCI_ColorDo(f_OstStoim);
   f_OstStoimSum    : [14.2,'\2p[|-]3666`666`666`666`666.88']            Skip, #FCI_ColorDo(f_OstStoim);

   SpKatos.SrokIsp('Срок полезного использования',,sci178Esc)         : [5.2], NoProtect, #FCI_ColorDo(SpKatos.SrokIsp);
   DlgSrokIspTime : Skip;
   SpKatos.IspPs  ('Срок использования до поступления',,sci178Esc)    : [5.2], NoProtect, #FCI_ColorDo(SpKatos.IspPs);
   OstSrokPolIsp  ('Оставшийся срок полезного использования')         : [5.2], Skip, NoStatic;
   SpKatos.IspCur ('Срок использования после поступления',,sci178Esc) : [5.2], NoProtect, #FCI_ColorDo(SpKatos.IspCur);
 Buttons
  cmAttrib,[icon bmpDopInfo],,,   'Дополнительная информация по карточке',hcOSFInvKartDop,sci1Esc;
  cmPrintDoc,[icon bmpPrintDoc],,,'Печать инвентарной карточки',hcOSPrmInvCard,sci1Esc;
  cmIEHist,[icon  bmpMetodUh],,,  'Смена метода учета',hcOSChanNastrOs,sci1Esc;
<<
 #ifdef __TPR2__
 .@@@@@@.@@@@@@@@`Инвентарный №`.@@@@@@@@@@@@@@@@@@`Кол-во`.@@@@@@@@@.@@@@@@`Статус`.@@@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@
`Заводской №`         .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@`№ паспорта`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Наименование`        .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 #else
 .@@@@@@@ .@@@@@@@@`  Инвентарный №`.@@@@@@@@@@@@@@@@`Количество`.@@@@@@@@@@@ .@@@@@@  .@@@@@@@@@@@@@@@
`Заводской №`         .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@`№ паспорта`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Наименование`        .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 #end

`Группа`              .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<. Доп. информация  .>
`Вид`                 .@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@`Норма`.@@@@@@@@.@@@@@.@@@
`Группировка ОКОФ`    .@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<. Печать карточки  .>
`Амортизац. группа`   .@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Призн.использования` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<.Смена метода учета.>
`Призн.собственности` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Тип объекта`         .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Подразделение`       .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`МОЛ`                 .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#ifdef __TPR2__
`Обособленное подр.`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#else

#end

                                                             .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Дата выпуска`        .@@@@@@@@@@    `Стоимость`             .@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@.@@@@@@
`Дата ввода`          .@@@@@@@@@@     `Label`                .@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@
`Дата поступления`    .@@@@@@@@@@     `Label`                .@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@
`Дата выбытия`        .@@@@@@@@@@    `Остаточная стоимость`  .@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@

`Срок полезного испол`.@@@@@ .@@@    `до поступления`        .@@@@@
 оставшийся           .@@@@@         `после поступления`     .@@@@@
>>
end; // screen

//------------------------------------------------------------------------------
#ifdef __TPR2__  //------------------------------------------------------------------------------

Screen KatOsScrMSFO ('',hcOSFInvKart,sci1378Esc);
  Show at(,,,25);
  Table Katos;

  BEVEL Bvl1 {,3, ,,bsRaised,bsHorizontal};
  BEVEL Bvl2 {,14,,,bsRaised,bsHorizontal};
  BEVEL Bvl2 {,20,,,bsRaised,bsHorizontal};
Fields
   Katos.DesGr    ('Код группы пользователей',hcUserTune_Desgr) : protect;
   Katos.DesCr    ('Дескриптор пользователя',hcUserTune_Descr)  : protect;
   Katos.Innum    ('Инвентарный номер')                         : NoPickButton;
   Katos.Kol      ('Количество однотипных объектов',,sci178Esc) :[kol_KatOs],
     {Font = {BackColor = if(b_Kol_Is_Selectable and Katos.Kol = 0,ColorNeed,0)}};
   KatEd.ABBR     ('Единица измерения количества')              : protect;
   KatNotes.Name    ('Статус документа',,sci13478Esc)             : Protect, PickButton, EditButton;
   KatOs.OtchPer  : ['Month YYYY'], skip, right, NoStatic,
         {Font ={Bold = true}};
   Katos.ZavNom   ('Заводской номер',,sci178Esc)                : noprotect;
   Katos.PsNum    ('Номер паспорта объекта',,sci178Esc)         : noprotect;
   Katos.NameOs   ('Наименование')                              : NoProtect, NoPickButton,
     {Font = {BackColor = if(b_NameOs_Is_Selectable and Trim(KatOs.NameOs) = '',ColorNeed,0)}};

   GrOs.NameGr    ('Группа ОС/НМА')                             : protect, QuickChoice;
   VidNormaS.KOD  ('Код вида ОС/НМА')                           : protect, QuickChoice;
   VidNormaS.NAME                                               : skip;
   VidNorma.KOD   ('Код нормы амортизации ')                    : protect, QuickChoice;
   VidNormaNorma                                                : [kol_VidNorma], skip ;
   if (wCountry = ccBel,'лет','')                               : skip ;
   KodOf.Kod_of   ('Код группировки по ОКОФ')                   : protect;
   KodOf.Name_of                                                : skip;
   KlassOs.Kod    ('Код амортизационной группы')                : protect;
   KlassOs.Name                                                 : skip;
   IspOs.NameIs   ('Признак использование')                     : protect, QuickChoice;
   PrSb.Name      ('Признак собственности')                     : protect, QuickChoice;
   Sposob.NameSb  ('Тип объекта')                               : protect, QuickChoice;
   fKatPodrName   ('Подразделение ')                            : protect, QuickChoice;
   fKatMolName    ('Материально-ответственное лицо')            : protect, QuickChoice;
   fPodrTrName    ('Обособленное подразделение')                : Protect;

   Katos.GodV     ('Дата выпуска.');
   f_StoimOne     ('Первоначальная стоимость за единицу учета',,sci178Esc)      : [14.2,'\2p[|-]3666`666`666`666`666.88'], noprotect, CalcButton;
   SpKatOs.PerStoim ('Cтоимость переоценки/обесценения',,sci178Esc)             : [14.2,'\2p[|-]3666`666`666`666`666.88'], noprotect, CalcButton;
   (SpKatOs.Stoim + SpKatOs.PerStoim) * Katos.Kol ('Cтоимость с учетом переоценки/обесценения',,sci178Esc)     : [14.2,'\2p[|-]3666`666`666`666`666.88'], Skip;

   Katos.DatEk    ('Дата ввода в эксплуатацию.');
   f_SumIznOne    ('Сумма амортизации: первоначальная за единицу учета',,sci178Esc)  : [14.2,'\2p[|-]3666`666`666`666`666.88'], noprotect, CalcButton,
                    {Label = sNameFieldSumIzn};
   SpKatOs.PerSumIzn ('Амортизация переоценки/обесценения',,sci178Esc)               : [14.2,'\2p[|-]3666`666`666`666`666.88'], noprotect, CalcButton;
   (SpKatOs.SumIzn + SpKatOs.PerSumIzn) * Katos.Kol  ('Сумма амортизации с учетом переоценки/обесценения',,sci178Esc)  : [14.2,'\2p[|-]3666`666`666`666`666.88'], Skip;

   Katos.DatOk    ('Дата поступления.') :
     {Font = {BackColor = if(b_DatOk_Is_Selectable and Katos.DATOK = ZeroDate,ColorNeed,0)}};
   f_SIznMOne     ('Амортизации первоначальная за текущий отчетный период за единицу учета',,sci178Esc)  : [14.2,'\2p[|-]3666`666`666`666`666.88'], noprotect, CalcButton,
                     {Label = sNameFieldSIznM};
   SpKatOs.PerSumIznM ('Амортизация переоценки/обесценения за текущий отчетный период',,sci178Esc)       : [14.2,'\2p[|-]3666`666`666`666`666.88'], noprotect, CalcButton;
   (SpKatOs.SIznM + SpKatOs.PerSumIznM) * Katos.Kol ('Амортизации за текущий отчетный период с учетом переоценки/обесценения',,sci178Esc)    : [14.2,'\2p[|-]3666`666`666`666`666.88'], Skip;

   Katos.DatV     ('Дата выбытия.');
   f_OstStoimOne                                               : [14.2,'\2p[|-]3666`666`666`666`666.88'],  skip;
   SpKatOs.PerStoim - SpKatOs.PerSumIzn - SpKatOs.PerSumIznM   : [14.2,'\2p[|-]3666`666`666`666`666.88'],  skip;
   ((SpKatOs.Stoim + SpKatOs.PerStoim) - (SpKatOs.SumIzn + SpKatOs.SIznM + SpKatOs.PerSumIzn + SpKatOs.PerSumIznM)) * Katos.Kol   : [14.2,'\2p[|-]3666`666`666`666`666.88']   skip;

   SpKatos.SrokIsp('Срок полезного использования',,sci178Esc)         : [5.2], noprotect;
   DlgSrokIspTime : skip;
   SpKatos.IspPs  ('Срок использования до поступления',,sci178Esc)    : [5.2], noprotect;
   OstSrokPolIsp  ('Оставшийся срок полезного использования')         : [5.2], skip, NoStatic;
   SpKatos.IspCur ('Срок использования после поступления',,sci178Esc) : [5.2], noprotect;
 Buttons
  cmAttrib,[icon bmpDopInfo],,,   'Дополнительная информация по карточке',hcOSFInvKartDop,sci1Esc;
  cmPrintDoc,[icon bmpPrintDoc],,,'Печать инвентарной карточки',hcOSPrmInvCard,sci1Esc;
  cmIEHist,[icon  bmpMetodUh],,,  'Смена метода учета',hcOSChanNastrOs,sci1Esc;
<<
 .@@@@@@.@@@@@@@@`Инвентарный №`.@@@@@@@@@@@@@@@@@@`Кол-во`.@@@@@@@@@.@@@@@@`Статус`.@@@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@
`Заводской №`         .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@`№ паспорта`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Наименование`        .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

`Группа`              .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<. Доп. информация  .>
`Вид`                 .@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@`Норма`.@@@@@@@@.@@@@@.@@@
`Группировка ОКОФ`    .@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<. Печать карточки  .>
`Амортизац. группа`   .@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Призн.использования` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<.Смена метода учета.>
`Призн.собственности` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Тип объекта`         .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Подразделение`       .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`МОЛ`                 .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Обособ.подразделение`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

                                                  &Первоначальная      &Обесценение     &С учетом обесценения
`Дата выпуска`.@@@@@@@@@@ `Стоимость`           .@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@
`Дата ввода`  .@@@@@@@@@@ `Label`               .@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@
`Дата поступ.`.@@@@@@@@@@ `Label`               .@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@
`Дата выбытия`.@@@@@@@@@@ `Остаточная стоимость`.@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@

`Срок полезного испол`.@@@@@ .@@@    `до поступления`        .@@@@@
 оставшийся           .@@@@@         `после поступления`     .@@@@@
>>
end; // screen

//------------------------------------------------------------------------------
Screen KatOsScrRsrv ('',hcOSFInvKart,sci1378Esc);
  show at(,,,25);
  Table Katos;

  BEVEL Bvl1 {,4, ,,bsRaised,bsHorizontal};
  Fields

   KatosLink.Innum  ('Инвентарный номер',,sci13478Esc)             : protect,  EditButton,
     {Font = {BackColor = if(Katos.cHigherOs = 0,ColorNeed,0)}};
   KatosLink.NameOs ('Наименование ОС',,sci13478Esc), protect,  EditButton,
     {Font = {BackColor = if(Katos.cHigherOs = 0,ColorNeed,0)}};
   KatOsLink.OtchPer  : ['MM/YYYY'], skip, left,
     {Font ={Bold = true}};
   LikvidOs.NoDoc   ('Номер объекта ликвидации',,sci13478Esc)         : Protect, EditButton;
   LikvidOs.Name    ('Наименование  объекта ликвидации',,sci13478Esc) : Protect, EditButton;

   // --------------------- резерв ---------------------------------------------------
   Katos.DesGr    ('Код группы пользователей',hcUserTune_Desgr) : protect;
   Katos.DesCr    ('Дескриптор пользователя',hcUserTune_Descr)  : protect;
   Katos.Innum    ('Инвентарный номер')                         : NoPickButton;
   Katos.Kol      ('Количество однотипных объектов',,sci178Esc) :[kol_KatOs],
     {Font = {BackColor = if(b_Kol_Is_Selectable and Katos.Kol = 0,ColorNeed,0)}}, skip;
   KatNotes.Name    ('Статус документа',,sci13478Esc)           : Protect, PickButton, EditButton;
   KatOs.OtchPer  : ['Month YYYY'], skip, right, NoStatic,
     {Font ={Bold = true}};
   Katos.NameOs   ('Наименование',,sci178Esc)                   : NoProtect, NoPickButton,
     {Font = {BackColor = if(b_NameOs_Is_Selectable and Trim(KatOs.NameOs) = '',ColorNeed,0)}};
   KlassOsRsrv.Name ('Тип резерва ОС')                          : protect,
     {Font = {BackColor = if(KatOs.cReserv3 = 0,ColorNeed,0)}};
   IspOs.NameIs     ('Признак использования')                   : protect, QuickChoice;
   fKatPodrName     ('Подразделение ')                          : protect, QuickChoice;


   f_PerStoimOne + f_PerSumIznOne  ('Сумма резерва без учета использования',,sci178Esc)   : [14.2,'\2p[|-]3666`666`666`666`666.88'], Skip;

   Katos.DatEk     ('Дата создания резерва.');
   f_PerStoimOne   ('Сумма резерва с учетом переоценок за единицу учета',,sci178Esc)   : [14.2,'\2p[|-]3666`666`666`666`666.88'], noProtect, CalcButton;
   // f_PerStoimSum   ('Сумма резерва с учетом переоценок',,sci178Esc)                 : [14.2,'\2p[|-]3666`666`666`666`666.88'], noProtect, CalcButton;

   Katos.DatV      ('Дата списания.');
   f_StoimOne      ('Сумма в стоимости ОС за единицу учета',,sci178Esc)            : [14.2,'\2p[|-]3666`666`666`666`666.88'], noprotect, CalcButton;
   // f_StoimSum      ('Сумма в стоимости ОС',,sci178Esc)                          : [14.2,'\2p[|-]3666`666`666`666`666.88'], noprotect, CalcButton;

   Katos.DatGar    ('Дата окончания амортизации.');
   f_SumIznOne     ('Сумма амортизации за единицу учета',,sci178Esc)               : [14.2,'\2p[|-]3666`666`666`666`666.88'], noprotect, CalcButton;
   // f_SumIznSum     ('Сумма амортизации',,sci178Esc)                             : [14.2,'\2p[|-]3666`666`666`666`666.88'], noprotect, CalcButton;

   f_SIznMOne     ('Сумма амортизации за единицу учета за текущий отчетный период ИК',,sci178Esc)     : [14.2,'\2p[|-]3666`666`666`666`666.88'], noprotect, CalcButton;
   // f_SIznMSum     ('Сумма амортизации за текущий отчетный период ИК',,sci178Esc)                      : [14.2,'\2p[|-]3666`666`666`666`666.88'], noprotect, CalcButton;

   f_OstStoimOne    : [14.2,'\2p[|-]3666`666`666`666`666.88']  skip;
   // f_OstStoimSum    : [14.2,'\2p[|-]3666`666`666`666`666.88']  skip;

   Katos.dtReserv1  ('Плановая дата расходов.');
   f_SumLikvidOne   ('Плановая сумма расходов за единицу учета',,sci178Esc)     : [14.2,'\2p[|-]3666`666`666`666`666.88'], noprotect, CalcButton;
   // f_SumLikvidSum   ('Плановая сумма расходов за единицу учета',,sci178Esc)     : [14.2,'\2p[|-]3666`666`666`666`666.88'], noprotect, CalcButton;

   SpKatOs.Stavka   ('Ставка дисконтирования',,sci178Esc)                       : [14.2,'\2p[|-]3666`666`666`666`666.88'], Skip, NoStatic;
   f_PerSumIznOne   ('Сумма использования резерва за единицу учета',,sci178Esc) : [14.2,'\2p[|-]3666`666`666`666`666.88'], noProtect, CalcButton;
   // f_PerSumIznSum      ('Сумма использования резерва',,sci178Esc)                  : [14.2,'\2p[|-]3666`666`666`666`666.88'], noProtect, CalcButton;


   f_SumLikvidOne - f_PerSumIznOne ('Плановая сумма расходов с учетом использования',,sci178Esc)    : [14.2,'\2p[|-]3666`666`666`666`666.88'], Skip;
   // f_SumLikvidSum - f_PerSumIznSum ('Плановая сумма расходов с учетом использования',,sci178Esc)    : [14.2,'\2p[|-]3666`666`666`666`666.88'], Skip;
<<

`Карточка ОС`      .@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.@@@@@@@
`Объект ликвидации`.@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


  `Группа` `Дескр`    `Инвентарный №`    `Количество`              `Статус`
 .@@@@@@@ .@@@@@@@@   .@@@@@@@@@@@@@@@@  .@@@@@@@@@               .@@@@@@@@@@@@@@@@@@@ .@@@@@@@@@@@@@@@
`Наименование резерва`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

`Тип резерва`         .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Призн.использования` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Подразделение`       .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

                                     `Сумма резерва без учета использования`.@@@@@@@@@@@@@@@@@@@@@@@@@@
`Дата создания`         .@@@@@@@@@@               `Сумма резерва`           .@@@@@@@@@@@@@@@@@@@@@@@@@@
`Дата списания`         .@@@@@@@@@@               `Сумма в стоимости ОС`    .@@@@@@@@@@@@@@@@@@@@@@@@@@
`Дата окончания аморт.` .@@@@@@@@@@               `Амортизация`             .@@@@@@@@@@@@@@@@@@@@@@@@@@
                                                  `Амортизация за месяц`    .@@@@@@@@@@@@@@@@@@@@@@@@@@
                                                  `Остаток резерва`         .@@@@@@@@@@@@@@@@@@@@@@@@@@
`Плановая дата расходов`.@@@@@@@@@@               `Плановая сумма расходов` .@@@@@@@@@@@@@@@@@@@@@@@@@@
 Ставка дисконтирования .@@@@@@@@@@               `Использование резерва`   .@@@@@@@@@@@@@@@@@@@@@@@@@@
                                          `Остаток плановой суммы расходов` .@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end; // screen

#else //------------------------------------------------------------------------------

Screen KatOsScrRsrv ('',hcOSFInvKart,sci1378Esc);
  show at(,,,25);
  Table Katos;

  BEVEL Bvl1 {,7, ,,bsRaised,bsHorizontal};
    Fields

       KatosLink.Innum  ('Инвентарный номер',,sci134Esc)             : protect,
         {Font = {BackColor = if(Katos.cHigherOs = 0,ColorNeed,0)}};
       KatosLink.Kol    ('Количество однотипных объектов',,)          : [kol_KatOs], skip;
       KatEd.ABBR       ('Единица измерения количества')              : Skip;
       KatOsLink.OtchPer  : ['Month YYYY'], skip, right,
         {Font ={Bold = true}};
       KatosLink.NameOs ('Наименование вышестоящего ОС',,sci134Esc),protect,
         {Font = {BackColor = if(Katos.cHigherOs = 0,ColorNeed,0)}};

       KatosLink.GodV     ('Дата выпуска.')                         : skip;
       if(trim(KlValK.SimvolV)<>'','('+KlValK.SimvolV+')','')       : skip;
       SpKatOsLink.Stoim  ('Балансовая стоимость',,sci178Esc)       : [14.2,'\2p[|-]3666`666`666`666`666.88'], skip;
       SpKatOsLink.Stoim * KatOsLink.Kol ('Балансовая стоимость',,sci178Esc)       : [14.2,'\2p[|-]3666`666`666`666`666.88'], skip;

       KatosLink.DatEk    ('Дата ввода в эксплуатацию.')            : skip;
       SpKatOsLink.SumIzn ('Сумма износа',,)                        : [14.2,'\2p[|-]3666`666`666`666`666.88'], skip,
                  {Label = sNameFieldSumIzn};
       SpKatOsLink.SumIzn * KatOsLink.Kol('Сумма износа',,)         : [14.2,'\2p[|-]3666`666`666`666`666.88'], skip;

       KatosLink.DatOk    ('Дата поступления.')                     : skip;
       SpKatOsLink.SIznM  ('Сумма амортизации за текущий отчетный период ИК',,)   : [14.2,'\2p[|-]3666`666`666`666`666.88'], Skip,
                  {Label = sNameFieldSIznM};
       SpKatOsLink.SIznM  * KatOsLink.Kol ('Сумма амортизации за текущий отчетный период ИК',,)   : [14.2,'\2p[|-]3666`666`666`666`666.88'], Skip;

       KatosLink.DatV     ('Дата выбытия.')                         : Skip;
       SpKatOSLink.Stoim -  SpKatOsLink.SumIzn -  SpKatOsLink.SIznM                    : [14.2,'\2p[|-]3666`666`666`666`666.88'] skip;
       (SpKatOSLink.Stoim -  SpKatOsLink.SumIzn -  SpKatOsLink.SIznM) * KatOsLink.Kol  : [14.2,'\2p[|-]3666`666`666`666`666.88'] skip;


       Katos.DesGr    ('Код группы пользователей',hcUserTune_Desgr) : protect;
       Katos.DesCr    ('Дескриптор пользователя',hcUserTune_Descr)  : protect;
       Katos.Innum    ('Инвентарный номер')                         : NoPickButton;
       Katos.Kol      ('Количество однотипных объектов',,sci178Esc) :[kol_KatOs],
         {Font = {BackColor = if(b_Kol_Is_Selectable and Katos.Kol = 0,ColorNeed,0)}}, skip;
       Katos.NameOs   ('Наименование',,sci178Esc)                   : NoProtect, NoPickButton,
         {Font = {BackColor = if(b_NameOs_Is_Selectable and Trim(KatOs.NameOs) = '',ColorNeed,0)}};

       KlassOsRsrv.Name ('Наименование резерва ОС')                 : protect;
       IspOs.NameIs     ('Признак использования')                   : protect, QuickChoice;
       fKatPodrName     ('Подразделение ')                          : protect, QuickChoice;

   'за единицу                                сумма' : skip, Right, {Font = {BackColor = 0}};
   f_PerStoimOne  ('Сумма резерва с учетом переоценок за единицу учета',,sci178Esc)       : [14.2,'\2p[|-]3666`666`666`666`666.88'], noProtect, CalcButton;
   f_PerStoimSum  ('Сумма резерва с учетом переоценок',,sci178Esc)                        : [14.2,'\2p[|-]3666`666`666`666`666.88'], noProtect, CalcButton;
   Katos.DatEk    ('Дата создания резерва.');
   f_StoimOne     ('Сумма резерва за единицу учета',,sci178Esc)                 : [14.2,'\2p[|-]3666`666`666`666`666.88'], noprotect, CalcButton;
   f_StoimSum     ('Сумма резерва',,sci178Esc)                                  : [14.2,'\2p[|-]3666`666`666`666`666.88'], noprotect, CalcButton;
   f_SumIznOne    ('Сумма износа за единицу учета',,sci178Esc)                  : [14.2,'\2p[|-]3666`666`666`666`666.88'], noprotect, CalcButton;
   f_SumIznSum    ('Сумма износа',,sci178Esc)                                   : [14.2,'\2p[|-]3666`666`666`666`666.88'], noprotect, CalcButton;
   Katos.dtReserv1  ('Плановая дата расходов.');
   f_SIznMOne     ('Сумма амортизации за единицу учета за текущий отчетный период ИК',,sci178Esc)   : [14.2,'\2p[|-]3666`666`666`666`666.88'], noprotect, CalcButton;
   f_SIznMSum     ('Сумма амортизации за текущий отчетный период ИК',,sci178Esc)                    : [14.2,'\2p[|-]3666`666`666`666`666.88'], noprotect, CalcButton;
   Katos.DatV     ('Дата списания.');
   f_OstStoimOne    : [14.2,'\2p[|-]3666`666`666`666`666.88']         skip;
   f_OstStoimSum    : [14.2,'\2p[|-]3666`666`666`666`666.88']         skip;

   f_PerSumIznOne   ('Сумма использования резерва за единицу учета',,sci178Esc)             : [14.2,'\2p[|-]3666`666`666`666`666.88'], noProtect, CalcButton;
   f_PerSumIznSum   ('Сумма использования резерва',,sci178Esc)                              : [14.2,'\2p[|-]3666`666`666`666`666.88'], noProtect, CalcButton;

<<
`Инвентарный № ОС    `.@@@@@@@@@@@@@@@@ `Количество`.@@@@@@@@@@@ .@@@@@@               .@@@@@@@@@@@@@@@
`Карточка ОС`         .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

`Дата выпуска`        .@@@@@@@@@@      `Стоимость`.@@@@@@    .@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@
`Дата ввода`          .@@@@@@@@@@      `Label`               .@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@
`Дата поступления`    .@@@@@@@@@@      `Label`               .@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@
`Дата выбытия`        .@@@@@@@@@@      `Остаточная стоимость`.@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@

 .@@@@@@@ .@@@@@@@@  `Инвентарный №`.@@@@@@@@@@@@@@@@                          `Количество`.@@@@@@@@@@@
`Наименование резерва`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Тип резерва`         .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Призн.использования` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Подразделение`       .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                                                             .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                                  `Сумма резерва`            .@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@
`Дата создания`       .@@@@@@@@@@ `Сумма в стоимости ОС`     .@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@
                                  `Амортизация`              .@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@
`Плановая дата расх.` .@@@@@@@@@@ `Амортизация за месяц`     .@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@
`Дата спмсания`       .@@@@@@@@@@ `Остаток резерва`          .@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@
                                  `Использование резерва`    .@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@
>>
end; // screen

#end   //------------------------------------------------------------------------------

//-------------------------------------------------------------------
TabbedSheet Bottom tshKatOs
  Show at( , 26, , );

//-------------------------------------------------------------------
#ifdef __TPR2__
Screen KatosBut 'Карточка' ('',hcOSFInvKart,sci1378Esc);
  table Katos;
    Fields
      OsAlg.Name    ('Алгоритм начисления амортизации')           : protect, QuickChoice, #FCI_ColorS_IF(OsAlg.Name,Not IsValid(#OsAlg));
      HozOper.Name1 ('Типовая хозяйственная операция по начислению амортизации') : protect, #FCI_ColorS_IF(HozOper.Name1,Not IsValid(#HozOper));
      CoName        ('Центр ответственности')                     : protect, #FCI_ColorS(CoName);
      CoFilial.Name ('Центр ответственности филиал')              : protect, #FCI_ColorS_IF(CoFilial.Name,Not IsValid(#CoFilial));
      KauReffArray  ('Внешние КАУ')                               : protect, #FCI_ColorS(KauReffArray);
      Katos.NameIzg ('Наименование завода-изготовителя',,sci1Esc) : noprotect, #FCI_ColorS(Katos.NameIzg);
      Katos.TipMark ('Модель, тип, марка объекта',,sci1Esc)       : noprotect, #FCI_ColorS(Katos.TipMark);
<<
`Алгоритм амортизац.`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Операция амортизац.`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Центр ответствен.`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`ЦО - Филиал`        .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Аналитика`          .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Завод-изготовитель` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Модель, тип, марка` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end; // screen
#else
Screen KatosBut 'Карточка' ('',hcOSFInvKart,sci1378Esc);
  table Katos;
    Fields
      OsAlg.Name    ('Алгоритм начисления амортизации')           : protect, QuickChoice;
      HozOper.Name1 ('Типовая хозяйственная операция по начислению амортизации') : protect;
      CoName        ('Центр ответственности')                     : protect;
      KauReffArray  ('Внешние КАУ')                               : protect;
      Katos.NameIzg ('Наименование завода-изготовителя',,sci1Esc) : noprotect;
      Katos.TipMark ('Модель, тип, марка объекта',,sci1Esc)       : noprotect;
<<
`Алгоритм амортизац.`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Операция амортизац.`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Центр ответствен.`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Аналитика`          .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Завод-изготовитель` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Модель, тип, марка` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end; // screen
#end

//-----------------------------------------------------------------
Panel pAllMemo;
  Table AllMemo;
  Text MemoID = Characteristik AllMemo.Mem 'Характеристика' :noProtect;

HandleEvent
  cmSetDefault   :
    {
      ClearBuffer(#AllMemo);
      AllMemo.Nrec     := 0;
      AllMemo.cRec     := KatOs.nRec;
      AllMemo.Tip      := 0;          //  ?? txt
      AllMemo.wTable   := word(3000); // специально по word   coKatOs;
      AllMemo.Name     := 'KatOs.Proper';
    }
  cmInsertRecord :
    if ( CurTable = #AllMemo )
      insert current AllMemo;

  cmUpdateRecord :
  {
    if ( CurTable = #AllMemo)
      if (message('Документ был модифицирован.' + ''#13'Сохранить изменения?', YesNo+Warning) = cmNo)
       {
         RereadRecord(#AllMemo);
         Abort; stop;  Exit;
       }
      update current AllMemo;
  }

End; // handleevent
end; // panel pAllMemo

//-----------------------------------------------------------------
Embedded brSpMoveOs 'Операции' interface iOS_Oper;
end;

//-----------------------------------------------------------------
Embedded scNalDrag 'Драгметаллы' interface iNaldrag;
end;

//-----------------------------------------------------------------
Embedded ProbTrBr 'Спец.Данные' interface iSpecOb;
end;

//-----------------------------------------------------------------
Embedded scMcInOs 'Состав' interface iMcInOs;
end;

//-----------------------------------------------------------------
Embedded scOsRazn 'Разницы' interface iOsRaznW;
end;

//-----------------------------------------------------------------
browse brKatOborot 'Обороты' ('',hcOSBProvodki, sci14Esc);
  table tOborotSel;
  #include o_field2.vpp
end;

//-----------------------------------------------------------------
Embedded brEditSostByIF 'Финансирование' interface iSostByIF;
end;
//-----------------------------------------------------------------
#ifdef GAL9_1
Embedded scLinkList 'Список документов'   interface iLnkL.wViewLinked;
end
#end

Embedded brArcScr 'Архив' interface pGetArc.winArcScr;
end;

//-----------------------------------------------------------------
Embedded brReservOs 'Резерв' interface pRsrv;
end;

//-----------------------------------------------------------------
Embedded brCompOsScr 'Ведомые' interface pCompOs;
end;

end; // TabbedSheet
End;      // window


#include maymod.vpp
#include NalogRegLic.vpp

#include fndopinnum.vpp

#include ArcExCl.Vpp        // ведение истории внешней классификации
#include DoMoveOs.vpp
#include PrihKS.vpp

#include KatOss_Fun.vpp     // функции картотеки
#include KatOss_Tir.vpp     // функции по ОС

#include putbufos.vpp

#include SortOs.vpp         // сортировка
#include KatOss_Filtr.vpp   // ограничения
#include KatOss_Rep.vpp     // отчеты по ОС

#include OSReestr.vpp       // Печать ведомостей наличия и износа
#include prnIKIzm.vpp       // Печать истории изменений инвентарной карточки
#include SostObjOS.vpp      // печать отчета по составу объектов

#include KatOss_Win.vpp       // доп.ока и оконнный обработчик


//-------------------------------------------------------------------------------------------------
#include KatOss_Rgh.vpp     // Права доступа
#include KatOss_Pan.vpp     // Панельный обработчик

#include DifSpKatOs.vpp
#include PickIKExt.vpp


//------------------------------------------------------------------------------
// Окно с деревом для cmVal5
window winForm11;

tree trForm1 (,, sci1Esc);
  table KatForm_Tr;
fields
  KatForm_Tr.ParamName 'Наименование показателя'('Наименование показателя') : [50], protect;
  KatForm_Tr.ParamNum  'Номер строки'('Номер строки')                       : [8],  protect;
  KatForm_Tr.FilialNo  'Подраздел'('Подраздел')                             : [5],  protect;
end;

end;
//------------------------------------------------------------------------------
DataStream dsFillAmGr
(
  Table mt_FillAmGrRep
  (
    [InvNum ] mt_FillAmGrRep.InvNum;
    [NameOs ] mt_FillAmGrRep.NameOs;
    [OKOF   ] mt_FillAmGrRep.OKOF;
    [OldAmGr] mt_FillAmGrRep.OldAmGr;
    [NewAmGr] mt_FillAmGrRep.NewAmGr;
  );
)
end;
//------------------------------------------------------------------------------
// Окно с параметрами для cmValue21
Window winFillAmGrPar 'Параметры', doAccept, escClose, Gray;
  Show at (,,31,6);

Screen scrFillAmGrPar (,, sci1Esc);
  noTableNavigation;
Fields
  wFillAmGrWith ('Заполнять амортизационную группу если',,) : [List
      0 'не заполнена',
      1 'всегда'], Protect;
  boFormRep     ('Сформировать отчет',,) : NoProtect;
Buttons
  cmOk, Default,, 'Продолжить';
  cmCancel,,,     'Отмена операции';

<<

  Заполнять если:.@@@@@@@@@@@@
    [.] сформировать отчет`

 <.Продолжить.> <.  Отмена  .>

>>
end;

HandleEvent
cmInit:
{
  if not ReadMyDsk(wFillAmGrWith, 'KatOs_wFillAmGrWith', False)
    wFillAmGrWith := 0;
  if not ReadMyDsk(boFormRep, 'KatOs_boFormRep', False)
    boFormRep := False;
}
cmOk:
{
  var wDlgEditPos : word;
  wDlgEditPos := cmYes;
  PushBounds(tbbyPrintOS6);
  PushBounds(tbbyFillAmGr);
  PushBounds(tbbyFillOkof);
  PushBounds(tbbyAmGr6);
  StartNewVisual(vtIndicatorVisual, vfTimer + vfBreak + vfConfirm, 'Заполнение амортизационной группы', GetSelCount(word(27)));

  _Loop Pick where ((cgPick_KatOs == Pick.wList))
    {
      if Not NextVisual
        Break;

      if Not pOsFun.CanEditOs(Pick.cRec, false)
        {
          if ((wDlgEditPos <> cmOk) and (wDlgEditPos <> cmQuit))
            wDlgEditPos := RunInterface( 'DlgMessage'
                                       , 'Настройка ограничивает Ваши права на редактирование'
                                       + ' объекта с ИН ' + pOsFun.GetKatOsInNum(Pick.cRec)
                                       + '. Заполнение амортизационной группы для карточки невозможно.'#13
                                       + 'Продолжить ?'
                                       , '' );

          case wDlgEditPos of
            cmYes, cmOk : Continue;
          else
            Break;
          end;
        }

      if (KatOs6.cOkof <> 0)
        if (SpKatOs6.cGrAm = 0) or (wFillAmGrWith = 1)
        {
          ClearBuffer(#mt_FillAmGrRep);
          mt_FillAmGrRep.InvNum  := KatOs6.InNum;
          mt_FillAmGrRep.NameOs  := KatOs6.NameOs;
          mt_FillAmGrRep.OKOF    := Kodof6.Kod_Of;
          mt_FillAmGrRep.OldAmGr := if (isValid(#KlassOs6), KlassOs6.Kod, '');

          set SpKatOs6.cGrAm := Kodof6.cAmGr;
          update current SpKatOs6;

          mt_FillAmGrRep.NewAmGr := if (isValid(#KlassOs6), KlassOs6.Kod, '');
          Insert Current mt_FillAmGrRep;
        }
    }

  StopVisual('', 0);
  PopBounds(tbbyAmGr6);
  PopBounds(tbbyFillOkof);
  PopBounds(tbbyFillAmGr);
  PopBounds(tbbyPrintOS6);

  KillPick;
  Message('Заполнение амортизационной группы выполнено успешно.');

  if boFormRep
  {
    RunFReport(dsFillAmGr, '', False);
    Delete All mt_FillAmGrRep;
  }
  RereadRecord(#Katos);

  CloseWindow(winFillAmGrPar);
}
cmDone:
{
  SaveMyDsk(wFillAmGrWith, 'KatOs_wFillAmGrWith');
  SaveMyDsk(boFormRep, 'KatOs_boFormRep');
}
end;
end;
//------------------------------------------------------------------------------
TableEvent   Table KatForm_Tr;

cmTreeTop       : Form11Node := 0;
cmTreeUp        : Form11Node := KatForm_Tr.cForm;
cmTreeDown      : Form11Node := KatForm_Tr.NRec;
cmTreeNodeType  :
  if (TreeIsTerminal(trForm1))  TreeSetNodeType( trForm1, 2);
cmTreeNeedOwner :
    TreeJumpToRecord(trForm1, KatForm_Tr.cForm);
end;

//******************************************************************************
//******************************************************************************
//******************************************************************************
HandleEvent   // Интерфенйса

  cmInit  :
    {
      ClearAllEvents;
      liWiEditKatOs := wiEditKatOs;
      Node := 0;

      pOsFun.InitOsFun(TipDock);
      wTip     := pOsFun.TipTune(TipDock);  // Тип для МУ - 15, 16
      wTipOper := pOsFun.TipOper(TipDock);  // Тип для операций - 15, 16, 57

#ifdef __TPR2__
      IsStatNastr := iStatUser.Stat_Nastr(wTipOper);
      bIsTNPR := pSpyTN.GetIsTNTPR(); // признак типового проектного решения ТрансНефти
#end

      if (not iPSManager.GetTunePlansSch(MyPlansNo))
      {
        Abort;  Exit;
      }

      if (TipDock = cgOs_315_PrevOS) and (not pOsFun.UsePrevOs())
      {
        ShowTune('В настройке установлен запрет работы с предварительными карточками!', 'OS.Prev.Use');
        Abort;  Exit;
      }


      CurDescr   := sGetTune('User.Descr');
      CurDesGr   := sGetTune('User.DesGr');
      case TipDock  of
        cgOs_315_PrevOS : CurVisible := wGetTune('OS.Prev.VISIBLE');
        16, 116         : CurVisible := wGetTune('NMA.VISIBLE');
        else              CurVisible := wGetTune('OS.VISIBLE');
      end;

      // права по ЦО
      CurCO := coGetTune('Doc.cCurBaseCO');
      if CurCO = 0
       CurVisibleCO := 0;
      else
       case TipDock  of
         cgOs_315_PrevOS : CurVisibleCO := wGetTune('OS.VISIBLECO');
         16, 116         : CurVisibleCO := wGetTune('NMA.VISIBLECO');
         else              CurVisibleCO := wGetTune('OS.VISIBLECO');
       end;

      AvailableInvCardType := wGetTune('OS.AvailableInvCardType');

      wCountry        := wGetTune ('Country');
      OS_RazrKol      := wGetTune ('OS.RazrKol');
      NDE_SIMVRUB     := sGetTune ('NDE.SIMVRUB');
      Os_SrokIspEdIzm := wGetTune ('OS.SrokIspEdIzm');
      wEdIzm          := wGetTune ('OS.SrokIspEdIzm');
      dStoimPercent   := doGetTune('OS.OstStoimPercent')/100;
      bTstOperNextPer := boGetTune('OS.TstOperNextPer');
      OS_EditOtchPer  := boGetTune('OS.EditOtchPer');
      OS_StoimStruct  := boGetTune('OS.StoimStruct');
      OS_NoEditIF_Arxiv    := if (wTip=16, boGetTune('NMA.NoEditIF_Arxiv'),boGetTune('OS.NoEditIF_Arxiv'));
      OS_NoEditDragM_Arxiv := boGetTune('OS.NoEditDragM_Arxiv');
      OS_Reserv_Use := pRsrv.UseReservOs();
      OS_Reserv_NastrOs := if ( (OS_Reserv_Use) and (TipDock mod 100 = cgOs_57_Rsrv), pRsrv.GetReservNastrOs(true), 0);
      OS_Comp_Use :=  pOsFun.UseCompOs();

      DOC_PICKOTVPODR     := boGetTune('DOC.PICKOTVPODR');
      #ifdef __TPR2__
      Doc_PickCOFilial := boGetTune('Doc.PickCOFilial');
      // if (TipDock mod 100 = cgOs_57_Rsrv)
      //  ToggleFieldVisible (#KatNotes.sName, false);
      #end

      #include Fld_Amort.vpp

      OS_Complex := wGetTune('OS.Complex');    // использование сложных объектов
      OS_Complex := if (TipDock=cgOs_57_Rsrv, 1, OS_Complex);
      isTree := (OS_Complex = 1);
      isTree := if (TipDock  mod 100 = cgOs_57_Rsrv, false, isTree);

      if (wCountry = ccBel)
        iAttr.CreateAttrComp(coKatOs, cgCurrencyPer, cgAttrType_Comp, cgKatKau_System, coKlVal);

      if wCountry = ccBel
        SetPrecisionGroup('Kol_VidNorma', 2);
      else
        SetPrecisionGroup('Kol_VidNorma', 6);

      bOsRaznCalc := (boGetTune('OS.RaznCalc') and (wCountry = ccRus));

      //для определения доступности полей для ввода данных
      b_InNum_Is_Selectable  := true;
      b_NameOs_Is_Selectable := true;
      b_Kol_Is_Selectable    := true;
      b_DatOk_Is_Selectable  := true;
      b_Stoim_Is_Selectable  := true;
      b_DatEk_Is_Selectable  := true;
      b_SumIzn_Is_Selectable := true;
      OS_FormIzn := 0;


      if (TipDock  mod 100 <> cgOs_57_Rsrv)
        case wTip of
          15 :
          {
            bShowNastrOs := boGetTune('OS.ShowNastrOs');
            OS_FormIzn := wGetTune ('OS.FormIzn');
            IsNotEditPodrAndMOLbySoprSklad_OS := Boolean(wGetTune('OS.IsNotEditPodrAndMOLbySoprFrom'));
          }
          16 :
          {
            bShowNastrOs := boGetTune('NMA.ShowNastrOs');
            OS_FormIzn := wGetTune ('NMA.FormIzn');
            IsNotEditPodrAndMOLbySoprSklad_OS := Boolean(wGetTune('NMA.IsNotEditPodrAndMOLbySoprFrom'));
          }
        end;

      bNeedControlDateK := boGetTune('OS.NeedControlDateK');
      SetPrecisionGroup('Kol_KatOs', OS_RazrKol);
      N_int    := 1;
      wPickNum := wPickNumSort := 0;
      SortOb   := 0;

      if (loPickKatOS.RecordExists Pick  where ((cgPick_KatOs == Pick.wList)) = tsOk)   // восстановить кол-во отмеченных при входе в интерфейс
        loPickKatOS._Loop Pick where ((cgPick_KatOs == Pick.wList))
          wPickNum++;

      nwiEditKatos := wiEditKatos;
      nwiDopInfoOs := wiDopInfoOs;

      phUNastrOsPos := pOsFun.GetUserNastrOsPos(wTip);
      if (TipDock mod 100 = cgOs_57_Rsrv)
      {
         if ( not pRsrv.UseReservOs())
          {
             message('Не установлена настройка использования резерва ОС.' + ''#13'Установите настройку ' + GetTuneName('OS.Reserv.Use'), okButton);
             RunInterface(UserReestrTune, 0, 'OS.Reserv.Use', '');
             Abort;  Exit;
          }
         // phUNastrOsPos := pOsFun.GetUserDefaultNastrOS(wTip);
         phUNastrOsPos := pRsrv.GetReservNastrOs();
         if (phUNastrOsPos = 0)
          {
             Abort;  Exit;
          }
         pOsFun.SetUserMetUm(wTip, phUNastrOsPos);
      }
      if (GetFirst NastrOs where ((phUNastrOsPos == NastrOs.nRec)) <> tsOk)
        {
          message('Не установлен метод учета модуля.' + ''#13'Заполните каталог методов учета.',okButton);
          Abort;  Exit;
        }
      boIsNastrOS_MSFO := pOsFun.IsNastrOS_MSFO(TipDock, NastrOs.nRec);
      //если стоит настройка на выбор метода учёта
      if ((bShowNastrOs) and
          //и вызов произвоится из меню Галактики
          (pNrecKatos = 0) and
          (GrupVbr    = 0) and
          (NrecPodr   = 0) and
          (NrecVid    = 0) and
          (NrecMol    = 0))
        PutCommand(cmIEHist);

      if (GetFirst NastrOsO where ((phUNastrOsPos == NastrOsO.nRec)) <> tsOk) {};

      boIsMUCommonCost := (NastrOs.Field4 = 1);

      // переменные по отбору проводок
      if not ReadMyDsk(dStOborot, 'KatOsS_dStOborot', true)
        dStOborot := ZeroDate;

      bOborotSelSuccess := false;  // Еще не было успешного отбора проводок по текущему плану счетов по текущей карточке.
      bOborotSuccess    := false;  // не было успешного отбора проводок по текущему плану счетов.

      if (GrupVbr = 5) or (GrupVbr = 9)   // Сохранить Pick
      {
        if (GrupVbr = 5)
          GrupVbr := 2;
      }
      else
        KillPick;

      OnlyAll := False;
      if (GrupVbr = 4)
        {
          GrupVbr := 2;
          OnlyAll := True;
        }
      if (GrupVbr = 3)
        {
          GrupVbr := 1;
          PushCondition(tccnKatosNRec);
        }

      StatusContext();

      TreeHandle := trDocument;
      if ( wTip = 15) and (TipDock mod 100 <> cgOs_57_Rsrv)
        ReadMyDsk(isTree, 'KatOsS_isTree_'  + string(TipDock), false);

      ClearFieldState(#KatosLink.InNum, sfVisible);
      if (isTree)
       {
         AddBounds(tbByTree);
         SelectFormat(trDocument);
       }
      else
       {
         AddBounds(tbByBrowse);
         SelectFormat(pDocument);
         if OS_Complex = 1
           SetFieldState(#KatosLink.InNum, sfVisible);
       }

      cfsSetProp('c_TRDOCUMENT_KATOS.REGNUM_Регистрац._номер',   cfpVisible, False);
      cfsSetProp('c_TRDOCUMENT_PROBTRCURR.MES[13]_Текущий_месяц', cfpVisible, False);

      cfsSetProp('c_PDOCUMENT_KATOS.REGNUM_Регистрац._номер',   cfpVisible, False);
      cfsSetProp('c_PDOCUMENT_PROBTRCURR.MES[13]_Текущий_месяц', cfpVisible, False);

      if (TipDock=cgOs_57_Rsrv or TipDock=cgOs_157_Rsrv)
       {
        // cfsSetProp('c_PDOCUMENT_KatOs.OtchPer_Отчетный_период',   cfpVisible, False);
        cfsSetProp('c_PDOCUMENT_OstSrokPolIsp_Срок_исп.',         cfpVisible, False);
        cfsSetProp('c_PDOCUMENT_KatOs.dtReserv1_Дата_ликвидации', cfpVisible, TRUE);
        ToggleFieldVisible (#fKatMolName,   false);  // убрать из бровза
       }
      else
       {
        cfsSetProp('c_PDOCUMENT_KatOs.dtReserv1_Дата_ликвидации', cfpVisible, False);
       }


      BindEvent(onChangePlansSch, iPSManager.EventChangePlansSch);
      // устанавливаем план счетов
      if (MyPlansNo <> NastrOs.cPlansSch)
        iPSManager.SetTunePlansSch(NastrOs.cPlansSch);
      iPSManager.Run_Events(NastrOS.cPlansSch);
      onChangePlansSch(NastrOs.cPlansSch);

//---------------------------------------------------
       /* LoadVipInterface(iOS_Oper);      */
       BindEvent(ChangeNastrOs, iOS_Oper.OnChangeNastrOs);
       BindEvent(RescanKatOs,   iOS_Oper.OnRescanKatOs);

       iOS_Oper.InitOS_Oper(TipDock, 0);
       iOS_Oper.SetNastrOs(NastrOs.NRec);

       // LoadVipInterface(iSostByIF);
       // iSostByIF.InitSostParams(wTip);

       /* LoadVipInterface(iMcInOs);
       BindEvent(ChangeNastrOs, iMcInOs.OnChangeNastrOs);
       BindEvent(RescanKatOs,   iMcInOs.OnRescanKatOs);
       case tipDock of
         15, 16:
           iMcInOs.InitWindowMcInOsShow(true);
         else
           iMcInOs.InitWindowMcInOsShow(false);
       end;
       iMcInOs.SetNastrOs(NastrOs.NRec);  */

       // LoadVipInterface(iOSSums);
//---------------------------------------------------
       if (wTip <> 15)
         {
           SetTabbedSheetVisible(scNalDrag,   false);
           SetTabbedSheetVisible(scNalDragBr, false);
         }
//---------------------------------------------------
        /* LoadVipInterface(iLnkL);
          if ( KatOS.NRec <> 0 )
          {
            var wModeView : word = 0;
            if Not pOsFun.CanEditOs(KatOs.NRec, false)
              wModeView := 1;
            iLnkL.ShowLnkList(KatOS.NRec, (KatOS.TiDk mod 100), wModeView);
          }  */

//---------------------------------------------------
       // LoadVipInterface(intChangeHist);

       /* LoadVipInterface(pGetArc);
       pGetArc.Init(wTip+100, NastrOs.nRec);
       pGetArc.SetKatOs(KatOs.nRec); */

//---------------------------------------------------
       if (wTip <> 15)
         {
           SetTabbedSheetVisible(ProbTrShow, false);
           SetTabbedSheetVisible(ProbTrBr, false);
         }

//---------------------------------------------------
       if (not bOsRaznCalc)
         {
           SetTabbedSheetVisible(scOsRaznShow, false);
           SetTabbedSheetVisible(scOsRazn,false);
         }

       if (TipDock mod 100 = cgOs_57_Rsrv)
       {
           SetTabbedSheetVisible(brReservOsShow, false);
           SetTabbedSheetVisible(brReservOs,     false);

           SetTabbedSheetVisible(scNalDrag,   false);
           SetTabbedSheetVisible(scNalDragBr, false);

           SetTabbedSheetVisible(ProbTrShow, false);
           SetTabbedSheetVisible(ProbTrBr, false);

           SetTabbedSheetVisible(scOsRaznShow, false);
           SetTabbedSheetVisible(scOsRazn,false);

           SetTabbedSheetVisible(scMcInOsShow, false);
           SetTabbedSheetVisible(scMcInOs,     false);


           SetTabbedSheetVisible(brSostByIF,   false);
           SetTabbedSheetVisible(brEditSostByIF,   false);

           SetTabbedSheetVisible(scChangeHist, false);

           SetTabbedSheetVisible(scLinkList, false);

           if (not boGetTune('OS.RESERV.ARC'))
           {
             SetTabbedSheetVisible (brArcBr,  false);
             SetTabbedSheetVisible (brArcScr, false);
           }
       }
       else
       {
         SetTabbedSheetVisible(brReservOsShow, OS_Reserv_Use and wTip=15);
         SetTabbedSheetVisible(brReservOs,     OS_Reserv_Use and wTip=15);
       }

       if (not OS_Comp_Use)
       {
         SetTabbedSheetVisible(brCompOsBr,  false);
         SetTabbedSheetVisible(brCompOsScr, false);
       }

//---------------------------------------------------------------------
      case CurVisible of
          dcOwnOnly :
              {
                AddBounds(tbVscBound);    // по ДМ
                ClearFieldOption(#KatOs.Descr,ofSelectAble);
                ClearFieldOption(#KatOs.DesGr,ofSelectAble);
              }
          dcGrpRead,
          dcGrpModif:
              {
                AddBounds(tbVscGrBound);  // по группе
                ClearFieldOption(#KatOs.DesGr,ofSelectAble);
              }
      end;
//---------------------------------------------------------------------
      case CurVisibleCO of
          dcOwnOnly :
              {
                cFilCO := CurCO;
                AddBounds(tbbyKatosCO);    // по ЦО
                DOC_PICKOTVPODR := false;
              }
      end;
//---------------------------------------------------------------------
    #ifdef __TPR2__
      case AvailableInvCardType of
        1:
        {
          cFilCOFilial := 0;
          AddBounds(tbbyCompOSMain);
        }
        2:
        {
          cFilCOFilial := 1;
          AddBounds(tbbyCompOSSub);
        }
      end;
    #end
//---------------------------------------------------------------------

        FilInNum:= '';      FilName  := '';       FilZvIz  := '';
        FilModTip:= '';     FilZavN  := '';       FilPasN  := '';
        cFilGr   := 0;      cFilVid  := 0;        cFilNorm := 0;
        FilNorm  := '';     cFilOKOF := 0;        FilOKOF  := '';
        cFilAmGr := 0;      cFilPrSb := 0;        cFilCO   := CurCO;
        cFilCOFilial := 0;  cFilcNote :=0;
        cFilIsp  := 0;      cFilSobs := 0;        cFilZnak := 0;
        cFilDrg  := 0;      cNRecPodr:= 0;        cNRecMol := 0;
        cFilMetod:= 0;      FilMetod := '';       cFilTipOb:= 0;
        FilTipOb := '';     wStoimZaEd := 0;      FilStoim := 0;
        FilSumIzn:= 0;      FilSIznM := 0;        FilSum   := 0;
        cFilZnakStoim   := 0;       cFilZnakSumIzn  := 0;         cFilZnakSIznM   := 0;
        cFilZnak := 0;              cFilZnakIspPs   := 0;         FilIspPs        := 0;
        cFilZnakIspCur  := 0;       FilIspCur       := 0;         cFilZnakSrokIsp := 0;
        FilSrokIsp      := 0;       cFilZnakOstSrok := 0;         FilOstSrok      := 0;
        cFilZnakPoprkoef:= 0;       FilPoprkoef     := 0;         cFilInvCard     := 0;

        FilBarKod:= '';             FilImNum:='';

        FilDvd1 := ZeroDate;         FilDvd2 := ZeroDate;
        FilDv1  := ZeroDate;         FilDv2  := ZeroDate;         FilDp1  := ZeroDate;
        FilDp2  := ZeroDate;         FilDb1  := ZeroDate;         FilDb2  := ZeroDate;

        FilOtchPer := Date( Last_Day(dGetTune('OS.OtchPeriod')), Month(dGetTune('OS.OtchPeriod')), Year(dGetTune('OS.OtchPeriod')));
        FlFilOtchPer := 0;
        cFilZnakOtchPer := 1;

        wFilKlass  := 0;        FilKlass   := '';
        cFilKlass1 := 0;        wFilKlass1 := 0;         FilKlass1  := '';
        cFilKlass2 := 0;        wFilKlass2 := 0;         FilKlass2  := '';
        cFilKlass3 := 0;        wFilKlass3 := 0;         FilKlass3  := '';
        cFilKlass4 := 0;        wFilKlass4 := 0;         FilKlass4  := '';
        cFilKlass5 := 0;        wFilKlass5 := 0;         FilKlass5  := '';
        cFilKlass6 := 0;        wFilKlass6 := 0;         FilKlass6  := '';

        cFilKol    :=0;         FilKol     := 0;

        isChangeKatosKol := False;

        wCanEditIznosPs  := 0;
        wCanEditStoimPs  := 0;
//----------------------------------------------------
       PrSpecOb := false;
       if (GrupVbr = 6)
         {
           GrupVbr := 0;
           PrSpecOb := true;

           cFilTipOb := 0;
           if RunInterface('GetSposobAmort',cFilTipOb,0) = cmCancel
             {
               Abort;
               Exit;
             }

           ReSetBounds(#Sposob);
           if (GetFirst Sposob where  ((cFilTipOb == Sposob.Nrec)) = tsOk)
              FilTipOb := Sposob.NameSb;

           set FilKat := FilKat or 32768;

           SetBounds(#Sposob);

           myFiltrR := true;
           AddBounds(tbbyKatosSPOSOB);

           ClusterDisabledField(#FilKat,32768);

           if KatOs.TiDk = 15
             {
               // ClearFieldState(#OstSrokPolIsp,    sfVisible);

               cfsSetProp('c_TRDOCUMENT_KATOS.REGNUM_Регистрац._номер',   cfpVisible, True);
               cfsSetProp('c_TRDOCUMENT_PROBTRCURR.MES[13]_Текущий_месяц', cfpVisible, True);

               cfsSetProp('c_PDOCUMENT_KATOS.REGNUM_Регистрац._номер',   cfpVisible, True);
               cfsSetProp('c_PDOCUMENT_PROBTRCURR.MES[13]_Текущий_месяц', cfpVisible, True);
             }
         }

//----------------------------------------------------
        isFiltrPodr := isFiltrMOL := false;
        if (NrecPodr <> 0)
          {
            ReSetBounds(#KatPodr);
            if (GetFirst KatPodr where  ((NrecPodr == KatPodr.Nrec)) = tsOk)
              {
                isFiltrPodr := true;
                set FilKat := FilKat or 2048;
                cNRecPodr := NrecPodr;
                myFiltrR  := true;
                AddBounds(tbbyKatosPdrz);
                /*if (GrupVbr = 7)   // Вызов из Инвентаризации
                {
                  ClusterDisabledField(#FilKat, 2048);
                  SetFieldSelectable(#fFilPodrKatOs, false);
                }*/
              }
            SetBounds(#KatPodr);
          }

//----------------------------------------------------
        if (NrecMol <> 0)
          {
            ReSetBounds(#KatMol);
            if (GetFirst KatMol where  ((NrecMol == KatMol.Nrec)) = tsOk)
              {
                isFiltrMOL := true;
                set FilKat := FilKat or 4096;
                cNRecMol := NrecMol;
                myFiltrR := true;
                AddBounds(tbbyKatosMol);
                if (GrupVbr = 7)   // Вызов из Инвентаризации
                {
                   if (NRecPodr <> 0)
                      ClusterDisabledField(#FilKat, 2048 + 4096);
                   else
                     ClusterDisabledField(#FilKat, 4096);
                   SetFieldSelectable(#fFilMolKatOs, false);
                }
              }
            SetBounds(#KatMol);
          }

//----------------------------------------------------
        if (GrupVbr = 7)   // Вызов из Инвентаризации
          GrupVbr := 2;

        if (NrecVid <> 0)
          {
            ReSetBounds(#VidNormaS);
            if (GetFirst VidNormaS where ((NrecVid == VidNormaS.Nrec)) = tsOk)
              {
                cFilVid  := NrecVid;
                myFiltrR := true;
                AddBounds(tbbyKatosKodVid);
              }
            SetBounds(#VidNormaS);
          }
//----------------------------------------------------
       if (GrupVbr = 9) and (NrecPodr <> 0)       // фильтр по отчетному периоду.  NrecPodr - дата отч периода
         {
           FlFilOtchPer := 1;
           cFilZnakOtchPer := 1;
           FilOtchPer := pOsFun.LastDayDate(LongInt(NrecPodr));
           GrupVbr := 2;
           NrecPodr := 0;

           myFiltrR  := true;
           AddBounds(tbbyKatosOtchPer1);
         }

//----------------------------------------------------
        bIsEmpty := false;

        if (GetFirst Katos <> tsOk)
        {
          if (tipDock = cgOs_115_OS) or (tipDock = cgOs_116_NMA)
            {
              message('Архив выбывших инвентарных карточек пуст.');
              Abort;   Exit;
            }

              if GrupVbr = 0
                {
                  bIsEmpty := true;
                  PutCommand(cmInsert);
                }
              else
                 if myFiltrR
                   {
                     if message('Нет инвентарных карточек с заданными ограничениями.'+ ''#13'Снять ограничения ?',YesNo) = cmYes
                       {
                         SubBounds(tbbyKatosPdrz);
                         SubBounds(tbbyKatosKodVid);
                         SubBounds(tbbyKatosMol);
                         SubBounds(tbbyKatosOtchPer1);
                         set cFilVid  := 0;
                         set cNRecMol := 0;
                         set cNRecPodr:= 0;
                         myFiltrR := false;
                         FlFilOtchPer := 0;
                         if (GetFirst Katos <> tsOk)
                           {
                             Message('Каталог инвентарных карточек пуст.'#13 +  'Нажмите ВВОД и заполните его...',okButton);
                             PutCommand(cmEdit);
                           }
                         else
                           {
                             if (isTree)
                               {
                                 Case wTip of
                                    15 : {
                                               ReadMydsk(SortRg, 'd_dsSortRgOS', Changed);
                                               ReadMydsk(SortPr, 'd_dsSortPrOS', Changed);
                                             }
                                    16 : {
                                               ReadMydsk(SortRg, 'd_dsSortRgNMA', Changed);
                                               ReadMydsk(SortPr, 'd_dsSortPrNMA', Changed);
                                             }
                                 end;

                                 GetSort;

                                 PutCommand(cmValue1);
                               }
                           }
                       }
                     else
                       { Abort;
                         Exit;
                       }
                   }
                 else
                   {
                     Message('Каталог инвентарных карточек пуст.'#13 + 'Нажмите ВВОД и заполните его...',okButton);
                     PutCommand(cmEdit);
                   }
        }
        else
        {
            // установка режима сортировки
            Case wTip of
               15 : {
                          ReadMydsk(SortRg, 'd_dsSortRgOS', Changed);
                          ReadMydsk(SortPr, 'd_dsSortPrOS', Changed);
                    }
               16 : {
                          ReadMydsk(SortRg, 'd_dsSortRgNMA', Changed);
                          ReadMydsk(SortPr, 'd_dsSortPrNMA', Changed);
                    }
            end;

            GetSort;

            if (tipDock = 115) or (tipDock = 116) or (tipDock = cgOs_157_Rsrv)
              {
                if (not IsProtected(#KatOs))
                  {
                    ProtectRecord(#KatOs,true);
                    if (not IsProtected(#KatOs))
                      message('Не удалось заблокировать текущую запись!',OkButton)
                  }

                if (not IsProtected(#SpKatOs))
                  {
                    ProtectRecord(#SpKatOs,true);
                    if (not IsProtected(#SpKatOs))
                      message('Не удалось заблокировать текущую запись!',OkButton)
                  }
               }

            if pNrecKatos <> 0
              {
                if (GetFirst Katos where ((pNrecKatos == Katos.Nrec)) = tsOk)
                  {
                    if (isTree)
                      TreeJumpToRecord(trDocument, pNrecKatos);

                    if (GrupVbr = 0) or (GrupVbr = 8)
                      {
                        // AddBounds(tbbyNrecKatos);
                        // DisableCommand(cmInsert);
                        DisableCommand(cmNal);
                        DisableCommand(cmDocBas);
                        DisableCommand(cmValue17);
                        DisableCommand(cmValue18);
                        PutCommand(cmEdit);
                      }
                  }
              }
            else
              {
                var cRec: comp;
                ReadMyDsk (cRec,'KatOs_nRec_' + string(TipDock), false);
                if (isTree)
                  TreeJumpToRecord(trDocument, cRec);
                else
                  if GetFirst KatOs where ((cRec == KatOs.nRec)) = tsOk {};
                PutCommand(cmValue1);
              }

          }

        // Печать формы ОС-6а
        SetCommandEnabled(cmValue32, wTip = 15);

        if (OS_Complex = 1)  and (TipDock  mod 100 <> cgOs_57_Rsrv)
          EnableCommand(cmAccording);
        else
          {
            DisableCommand(cmAccording);
            ShowToolButton('F_Common::tbTree_brows','btTree_brows',false);
          }

      aArrCommands[1]  := cmValue14;  //'Заполнение суммы амортизации'
      aArrCommands[2]  := cmValue18;  //'Групповая замена поля в карточках'
      aArrCommands[3]  := cmNal;      //'Тиражирование инвентарных карточек'
      aArrCommands[4]  := cmDocBas;   //'Отмена последнего тиражирования'
      aArrCommands[5]  := cmValue17;  //'Перевод карточек из архива в картотеку'
      aArrCommands[6]  := cmValue5;   //'Тиражирование внешней классификации'
      aArrCommands[7]  := cmValue37;  //'Тиражирование внешних атрибутов'
      aArrCommands[8]  := cmValue35;  //'Тиражирование характеристики'
      aArrCommands[9]  := cmValFld5;  //'Расчет амортизаций будущих периодов'
      aArrCommands[10] := cmValFld6;  //'Удаление амортизаций будущих периодов'
      aArrCommands[11] := cmValue10;  //'Пересчет сумм по методам учета'
      aArrCommands[12] := cmValue23;  //'Пересчет срока использования'
      aArrCommands[13] := cmValue21;  //'Заполнение амортизационной группы'
      aArrCommands[14] := cmValue22;  //'Заполнение срока полезного использования'
      aArrCommands[15] := cmImp;      //'Импорт...'
      aArrCommands[16] := cmValue19;  //'Переход к новому отчетному периоду'
      aArrCommands[17] := cmValue20;  //'Возврат к предыдущему отчетному периоду'
      aArrCommands[18] := cmValue34;  //'Тиражирование драгметаллов'
      aArrCommands[19] := cmValue36;  //'Пересчет накопленной переоценки стоимости и износа'
      aArrCommands[20] := cmValue8;   //'Формирование сложного объекта'
      aArrCommands[21] := cmValue54;  // Тиражирование ИФ
      aArrCommands[22] := cmValue42;   //Полный пересчет срока использования'
      aArrCommands[23] := cmValue55;  // Ввод коэффициентов переоценки

      SetTabbedSheetVisible(scRasKoef,   false);
      DisableCommand(cmMulSelDO); // Применить коэффициенты для выделенных записей
      DisableCommand(cmIerarchy); //Отмена прямой переоценки для выделенных записей
      DisableCommand(cmValue56);  // Печать ведомости переоценки прямым методом

      if (TipDock = 15) or (TipDock = cgOs_315_PrevOS)
        isSetUserRghFields := iFCI.SetActiveInterface(15, 0);

      if (TipDock mod 100 = cgOs_57_Rsrv)  // Резерв
      {
        SetFieldandLabelVisible (#KatMol.Name, false );
        SetFieldandLabelVisible (#Katos.NameIzg, false );
        SetFieldandLabelVisible (#Katos.TipMark, false );
        SetFieldAndLabelVisible (#KauReffArray, false );
      }


      SetTitles;
      Type_1 := word(coKatOs) + 1;
    }//cmInit

//-------------------------------------------
  cmDone :
    {
      if (not UpdateTable)
        {
          Abort; Exit;
        }
      SaveMyDsk(KatOs.nRec, 'KatOs_nRec_' + string(TipDock));
      SaveMyDsk(isTree,     'KatOsS_isTree_' + string(TipDock));

      if not NullVipRef(oGMRef)
        FreeVipInterface(oGMRef);

      if not NullVipRef(iSostByIF)
        FreeVipInterface(iSostByIF);

      if not NullVipRef(iLnkL)
      {
        iLnkL.Done(0,0);
        FreeVipInterface(iLnkL);
      }

      if not NullVipRef(intChangeHist)
        FreeVipInterface(intChangeHist);

      if not NullVipRef(iOS_Oper)
      {
          UnBindEvent(ChangeNastrOs, iOS_Oper.OnChangeNastrOs);
          UnBindEvent(RescanKatOs,   iOS_Oper.OnRescanKatOs);
          FreeVipInterface(iOS_Oper);
      }

      if not NullVipRef(iMcInOs)
      {
        UnBindEvent(ChangeNastrOs, iMcInOs.OnChangeNastrOs);
        UnBindEvent(RescanKatOs,   iMcInOs.OnRescanKatOs);
        FreeVipInterface(iMcInOs);
      }

      if (bOsRaznCalc)
      {
        iOsRaznW.CloseEditWindow;
        UnBindEvent(ChangeNastrOs, iOsRaznW.OnChangeNastrOs);
      }

      if wTip = 15
      {
        if not NullVipRef(iNalDrag)
          iNalDrag.CloseEditWindow;

        if not NullVipRef(iSpecOb)
          iSpecOb.CloseEditWindow;

        if not NullVipRef(iRasKoef)
          FreeVipInterface(iRasKoef);
      }

      if not NullVipRef(iKauReff)
        FreeVipInterface(iKauReff);

      if not NullVipRef(pGetArc)
        FreeVipInterface(pGetArc);

#ifdef __KatosFilters__
      _LOOP UserPermit
      {
        if UserPermit.Type >= word(coKatOs)
          delete UserPermitD where ((UserPermit.nrec == UserPermitD.nrec));
      }
#end
      // wTip := TipDock;     // вернем значение переданного параметра обратно. Иначе не раблтало в операциях.

    }//cmDone

  //-------------------------------------------
  cmValue1 :
  {
    if (isTree)
      MyJumpToRecord();
    ReScanPanel(#Katos);
    pOsFun.isValidDateMU(NastrOs.nRec, KatOs.OtchPer, true);   // сообщение о периоде действия текущего МУ, если период карточки не подходит
  }

  //-------------------------------------------
  cmMarkUnMark:
  {
    var boIsMark : boolean;

    boIsMark := (RecordExists Pick <> tsOk);
    //т.к. нет конролей при пометке по <+>, то и по Ins даем помечать, а далее нужно анализировать
    //права при пакетных операциях с выбранными ИК ...


    if (OnlyAll) and (isTree)   // Помечать всегда ветку в интерфейск выбора, то становимся на родителя
      {
        if (Katos.cHigherOs <> 0)
          {
            var cRec: comp;
            cRec := Katos.cHigherOs;
            if GetFirst Katos where ((cRec == Katos.NRec))=tsOk
            do {
                 cRec := Katos.cHigherOs;
            } while GetFirst  Katos where ((cRec == Katos.NRec))=tsOk
            MyJumpToRecord;
          }
        MarkSubOs(boIsMark);
      }


   if (KatOS.cHigherOs > 0)
   {
     loPickKatOS.cKatOs := KatOS.cHigherOs;
     if ( loPickKatOS.RecordExists PickOs = tsOk )   // Если родитель помечен, то с листа снять пометку нельзя
       Exit;
   }

    if (KatOs.IsLeaf = 1)
      {
        MarkOS(boIsMark, KatOs.nRec);
        RedrawCurrentAndGo(GetCurrentFormat, true);
      }
    else
      MarkSubOs(boIsMark);

    RereadRecord(#Pick);
    RereadRecord(#KatOS);

    SetTitles;
  }//cmMarkUnMark

  cmSelectAll :
  { // пометить все для установленного ограничения
    StartNewVisual(vtNumericVisual, vfTimer + vfBreak + vfConfirm, 'Помечаю все ИК текущей выборки...', 1);

    if IsTree
    {
      TreePushPos(trDocument);
      TreeGetFirstEx(trDocument);
    }
    else
      PushPos(#Katos);

    _try
    {
      SetBoundsByLinkTbl(False);

      _Loop KatOs    // пометим все
      {
         // MarkSubOs(true);
         MarkOsInCycle(true);
         if Not NextVisual
           Break
      }

      SetBoundsByLinkTbl(True);
    }

    _except
      on ExUserBreak: {}

    if IsTree
      TreePopPos(trDocument);
    else
      PopPos(#Katos);

    RereadRecord(#Katos);
    StopVisual('', 0);
    SetTitles;
  }


  cmUnSelectAll :
  {
    KillPick;
    RereadRecord(#KatOS);
    SetTitles;
  }

cmInvertAll :
  {
    var boIsMark : boolean;
    StartNewVisual(vtNumericVisual, vfTimer + vfBreak + vfConfirm, 'Инвертирование пометок...', 1);

    if IsTree
    {
      TreePushPos(trDocument);
      TreeGetFirstEx(trDocument);
    }
    else
      PushPos(#Katos);

      SetBoundsByLinkTbl(False);

      _Loop KatOs
      {
         boIsMark := if (isValid(#Pick), false, true);
         MarkOsInCycle(boIsMark);
         // MarkSubOs(boIsMark);
         if Not NextVisual
           Break
      }

      SetBoundsByLinkTbl(True);

    if IsTree
      TreePopPos(trDocument)
    else
      PopPos(#Katos);

    RereadRecord(#Katos);
    StopVisual('', 0);
    SetTitles;
  }

//------------------------------------------------------------------------------
  // для иерархий
  cmTreeTop       : if (isTree)   Node := 0;
  cmTreeUp        : if (isTree)   Node := Katos.CHigherOs;
  cmTreeDown      : if (isTree)   Node := Katos.NRec;
  cmTreeNodeType  : if (isTree)
                      if Katos.isLeaf = 1
                        TreeSetNodeType( trDocument, 2);
  cmTreeNeedOwner : if (isTree)
                      TreeJumpToRecord(trDocument, Katos.cHigherOs);

//-------------------------------------------
  cmDelOnProtect:
    {
      if (CurWindow = wnMainWindow)// or (CurWindow = wiMoveOs)
        stop;

      case CurField of
        #KauReffArray :
         {
           iKauReff.DeleteAll(word(coKatOs),KatOs.nRec);
           RedrawPanel(tnKatOs);
         }
      End;
    }

//-------------------------------------------
  cmChangeTabbedSheetFormat:
  {
    ChangeTabbedSheet();

  /*
      case Target  of
        scNalDragBr    :  iNalDrag.SetNalDragParams(1, Katos.Nrec ,false);
        ProbTrShow     :  iSpecOb.SetSpecObParams(KatOs.cSPOSOB, KatOs.Nrec, (Katos.cSPOSOB <> 0) and (not IsProtected(#KatOs)) );
        scRasKoef      :  iRasKoef.SetRasKoefParams(cPerOsNRec, NastrOs.Nrec, KatOs.Nrec);
        brReservOsShow :  pRsrv.SetReserv(Katos.Nrec);
        scMcInOsShow :
        {
          iMcInOs.SetKatOs(KatOs.NRec);
          iMcInOs.RereadMcInOsShow;
        }
        scOsRaznShow  :  iOsRaznW.SetOsRaznParamsEdit(KatOs.TiDk, KatOs.nRec, KatOs.OtchPer, false);
        brSostByIF    :  OnShowSostByIF();
        scChangeHist  :  intChangeHist.SetChangeHistParam(KatOS.nRec, NastrOs.nRec, 1);
        brArcBr       :  pGetArc.SetKatOs(KatOs.nRec);
        brArcScr      :  pGetArc.SetKatOs(KatOs.nRec);
        brCompOsBr    :  pCompOs.SetCompOs(Katos.Nrec);
        brCompOsScr   :  pCompOs.SetCompOs(Katos.Nrec);
      end; // case
*/
  }

//-------------------------------------------
  cmEdit:
    {
      RunWindow(wiEditKatos);
      Stop;
    }

//-------------------------------------------
  cmAddNewRec:
  {
    var wRes : word = 0;

    if pOsFun.CanEditOsInClosedPeriod(dGetTune('OS.OtchPeriod'), false, wRes, 1)
      PutCommand(cmInsert);
  }
//-------------------------------------------
  cmInsert :
    PutCommand(cmDefault);

//-------------------------------------------
  cmDefault :
    {
      if (CurTable = #KatOs)
        {
          if GrupVbr <> 0
            {
              if (UpDateTable)
                {
                  if (GrupVbr = 1)
                    {
                      pNrecKatos := Katos.Nrec;
                      MarkOS(true, KatOs.nRec);
                      CloseInterface(cmDefault);
                    }
                  else
                    {
                      pNrecKatos := Katos.Nrec;

                      if (loPickKatOS.RecordExists Pick where ((cgPick_KatOs == Pick.wList)) <> tsOk)
                        PutCommand(cmMarkUnMark);

                      CloseInterface(cmDefault);
                    }
                }
            }
          else
            if (CurWindow = -1)
              {
                RunWindow(wiEditKatos);
                Stop;
              }
        }
    }//cmDefault

  cmCancel :
    KillPick;

  cmClose  :
    {
      if Not ((GrupVbr = 1) OR (GrupVbr = 2))
        KillPick;
    }


  cmValue14 :  //Заполнение суммы амортизации
    {
      if (loPickKatOS.RecordExists Pick
                      where ((cgPick_KatOs == Pick.wList)) = tsOk)
        {
          var Result, wDlgEditPos : word;
          Result := cmYes;
          wDlgEditPos := cmYes;

          PushBounds(tbbyPrintOS6);
          PushBounds(tbbyFillAmGr);
          StartNewVisual(vtIndicatorVisual, vfTimer + vfBreak + vfConfirm, 'Заполнение суммы амортизации', GetSelCount(word(27)));

          _LOOP Pick where ((cgPick_KatOs == Pick.wList))
            {
              if Not pOsFun.CanEditOs(Pick.cRec, false)
                {
                  if ((wDlgEditPos <> cmOk) and (wDlgEditPos <> cmQuit))
                    wDlgEditPos := RunInterface( 'DlgMessage'
                                               , 'Настройка ограничивает Ваши права на редактирование'
                                               + ' объекта с ИН ' + pOsFun.GetKatOsInNum(Pick.cRec)
                                               + '. Заполнение суммы амортизации для карточки невозможно.'#13
                                               + 'Продолжить ?'
                                               , '' );

                  case wDlgEditPos of
                    cmYes, cmOk : Continue;
                  else
                    Break;
                  end;
                }

              if (SpKatOs6.SumFld <> 0)
                {
                  if ((Result <> cmOk) and (Result <> cmQuit))
                    Result := RunInterface( 'DlgMessage'
                                          , 'У объекта с ИН ' + pOsFun.GetKatOsInNum(KatOs6.NRec)+''#13+
                                          + ' сумма амортизации равна '
                                          + DoubleToStr(SpKatOs6.SumFld,'666''666''666''666''666''666.88')
                                          + ''#13'Произвести замену на '
                                          + DoubleToStr(SpKatOs6.SIznM,'666''666''666''666''666''666.88')+' ?'
                                          , '' );

                  case Result of
                    cmNo, cmQuit : continue;
                    cmCancel     : break;
                  end;
                }

              SpKatos6.SumFld := SpKatOs6.SIznM;
              update current SpKatOs6;
            }

          StopVisual('', 0);
          PopBounds(tbbyFillAmGr);
          PopBounds(tbbyPrintOS6);

          if (Result <> cmCancel)
            {
              KillPick;
              Message('Перенос износа за месяц выполнен.');
            }

          ReReadRecord(#Katos);
        }
      else
        Message('Нет помеченных карточек.');

    }//cmValue14

  cmAlt1 :
    {
      case RunMenu('Alt1Katos') of
        cmValue14 : PutCommand(cmValue14);
      end;
    }

  // ПЕчать отчета по карточкам не в отчетном периоде
  cmvalue12 : WriteKatosOtchPerMain(tipDock);

  cmValue15 :   //Печать регистра информации об объекте
    {
      if (UpDateTable)
        {
          var pCount : comp;
          pCount := 0;
          _loop Pick where ((cgPick_KatOs == Pick.wList))
            pCount := pCount + 1;

          if (pCount > 1)
            RunInterface('OsInfo',wTip,-1)
          else
          if (pCount = 1)
            RunInterface('OsInfo',wTip,Pick.cRec)
          else
            RunInterface('OsInfo',wTip,KatOs.nRec);
        }
    }//cmValue15

  cmValue17 :  // перевод в архив
    if (loPickKatOS.RecordExists Pick  where ((cgPick_KatOs == Pick.wList)) = tsOk)
      {
        if (KatOs.TiDk = 15) or (KatOs.TiDk = 16) or (KatOs.TiDk = cgOs_57_Rsrv)
          {
            if message('Осуществлять перевод выбранных'+  ''#13'инвентарных карточек в архив ?',YesNo) = cmYes
              InsArchiv(0);
          }
        else
          {
            if message('Осуществлять перевод выбранных'+ ''#13'инвентарных карточек из архива в каталог ?',YesNo) = cmYes
              InsArchiv(1);
          }
      }
    else
      message('Нет выбранных инвентарных карточек'+  ''#13'для перевода в архив.',okButton);

  cmValue46:  // в архиве удаление выделенных карточек из настройки формы 11
    if (loPickKatOS.RecordExists Pick where ((cgPick_KatOs == Pick.wList)) = tsOk)
    {
      if (Message('Исключить выбранные инвентарные'+    ''#13'карточки из настройки формы 11?', Confirmation + YesNo) = cmYes)
      {
        loPickKatOS._LOOP Pick
          iForm11.DelAllNastrForm11(loPickKatOS.Pick.cRec);
      }
    }
    else
      Message('Нет выбранных инвентарных карточек.', okButton);

  cmValue2 :  // переключиться на архив или картотеку
    {
      if (tipDock < 100)
        tipDock := tipDock+100;
      else
        tipDock := tipDock-100;
      SetTitles;
      StatusContext;
      ReReadRecord;
    }

  cmValue31 :  // переключиться в предварительную картотеку  или основную
    {
      tipDock := if (tipDock=cgOs_315_PrevOS, 15, cgOs_315_PrevOS);
      SetTitles;
      StatusContext;
      ReReadRecord;
    }

  cmAccording :   // переключение дерево/список
    if OS_Complex = 1
      {
        if (TipDock  mod 100 = cgOs_57_Rsrv)
          { abort; stop; exit }

        var cRec: comp; cRec:= KatOs.nRec;
        if (isTree)
          {
            isTree := false;
            SubBounds(tbByTree);
            AddBounds(tbByBrowse);
            SelectFormat(pDocument);
            SetFieldState(#KatosLink.InNum, sfVisible);
            if (GetFirst KatOs where ((cRec == KatOs.nRec)) = tsok)  {};
          }
        else
          {
            isTree := true;
            SubBounds(tbByBrowse);
            AddBounds(tbByTree);
            SelectFormat(trDocument);
            TreeJumpToRecord(trDocument, cRec);
          }

        StatusContext;
        GetSort;
      }

cmValue55  :    // Ввод коэффициентов переоценки
  {
    if (RunInterface('Pereoc', wTip, word(1), cPerOsNRec) = cmDefault)
      if (GetFirst PerOs where (( cPerOsNRec == PerOs.nRec )) = tsOk)
      {
        if NullVipRef(iRasKoef)
          LoadVipInterface(iRasKoef); // загружаем vip- интерфейс RasKoef

        SetTabbedSheetVisible(scRasKoef, True);

        if ((KatOs.isLeaf <> 1)         // узловой элемент в дереве
        or (PerOs.dataPer <> ZeroDate)) //выбранная переоценка уже проведена?
        {
          DisableCommand(cmMulSelDO);
          DisableCommand(cmIerarchy);
          iRasKoef.SetReadOnlyMode(cPerOsNRec, True);
        }
        else
        {
          EnableCommand(cmMulSelDO);
          EnableCommand(cmIerarchy);
          iRasKoef.SetReadOnlyMode(cPerOsNRec, False);
        }

        SetFormatEnabled(scRasKoef, (KatOs.isLeaf = 1) );
        EnableCommand(cmValue56);
      }
  }

cmMulSelDO :    // Применить коэффициенты для выделенных записей
  {
    var pwPriznCur : word;  pwPriznCur:=0;
    var pSumma1Cur,
        pSumma2Cur : tSumma;
    var boFlag     : boolean;

    boFlag := iRasKoef.GetRasKoefNew(cPerOsNRec, NastrOs.Nrec, KatOs.Nrec, pwPriznCur, pSumma1Cur, pSumma2Cur);

    if not boFlag //isValid(#RasOKOF)
    {
      putCommand(cmIerarchy);
      exit;
    }

    if (loPickKatOS.RecordExists Pick
                    where ((cgPick_KatOs == Pick.wList)) <> tsOk)
      Message('Нет выбранных инвентарных карточек.', okButton)
    else
    {
      bContinueOper := True;
      bClickedOk    := False;

      if (bContinueOper)
      {
        var wDlgEditPos : word;
        wDlgEditPos := cmYes;

        StartNewVisual(vtIndicatorVisual, vfTimer+vfBreak+vfConfirm, 'Применение переоценки для выделенных записей', GetSelCount(word(27)));

        _LOOP Pick where ((cgPick_KatOs == Pick.wList))
        {
          NextVisual;

          if Not pOsFun.CanEditOs(Pick.cRec, false)
          {
            if ((wDlgEditPos <> cmOk) and (wDlgEditPos <> cmQuit))
              wDlgEditPos := RunInterface( 'DlgMessage'
                                         , 'Настройка ограничивает Ваши права на редактирование'
                                         + ' объекта с ИН ' + pOsFun.GetKatOsInNum(Pick.cRec)
                                         + '. Применение переоценки для карточки не возможно.'#13
                                         + 'Продолжить ?'
                                         , '' );

            case wDlgEditPos of
              cmYes, cmOk : Continue;
            else
              Break;
            end;
          }

          if GetFirst KatOs where (( word(1)   ==  Katos.isLeaf (NoIndex) and
                                     Pick.cRec == KatOs.nRec )) = tsOk
          {
            iRasKoef.SetRasKoefParams(cPerOsNRec, NastrOs.Nrec, Pick.cRec);
            iRasKoef.SetRasKoefNew(pwPriznCur, pSumma1Cur, pSumma2Cur);
          }
        }

        StopVisual('', 0);

        KillPick;
        Message('Применение переоценки для выделенных записей выполнено.');

        ReReadRecord(#Katos);
      }
    }
  }

cmIerarchy :    //Отмена прямой переоценки для выделенных записей
  {
    if (loPickKatOS.RecordExists Pick
                    where ((cgPick_KatOs == Pick.wList)) <> tsOk)
      Message('Нет выбранных инвентарных карточек.', okButton)
    else
    {
      bContinueOper := True;
      bClickedOk    := False;

      if (bContinueOper)
      {
        var wDlgEditPos : word;
        wDlgEditPos := cmYes;

        StartNewVisual(vtIndicatorVisual, vfTimer+vfBreak+vfConfirm, 'Отмена прямой переоценки для выделенных записей', GetSelCount(word(27)));

        _LOOP Pick where ((cgPick_KatOs == Pick.wList))
        {
          NextVisual;

          if Not pOsFun.CanEditOs(Pick.cRec, false)
          {
            if ((wDlgEditPos <> cmOk) and (wDlgEditPos <> cmQuit))
              wDlgEditPos := RunInterface( 'DlgMessage'
                                         , 'Настройка ограничивает Ваши права на редактирование'
                                         + ' объекта с ИН ' + pOsFun.GetKatOsInNum(Pick.cRec)
                                         + '. Отмена прямой переоценки для карточки не возможна.'#13
                                         + 'Продолжить ?'
                                         , '' );

            case wDlgEditPos of
              cmYes, cmOk : Continue;
            else
              Break;
            end;
          }

          if GetFirst KatOs where ((Pick.cRec == KatOs.nRec)) = tsOk
            iRasKoef.DeleteRasKoef(cPerOsNRec, NastrOs.Nrec, Pick.cRec);
        }

        StopVisual('', 0);

        KillPick;
        Message('Отмена прямой переоценки для выделенных записей выполнена.');

        ReReadRecord(#Katos);
      }
    }
  }

cmValue56  :    // Печать ведомости переоценки прямым методом
  {
    if NullVipRef(iRasKoef)
      exit;

    iRasKoef.PrintPerOS(cPerOsNRec, NastrOs.Nrec);
  }

  cmPrintDoc :
    {
      PrintReestrKatos(1);
    }

  cmValue39 :       // Печать реестра операций
    {
      iPrnOSOper.PrintKatOSOper(KatOS.NRec, NastrOS.NRec, 0);
    }

  cmPickClass:      // формирование внешних классификаторов
    GetClassifier;

  cmPickAttr:       // формирование внешней атрибутики
    GetAttribute;

cmHotKeys :
{
  var sMenu : string = '';

      if Not pOsFun.CheckEditKatOS(0)
        DisableCommands(aArrCommands)
      else
      {
        EnableCommands(aArrCommands);

        SetCommandEnabled(cmValue15, isNalRegLicense());
        SetCommandEnabled(cmValue22, wCountry = ccBel);
        SetCommandEnabled(cmValue19, OS_EditOtchPer);
        SetCommandEnabled(cmValue20, OS_EditOtchPer);

        SetCommandEnabled(cmValFld18, wCountry > ccBel);         //Пакетное изменение привязки карточек к налоговым группам


        SetCommandEnabled(cmValue47, (FilKat and 32768) = 32768);  // Печать данных по спец. оборудованию (если установлен фильтр)
        SetCommandEnabled(cmValue53, wCountry = ccRus);            // Печать ведомости амортизационных льгот

        SetCommandEnabled(cmValue17, TipDock <> cgOs_315_PrevOS);   // Перевод в архив
        SetCommandEnabled(cmValue2,  TipDock <> cgOs_315_PrevOS);   // Переключится в архив
      }

      var sMenuDop : string='';

      if (KatOs.TiDk = 15) or (KatOs.TiDk = 115)
      {
        SaveMyDsk('', 'PGKDopMenu');
        epAddMenuPGK(coKatOs, KatOs.nRec, 1);

        if (not ReadMyDsk(sMenuDop, 'PGKDopMenu', TRUE))
          sMenuDop := '';
      }

      case KatOs.TiDk of
            15 :
               {
                 // Дополнительные функции локального меню
                 var sFunc1, sFunc2, sFunc3, sFunc4 : string;
                 sFunc1 := sGetTune('Fin.OS.LocMnu.KatOS.DopFunc01');
                 sFunc2 := sGetTune('Fin.OS.LocMnu.KatOS.DopFunc02');
                 sFunc3 := sGetTune('Fin.OS.LocMnu.KatOS.DopFunc03');
                 sFunc4 := sGetTune('Fin.OS.LocMnu.KatOS.DopFunc04');

                 if (sFunc1 = '') and (sFunc2 = '') and (sFunc3 = '') and (sFunc4 = '')  and (not pOsFun.UsePrevOs())
                   PutHotCommand(RunDynMenu('F_OS::katos_HotKeys_OS' + sMenuDop));
                 else
                 {
                   var MenuId : longint;
                   MenuId := LoadMenu('F_OS::katos_HotKeys_OS');

                   if (sMenuDop <> '')
                     ConcatMenu(MenuId, LoadMenu(sMenuDop));

                   AddMenuItem(MenuID, 'SEPARATOR', 0);

                   if ( pOsFun.UsePrevOs() )
                     AddMenuItemEx(MenuID, 'Переход в предварительную картотеку', 'Переход в предварительную картотеку', '', cmValue31, 0);

                   if (sFunc1 <> '')
                     AddMenuItemEx(MenuID, sFunc1, sFunc1, 'Zakaz_UserLM', cmVal1, 0);

                   if (sFunc2 <> '')
                     AddMenuItemEx(MenuID, sFunc2, sFunc2, 'Zakaz_UserLM', cmVal2, 0);

                   if (sFunc3 <> '')
                     AddMenuItemEx(MenuID, sFunc3, sFunc3, 'Zakaz_UserLM', cmVal3, 0);

                   if (sFunc4 <> '')
                     AddMenuItemEx(MenuID, sFunc4, sFunc4, 'Zakaz_UserLM', cmVal4, 0);

                   PutHotCommand(RunLoadMenu(MenuID));
                 }
               }
            16 : PutHotCommand(RunMenu('katos_HotKeys_NMA'));
  cgOs_57_Rsrv : PutHotCommand(RunMenu('katos_HotKeys_RSRV'));
           115 : PutHotCommand(RunDynMenu('F_OS::katos_HotKeys_OS_Ar' + sMenuDop));
           116 : PutHotCommand(RunMenu('katos_HotKeys_NMA_Ar'));
 cgOs_157_Rsrv : PutHotCommand(RunMenu('F_OS::katos_HotKeys_RSRV_Ar'));
 cgOs_315_PrevOS :
               {
                  sMenu := 'F_OS::Katos_HotKeys_OS';
                  if ( pOsFun.UsePrevOs() )
                    sMenu += ';SEPARATOR;' + 'F_OS::mnuGoMainOs';
                  PutHotCommand(RunDynMenu(sMenu));
                  // PutHotCommand(RunMenu('Katos_HotKeys_OS'));     // Предварительная карточка ОС
               }
      end;
}

  //Пакетное изменение привязки карточек к налоговым группам
  cmValFld18:
    if ( RecordExists Pick where (( cgPick_KatOs == Pick.wList )) <> tsOk )
      Message('Необходимо отметить карточки для изменения привязки к налоговым группам!', Information + CancelButton)
    else
      RunWindowModal(wiMultiLinkNalGrOs);

  cmValFld19: // реестр картотеки ОС (настраиваемый)
  {
    if RunWindowModal(UserNastrFrReestr) <> cmDefault
      Exit;

    RunWindowModal(wnUserFrReestr);
  }

  cmExp:
    {
      var tmpMarker : TPtr;
      tmpMarker := InitMarker('KatOs',8,100,100,true);
      ClearMarker(tmpMarker);
      var bFound : boolean; bFound := false;
      _loop Pick noVisual where ((cgPick_KatOs == Pick.wList ))
        {
          InsertMarker(tmpMarker,Pick.cRec);
          bFound := true;
        }
      if ( not bFound )
        InsertMarker(tmpMarker,KatOs.NRec);
      DoneMarker(tmpMarker,'KatOs');
      case wTip of
       15: RunInterface('NastrExIm',2,4,1);
       16: RunInterface('NastrExIm',2,5,1);
      end;
    }

  cmImp:
    {
      case wTip of
       15: RunInterface('NastrExIm',1,4,0);
       16: RunInterface('NastrExIm',1,5,0);
      end;
      RereadRecord();
    }

  // пометка из внешнего источника
  cmPickKod :
    {
      PickedFromExternalSource(TipDock);
      RereadRecord;
      SetTitles;
    }

  cmValue5 :    // Тиражирование внешней классификации (Sanny)
    GroupEditExKlass;

  cmValue34 : //Тиражирование драгметаллов
    GroupEditNalDrag;

  cmValue35 : //Тиражирование характеристики
    GroupEditKatOsMemo;

  cmValue37 : //Тиражирование внешних атрибутов
    GroupEditExAttr;

  cmValue54 : // Тиражирование ИФ
    DuplicationIF;

  cmValue57 : // Тиражирование прикрепленных документов
    GroupEditDocInfo;

  cmValue36 : //Пересчет накопленной переоценки стоимости и износа
    {
      if (loPickKatOS.RecordExists Pick
                      where ((cgPick_KatOs == Pick.wList)) = tsOk)
        {
          bContinueOper := True;
          bClickedOk := False;
          RunWindowModal(NastrFillPereoc);

          if (bContinueOper)
            {
              var wDlgEditPos : word;
              wDlgEditPos := cmYes;
              PushBounds(tbbyPrintOS6);
              PushBounds(tbbyFillAmGr);
              StartNewVisual(vtIndicatorVisual, vfTimer+vfBreak+vfConfirm, 'Пересчет накопленной переоценки стоимости и износа', GetSelCount(word(27)));

              _LOOP Pick where ((cgPick_KatOs == Pick.wList))
              {
                NextVisual;

                if Not pOsFun.CanEditOs(Pick.cRec, false)
                {
                  if ((wDlgEditPos <> cmOk) and (wDlgEditPos <> cmQuit))
                    wDlgEditPos := RunInterface( 'DlgMessage'
                                               , 'Настройка ограничивает Ваши права на редактирование'
                                               + ' объекта с ИН ' + pOsFun.GetKatOsInNum(Pick.cRec)
                                               + '. Пересчет накопленной переоценки стоимости и износа для карточки не возможн.'#13
                                               + 'Продолжить ?'
                                               , '' );

                  case wDlgEditPos of
                    cmYes, cmOk : Continue;
                  else
                    Break;
                  end;
                }

                SpKatOs6.PerStoim  := iOSSums.GetStoimDooc(KatOs6.nRec, NastrOs.nRec) -
                                      iOSSums.GetStoimUcen(KatOs6.nRec, NastrOs.nRec);

                SpKatOs6.PerSumIzn := iOSSums.GetSumIznDooc(KatOs6.nRec, NastrOs.nRec) -
                                      iOSSums.GetSumIznUcen(KatOs6.nRec, NastrOs.nRec);

                update current SpKatOs6;
              }

              StopVisual('', 0);
              PopBounds(tbbyFillAmGr);
              PopBounds(tbbyPrintOS6);

              KillPick;
              Message('Пересчет накопленной переоценки стоимости и износа выполнен.');

              ReReadRecord(#Katos);
            }
        }
      else
        Message('Нет помеченных карточек.');

    }//cmValue36

  cmValue6 :
    PrintReestr(word(0));

  cmValue7 :
    RunWindowModal(wiPrnDateDiap);

  cmValue8 :    // Формирование сложного объекта из простого
    {
     if KatOs.isLeaf <> 1
      {
        Message('Сформировать сложный объект'+  ''#13'возможно только из простого ОС.');
        Exit;
      }

      if KatOs.cHigherOs <> 0
      {
        Message('Сформировать сложный объект возможно'+  ''#13'только из ОС, не имеющего вышестоящего.');
        Exit;
      }

      if (Message('Вы действительно хотите сформировать'+  ''#13'сложный объект?',YesNo) = cmYes)
        {
        // Прежде чем формировать сложный объект создаем специальную операцию
        // тиражирования простого объекта в сложный и простой.
        // Операция является технологической и недоступна пользователям.
        // Необходима для восстановления созданной структуры после откатов.
        PushPos(tnMoveOs);
        PushPos(tnSpMoveOs);
        ResetBounds(tnMoveOs);
        ResetBounds(tnSpMoveOs);
        _try
          {
          /*
          var dOper : date;
          dOper := KatOs.OtchPer;
          dOper := date(1,month(dOper),year(dOper));
          if GetFirst MoveOs where
                      (( word(wTip) == MoveOs.TipDoc  and
                         word(99)   == MoveOs.SysOper and
                         dOper      == MoveOs.DatOb
                      )) != tsOk
            {
            ClearBuffer(tnMoveOs);
            MoveOs.DesCr   := CurDesCr;
            MoveOs.DesGr   := CurDesGr;
            MoveOs.TipDoc  := wTip;
            MoveOs.SysOper := 99;
            MoveOs.DatOb   := dOper;
            insert current MoveOs;
            }
          ClearBuffer(tnSpMoveOs);
          SpMoveOs.TipDoc    := MoveOs.TipDoc;
          SpMoveOs.SysOper   := MoveOs.SysOper;
          SpMoveOs.DatOb     := MoveOs.DatOb;
          SpMoveOs.cMoveOs   := MoveOs.NRec;
          SpMoveOs.cKatOs    := KatOs.NRec;
          SpMoveOs.cKatOsOld := KatOs.cHigherOs;
          insert current SpMoveOs;
          */
          if not DoCompoundObject
            {
              message('Не удалось сформировать объект.',okButton);
              _doFinally;
            }
          ReReadRecord(#KatOs);
          ReScanPanel(#KatOs);
          ProcessCommand(cmPositionChanged);
          }
        _except
        on ExDataBase:
          {
            FPLog('Формирование сложного объекта из простого'#13''+ExploreException);
          }
        SetBounds(tnSpMoveOs);
        SetBounds(tnMoveOs);
        PopPos(tnSpMoveOs);
        PopPos(tnMoveOs);
        }
    }

  cmFilterSave :
    {
      RunWindowModal(wiFiltrKatOs);

      if (isTree)
          MyJumpToRecord;
      ReReadRecord;
      ProcessCommand(cmPositionChanged);
    }

  cmDocBas :
    {
      RunWindow(wiSortKatOs);
      Stop;
    }

  cmValue10 :    // Пересчет сумм по методам учета (Kakareko)
    {
      var bOperComplete : boolean;
      bOperComplete := false; // флаг успешного выполнения

      if ( RecordExists Pick where ((cgPick_KatOs  ==  Pick.wList )) != tsOk )
        {
          Message('Пометьте карточки для пересчета сумм.', Information + CancelButton);
          exit;
        }

      if (Message('Вы действительно хотите произвести'+
               ''#13'пересчет сумм по остальным методам'+
               ''#13'учета на основе текущего ?',YesNo+Confirmation) = cmYes)
        {
          //сначала укажем для каких методов учета пересчет нужен
          RunWindowModal(wiMakeSpKatOs);
          if (bMakeSpKatOsConfirmed)
            {
              // Производится пересчет по отмеченным карточкам
              PushPos(#KatOs);
              PushPos(#Pick);
              ResetBounds(#Pick);
              var NN : longint;
              var wDlgEditPos : word;

              NN := GetSelCount(word(27));
              wDlgEditPos := cmYes;

              if ( GetFirst Pick where ((cgPick_KatOs  ==  Pick.wList )) = tsOk )
                {
                  StartNewVisual( vtIndicatorVisual, vfTimer + vfBreak + vfConfirm, 'Пересчет сумм по методам учета', NN );
                  _loop  Pick where ((cgPick_KatOs == Pick.wList ))
                  {
                    if Not pOsFun.CanEditOs(Pick.cRec, false)
                      {
                        if ((wDlgEditPos <> cmOk) and (wDlgEditPos <> cmQuit))
                          wDlgEditPos := RunInterface( 'DlgMessage'
                                                     , 'Настройка ограничивает Ваши права на редактирование'
                                                     + ' объекта с ИН ' + pOsFun.GetKatOsInNum(Pick.cRec)
                                                     + '. Пересчет сумм по методам учета для карточки не возможен.'#13
                                                     + 'Продолжить ?'
                                                     , '' );

                        case wDlgEditPos of
                          cmYes, cmOk : Continue;
                        else
                          Break;
                        end;
                      }

                    if ( GetFirst KatOs where (( Pick.cRec == KatOs.NRec )) = tsOk )
                      {
                        bOperComplete := MakeSpKatOs();

                        if (not bOperComplete)
                          {
                            Message('Ошибка при обработке карточки '#13 + pOsFun.GetKatOsInNum(KatOs.NRec) + ' ' + KatOs.NameOs, Warning + CancelButton);
                            break;
                          }
                      }
                  }
                  StopVisual('',0);
                }

            SetBounds(#Pick);
            PopPos(#Pick);
            PopPos(#KatOs);
            RescanPanel(tnKatOs);
          }
        }

      if ( bOperComplete )
        Message('Пересчет сумм по методам учета'#13+ 'завершился успешно.', Information + OkButton);
      else
        Message('Пересчет сумм по методам учета'#13+ 'не осуществился.', Information + OkButton);
    }

  cmValue19 :     // Переход на следующий период по помеченным карточкам
    {
      if (loPickKatOS.GetFirst Pick  where (( cgPick_KatOs == Pick.wList)) <> tsOk)
        Message('Необходимо отметить карточки для перехода к новому отчетному периоду!', Information + CancelButton);
      else
        {
          if ( not boGetTune('OS.NOOTCHPERIODFIN') )
            Message('Переход на новый период'#13''+  'осуществляется совместно с бухконтуром...', Information + CancelButton);
          else
          {
            var boIsNextPeriod : boolean;
            vOtchPerPick.SetTiDk((TipDock MOD 100));
            boIsNextPeriod := vOtchPerPick.NextPeriod;
            Message('Переход на следующий отчетный'#13''+  'период ' + if(boIsNextPeriod, 'завершился.', 'не осуществился.'), Information + OkButton);
            RereadRecord;

            if boIsNextPeriod
            {
              CheckPeriod;
              iOS_Oper.ReScanOS_Oper(KatOS.NRec, word(0));
            }
          }

          // устанавливаем план счетов
          iPSManager.SetTunePlansSch(NastrOs.cPlansSch);
          iPSManager.Run_Events(NastrOS.cPlansSch);
          onChangePlansSch(NastrOs.cPlansSch);

          iOsRaznW.SetOsRaznParamsEdit(KatOs.TiDk, KatOs.nRec, KatOs.OtchPer, not IsProtected(#KatOs));
        }
    }

  cmValue20 :     // Откат части картотеки по Pick
    {
      if ( loPickKatOS.GetFirst Pick  where (( cgPick_KatOs == Pick.wList)) <> tsOk )
        Message('Необходимо отметить карточки для возврата к предыдущему периоду!', Information + CancelButton);
      else
        {
          if ( not boGetTune('OS.NOOTCHPERIODFIN') )
            Message('Переход на предыдущий период'+ ''#13'осуществляется совместно с бухконтуром...', Information + CancelButton);
          else
            {
              var bFoundOpers : boolean;
              bFoundOpers := false;
              vOtchPerPick.SetTiDk((TipDock MOD 100));

              if (not boGetTune('OS.LetBackWithOper'))
                {
                  loPickKatOS._LOOP Pick
                    {
                      if (vOtchPerOpers.FoundIKProvedOpers(loPickKatOS.Pick.cRec, false))
                        {
                          bFoundOpers := true;
                          break;
                        }
                    }
                }

              //если у помеченных ИК нет проведенных операций в текущем периоде
              if (not bFoundOpers)
                {
                  var boIsPrevPeriod : boolean;
                  boIsPrevPeriod := vOtchPerPick.PrevPeriod;
                  Message('Возврат на предыдущий отчетный'#13+ 'период ' + if(boIsPrevPeriod, 'завершился.', 'не осуществился.'), Information + OkButton);
                  CheckPeriod;
                }
              //если они есть - то выведем список этих операций по запросу
              else
                {
                  if (Message('У помеченных ИК обнаружены проведенные операции.'#13+
                              'Вывести список проведенных в периоде ИК операций ?',YesButton+NoButton+Confirmation) = cmYes)
                    {
                      loPickKatOS._LOOP Pick
                        vOtchPerOpers.FoundIKProvedOpers(loPickKatOS.Pick.cRec, true);

                      vOtchPerOpers.ShowProvedOpers;
                    }
                }

              ReReadRecord;
              iOS_Oper.ReScanOS_Oper(KatOS.NRec, word(0));
            }
        }
    }

  // Печать формы ОС-6 из картотеки по текущей карточки или по пометке
  cmValue11:
    {
      if UpDateTable
        iFormOS6.PrintFormOS6( TipDock
                             , KatOs.nRec
                             , NastrOs.nRec
                             , myPlansNo
                             , dGetTune('OS.OtchPeriod')
                             , (RecordExists Pick where (( cgPick_KatOs == Pick.wList )) = tsOk)
                             );
     } // cmValue11

  cmValue32 : // Печать помеченных простых инвентарных карточек
    {
      var iFormOS6a : FormOS6a;
      iFormOS6a.PrintFormOS6a(KatOs.nRec, TipDock, NastrOs.nRec, myPlansNo);
    } // cmValue32

  cmKauReff :
    ExecuteKauReff;

  cmValue21 :   //Заполнение амортизационной группы
    {
      if (loPickKatOS.RecordExists Pick
                      where ((cgPick_KatOs == Pick.wList)) <> tsOk)
        Message('Нет помеченных карточек.')
      else
        RunWindowModal(winFillAmGrPar);
    }//cmValue21

//------------------------------------------------------------------------------
  cmCheckField:
  {
    case CurField of
      #toc
    , #wPeriodOtch
    , #bPrLeaf:
      {
        Putcommand(cmValue24);
      }
    end;
  }

//------------------------------------------------------------------------------
  cmValue22 :   //Заполнение срока полезного использования
    {
      if (loPickKatOS.RecordExists Pick
                      where ((cgPick_KatOs == Pick.wList)) <> tsOk)
        Message('Нет помеченных карточек.')
      else
        {
          var Result : word;
          var wEdIz  : word;
          var wDlgEditPos : word;
          wDlgEditPos := cmYes;
          Result     := cmYes;
          wEdIz      := if(wGetTune('OS.SrokIspEdIzm') = 0, 12, 1);
          PushBounds(tbbyPrintOS6);
          PushBounds(tbbyFillAmGr);
          PushBounds(tbbyFillSrok);

          StartNewVisual(vtIndicatorVisual, vfTimer+vfBreak+vfConfirm, 'Заполнение срока полезного использования', GetSelCount(word(27)));

          _Loop Pick where ((cgPick_KatOs == Pick.wList))
            {
              if Not NextVisual
                Break;

              if Not pOsFun.CanEditOs(Pick.cRec, false)
                {
                  if ((wDlgEditPos <> cmOk) and (wDlgEditPos <> cmQuit))
                    wDlgEditPos := RunInterface( 'DlgMessage'
                                               , 'Настройка ограничивает Ваши права на редактирование'
                                               + ' объекта с ИН ' + pOsFun.GetKatOsInNum(Pick.cRec) + ''#13
                                               + 'Заполнение срока полезного использования для карточки не возможно.'#13
                                               + 'Продолжить ?'
                                               , '' );

                  case wDlgEditPos of
                    cmYes, cmOk : Continue;
                  else
                    Break;
                  end;
                }

              if (SpKatOs6.SrokIsp <> 0)
                {
                  if ((Result <> cmOk) and (Result <> cmQuit))
                    Result := RunInterface( 'DlgMessage'
                                          , 'У объекта с ИН ' + pOsFun.GetKatOsInNum(KatOs6.NRec)+''#13
                                          + 'срок полезного использования не равен 0.'#13
                                          + 'Произвести пересчет ?'
                                          , '' );

                  case Result of
                    cmNo, cmQuit : continue;
                    cmCancel     : break;
                  end;
                }

              if (VidNorma6.SrokIsp <> 0)
                {
                  set SpKatos6.SrokIsp := VidNorma6.SrokIsp * wEdIz
                                        + iAmort.GetComplementSrokIsp_RB(SpKatOS6.cKatOs
                                                                , SpKatOS6.cNastrOS
                                                                , ZeroDate
                                                                , Sub_Months(KatOS6.OtchPer,1));
                  if (Update current SpKatOs6 = tsOk) {};
                }
            }
          StopVisual('', 0);
          PopBounds(tbbyFillSrok);
          PopBounds(tbbyFillAmGr);
          PopBounds(tbbyPrintOS6);

          KillPick;
          Message('Заполнение срока полезного использования выполнено успешно.');
          RereadRecord(#Katos);
        }
    }//cmValue22

//------------------------------------------------------------------------------
  cmValue23 :  //Пересчет срока использования после поступления
    {
      if (loPickKatOS.RecordExists Pick
                      where ((cgPick_KatOs == Pick.wList)) <> tsOk)
        Message('Нет помеченных карточек.')
      else
        {
          if (Message('Произвести пересчет срока использования?', Confirmation + YesNo) <> cmYes)
            Exit;

          var dCurrPer, tmp_Date : date;
          var tmp_dBegArcDate : date;
          var tmp_dEndArcDate : date;
          var Result, wDlgEditPos : word;
          var TotalNum, OS_SrokIspCalcMetod : word;
          var doSrokUsed, kolNullSIznM, tmpIspCur : double;   // kolNullSIznM количество месяцев когда не считалась амортизация

          doSrokUsed := if (wGetTune('OS.SrokIspEdIzm') = 0, 1, 12);
          OS_SrokIspCalcMetod := wGetTune('OS.SrokIspCalcMetod');
          Result   := cmYes;
          wDlgEditPos := cmYes;
          TotalNum := 0;

          PushBounds(tbbyPrintOS6);
          PushBounds(tbbyFillAmGr);
          StartNewVisual(vtIndicatorVisual, vfTimer + vfBreak + vfConfirm, 'Пересчет срока использования', GetSelCount(word(27)));

          _Loop Pick where ((cgPick_KatOs == Pick.wList))
            {
              if Not NextVisual
                Break;

              if (SpKatOs6.IspCur <> 0)
                {
                  if ((Result <> cmOk) and (Result <> cmQuit))
                    Result := RunInterface( 'DlgMessage'
                                          , 'У объекта с ИН ' + pOsFun.GetKatOsInNum(KatOs6.NRec)+''#13
                                          + 'срок использования после поступления не равен 0.'#13
                                          + 'Произвести пересчет ?'
                                          , '' );

                  case Result of
                    cmNo, cmQuit : continue;
                    cmCancel     : break;
                  end;
                }

              if Not pOsFun.CanEditOs(Pick.cRec, false)
                {
                  if ((wDlgEditPos <> cmOk) and (wDlgEditPos <> cmQuit))
                    wDlgEditPos := RunInterface( 'DlgMessage'
                                               , 'Настройка ограничивает Ваши права на редактирование'
                                               + ' объекта с ИН ' + pOsFun.GetKatOsInNum(Pick.cRec)
                                               + '. Пересчет срока использования для карточки не возможн.'#13
                                               + 'Продолжить ?'
                                               , '' );

                  case wDlgEditPos of
                    cmYes, cmOk : Continue;
                  else
                    Break;
                  end;
                }

              // Вызов точки расширения пересчета срока использования после поступления
              // Должен вернуть FALSE если обработка проводилась. TRUE - если не проводилась.
              // Если есть обработчик, то дальше обработку не производим
              if ( not epRecalcSrokIsp (KatOs6.nRec, NastrOs.nRec) )
                {
                  TotalNum++;
                  continue;
                }

              dCurrPer := KatOs6.OtchPer;

              if ( LongInt(KatOS6.DatOk) > 0 )  // обязательно должна быть определена !!!
              {
                kolNullSIznM := 0.0;
                tmp_dBegArcDate := KatOS6.DatOk;

                if ( ( LongInt(KatOS6.DatEk) > 0 ) AND ( KatOS6.DatEk < KatOS6.DatOk ) )
                  tmp_dBegArcDate := KatOS6.DatEk;

                tmp_dBegArcDate := pOsFun.LastDayDate(tmp_dBegArcDate);
                tmp_Date        := tmp_dBegArcDate;
                tmp_dEndArcDate := pOsFun.LastDayDate(dCurrPer);

                if ( GetFirst FastFirstRow ArcIznosS   where ((KatOs6.nRec  == ArcIznosS.cKatOs   and
                                                              NastrOs.nRec == ArcIznosS.cNastrOs )) = tsOk )
                  tmp_Date := ArcIznosS.Data;

                if ( tmp_Date >= tmp_dBegArcDate )
                  tmp_Date := tmp_dBegArcDate;

                var do_SrokUsedOS: double;
                // РАСЧЕТЫ ДАТЫ С КОТОРОЙ НАЧАЛАСЬ СЧИТАТЬСЯ амортизация
                While ( tmp_Date < tmp_dEndArcDate )
                {
                  do_SrokUsedOS := iAmort.GetValue_SrokUsedOS( KatOS6.NRec, NastrOS.NRec, comp(0), tmp_Date);
                  if ( do_SrokUsedOS > 0.0 )
                    Break
                  else
                    tmp_Date := pOsFun.LastDayDate(Add_Months(tmp_Date,1));
                }

                tmp_dBegArcDate := tmp_Date;

                // Подсчет количества месяцев в которых не считается амортизация
                _LOOP ArcIznosS where ((KatOs6.nRec      == ArcIznosS.cKatOs   and
                                        NastrOs.nRec     == ArcIznosS.cNastrOs and
                                        tmp_dBegArcDate  << ArcIznosS.Data     and
                                        tmp_dEndArcDate  >> ArcIznosS.Data))
                {
                  if (OS_SrokIspCalcMetod = 0)    // без учета признака использования
                  {
                     if ( ArcIznosS.SIznM = 0 )
                      kolNullSIznM += if (iAmort.GetValue_SrokUsedOS( KatOS6.NRec, NastrOS.NRec, ArcIznosS.cMetod, ArcIznosS.Data) > 0, 0, 1);
                  }
                  else  // с учетом признака использования     102.154241
                  {
                     if (GetFirst IspOs_Syn where (( ArcIznosS.cIsp == IspOs_Syn.nRec)) = tsOk)
                       if Not ( (IspOs_Syn.AmOk = 0) OR (IspOs_Syn.AmOk = 2) )  // НЕТ начисления амортизации - да или суммой
                         kolNullSIznM += 1;
                       else if ( ArcIznosS.SIznM = 0 )
                          kolNullSIznM += if (iAmort.GetValue_SrokUsedOS( KatOS6.NRec, NastrOS.NRec, ArcIznosS.cMetod, ArcIznosS.Data) > 0, 0, 1);
                  }
                }

                tmpIspCur := ( Months_Between(pOsFun.FirstDayDate(tmp_dBegArcDate), pOsFun.FirstDayDate(dCurrPer)) - kolNullSIznM ) / doSrokUsed;

                if ( SpKatOs6.IspCur <> tmpIspCur )
                {
                  SpKatOs6.IspCur := tmpIspCur;
                  if (UpDate Current SpKatOS6 = tsOk) {};
                }
              }

              TotalNum++;
            }

          StopVisual('', 0);
          PopBounds(tbbyFillAmGr);
          PopBounds(tbbyPrintOS6);
          // KillPick;

          if (Result <> cmCancel)
            {
              if (TotalNum > 0)
                Message('Пересчет срока использования выполнен успешно.' + ''#13#3'Всего пересчитано ' + string(TotalNum) + ' ИК.')
              else
                Message('Пересчет срока использования не производился.');
            }

          RereadRecord(#Katos);
        }
    } //cmValue23


//------------------------------------------------------------------------------
  cmValue25 : // Печать состава объектов
    {
      PrintSostavOs();
    } //cmValue25

//------------------------------------------------------------------------------
  cmValue50 :    // Сравнение ОС по методам учета
  {
    RunWindowModal(wiCompareSpKatOs);
  } // cmValue50

  cmValue53 :   // Печать Амортизационной льготы
  {
      iPrnOSOper.PrintOSLgota( KatOs.nRec, NastrOS.NRec, 2);
  }

  cmPlansNo :       // перейти на другой план счетов
    if (UpdateTable)
      {
        iPSManager.PickPlansSch(myPlansNo);
        onChangePlansSch(myPlansNo);
      }

  cmColumnClicked :
    {
      var curArea     : longint;
      var TargetKlick : longint;
      TargetKlick := Target;
      curArea := CurFormatInArea(if (isTree,trDocument,pDocument));
      case TargetKlick of
         #KatOs.Innum  : {
                           if isTree
                             SetOrder(titrOrderInnum);
                           else
                             SetOrder(tibrOrderInnum);
                           SortRg := 0;
                         }
         #KatOs.NameOS : {
                           if isTree
                             SetOrder(titrOrderName);
                           else
                             SetOrder(tibrOrderName);
                           SortRg := 1;
                         }
         #KatOs.DatEk  : {
                           if isTree
                             SetOrder(titrOrderDatEk);
                           else
                             SetOrder(tibrOrderDatEk);
                           SortRg := 9;
                         }
         #KatOs.OtchPer  : {
                           SortRg := 10;
                           if isTree
                             SetOrder(titrOrderOtchPer);
                           else
                           {
                             abort; exit;
                           }
                         }
       else
         {
           abort; exit;
         }
      end;

      case (GetColumnSorting(curArea,TargetKlick)) of
        -1,0 : {
                 SetColumnSorting(curArea,TargetKlick,1);
                 SetTableBackOrderIn(#KatOs,false);
               }
         1   : {
                 SetColumnSorting(curArea,TargetKlick,-1);
                 SetTableBackOrderIn(#KatOs,true);
               }
      end;
      rescanPanel(#KatOs);
    }

  cmValue47 :
  {
    if (loPickKatOS.RecordExists Pick where (( cgPick_KatOs == Pick.wList )) <> tsOk)
    {
      if ( (loPickKatOS.Insert Pick
                    set Pick.wList   := cgPick_KatOs,
                        Pick.PickNum := 0,
                        Pick.PickKol := 0,
                        Pick.cRec    := KatOs.NRec) = tsOk ) {}
    }

    iSpecOb.PrintSpecObs;
    PutCommand(cmUnSelectAll);
  }

  cmValFld5:
    {
      var Mrk_OS: TPtr;
      var wDlgEditPos : word;
      wDlgEditPos:= cmYes;
      Mrk_OS  := InitMarker('MrkKatOS_byAmort', 8, 100, 100, False);
      ClearMarker(Mrk_OS);

      if ( loPickKatOS.RecordExists Pick where ((cgPick_KatOs == Pick.wList )) <> tsOK )
      {
        if pOsFun.CanEditOs(KatOs.NRec, true)
          InsertMarker(Mrk_OS, KatOs.NRec)
      }
      else
        {
          loPickKatOS._LOOP Pick
            if loPickKatOS.Pick.cRec <> comp(0)
            {
              if Not pOsFun.CanEditOs(loPickKatOS.Pick.cRec, false)
              {
                if ((wDlgEditPos <> cmOk) and (wDlgEditPos <> cmQuit))
                  wDlgEditPos := RunInterface( 'DlgMessage'
                                             , 'Настройка ограничивает Ваши права на редактирование'
                                             + ' объекта с ИН ' + pOsFun.GetKatOsInNum(loPickKatOS.Pick.cRec)
                                             + '. Расчет амортизаций будущих периодов для карточки не возможен.'#13
                                             + 'Продолжить ?'
                                             , '' );

                case wDlgEditPos of
                  cmYes, cmOk : Continue;
                else
                  Break;
                end;
              }

              InsertMarker(Mrk_OS, loPickKatOS.Pick.cRec);
            }
        }

      DoneMarker(Mrk_OS, 'MrkKatOS_byAmort');
      iOS_Oper.CalcFullAmort('MrkKatOS_byAmort');
      iOS_Oper.ReScanOS_Oper(KatOS.NRec, word(0));
    }

  cmValFld6:
    {
      var Mrk_OS: TPtr;
      var wDlgEditPos : word;
      wDlgEditPos:= cmYes;
      Mrk_OS  := InitMarker('MrkKatOS_byAmort', 8, 100, 100);
      ClearMarker(Mrk_OS);

      if ( loPickKatOS.RecordExists Pick where (( cgPick_KatOs == Pick.wList )) <> tsOK )
      {
        if pOsFun.CanEditOs(KatOs.NRec, true)
          InsertMarker(Mrk_OS, KatOs.NRec)
      }
      else
        {
          loPickKatOS._LOOP Pick
            if loPickKatOS.Pick.cRec <> comp(0)
            {
              if Not pOsFun.CanEditOs(loPickKatOS.Pick.cRec, false)
              {
                if ((wDlgEditPos <> cmOk) and (wDlgEditPos <> cmQuit))
                  wDlgEditPos := RunInterface( 'DlgMessage'
                                             , 'Настройка ограничивает Ваши права на редактирование'
                                             + ' объекта с ИН ' + pOsFun.GetKatOsInNum(loPickKatOS.Pick.cRec)
                                             + '. Удаление амортизаций будущих периодов для карточки невозможно.'#13
                                             + 'Продолжить ?'
                                             , '' );

                case wDlgEditPos of
                  cmYes, cmOk : Continue;
                else
                  Break;
                end;
              }

              InsertMarker(Mrk_OS, loPickKatOS.Pick.cRec);
            }
        }

      DoneMarker(Mrk_OS, 'MrkKatOS_byAmort');
      iOS_Oper.DelFutureAmort('MrkKatOS_byAmort');
      iOS_Oper.ReScanOS_Oper(KatOS.NRec, word(0));
    }

cmProtectedInput:
{
  if not isNew()
  {
    // для поля "Статус" в OsFun.CanEditOs нужна иная проверка, нежели iStatUser.Descr_Stat_D
    // т.к. могут быть установлены права на изменение статуса (ПИР 102.180440)
    if (CurField = #KatNotes.Name)
      pOsFun.SetMyDsk(lcFromStatField, true);
    else
    {
      pOsFun.SetMyDsk(lcFromStatField, false);

      if not pOsFun.CanEditOsArc(KatOs.NRec, true)
        Stop;
    }

    if (CurField = #KatNotes.Name)
    {
      if not pOsFun.CanEditOsArc(KatOs.NRec, false)
      {
        Stop;

        var boIsLock : boolean = false;

        pOsFun.GetMyDsk(lcLockedByStat, boIsLock);

        if boIsLock
        {
          #ifdef __TPR2__
          if (IsStatNastr) and (KatOs.cNote <> 0)
            if iStatUser.Descr_Stat_DS(true, wTipOper, CurDescr, KatOs.cNote)
            {
              boManualUnlock := true;
              ProtectRecord(#KatOs, false);
              ProcessCommand(cmPick);
            }
          #end
        }
      }
    }

    pOsFun.SetMyDsk(lcFromStatField, false);
    pOsFun.SetMyDsk(lcLockedByStat, false);
  }
}

cmSetCurTable:
{
  case Target of
    #AllMemo:
    {
      if (Not IsProtected(tnKatOs))
      {
        ClearFieldOption(#AllMemo.Mem, ofProtected);

        if ( not pOsFun.CanEditOs(KatOs.NRec, true) )
          SetProtectedKatOS;
      }
    }
  end;
}

cmValue4:  // 102.80463
  RunInterface('ViewKred', KatOS.NRec);

cmExtPoint1:
  epMenuRunPGK(coKatOs, KatOs.NRec, 1, 1);

cmExprFieldChanged :
{
  case CurField of
  //----------------
    #f_StoimOne :
      #SetOneCostValue(Stoim)
  //----------------
    #f_SumIznOne:
      #SetOneCostValue(SumIzn)
  //----------------
    #f_SIznMOne:
      #SetOneCostValue(SIznM)
  //----------------
    #f_StoimSum :
      #SetCommonCostValue(Stoim)
  //----------------
    #f_SumIznSum:
      #SetCommonCostValue(SumIzn)
  //----------------
    #f_SIznMSum:
      #SetCommonCostValue(SIznM)

  //----------------  Резерв
    #f_PerStoimOne :
      #SetOneCostValue(PerStoim)
    #f_PerStoimSum :
      #SetCommonCostValue(PerStoim)
    #f_PerSumIznOne :
      #SetOneCostValue(PerSumIzn)
    #f_PerSumIznSum :
      #SetCommonCostValue(PerSumIzn)
#ifdef __TPR2__
    #f_SumLikvidOne :
      #SetOneCostValue(SumLikvid)
    #f_SumLikvidSum :
      #SetCommonCostValue(SumLikvid)
#end

  end
}

cmInsLowLevel:     // создать по шаблону
{
 if pOsFun.CheckEditKatOS(1)
 {
   if (RunInterface(TemplateOS, wTip+200, cgiPick, cCurTemplate) <> cmCancel)
   {
     isUseTemplate:= true;
     ProcessCommand (cmInsert);
   }
   else
    isUseTemplate:= false;
 }
}

// Перед удалением снимем блокировку
cmDelete:
{
  if (TipDock=115) OR (TipDock=116) or (TipDock=cgOs_157_Rsrv)
    if (IsProtected(#KatOs))
    {
      ProtectRecord(#KatOs,false);
      ProtectRecord(#SpKatOs,false);
    }
}

//------------------------------------------------------------------------------
cmEditBudget :     // Посмотреть архив
{
  if (UpDateTable)
  {
    RunInterface('GetArc', wTip, Katos.Nrec);

    RereadRecord;
    SetColumnTitleAndHelpLine;
  }
}

cmVal1:
  if (UpdateTable)
  {
    RunInterface('SimpleWayToRunAlgorithm', coGetTune('Fin.OS.LocMnu.KatOS.DopFunc01'), 0, KatOs.nRec, 0);
    ReReadRecord(#KatOs);
  }

cmVal2:
  if (UpdateTable)
  {
    RunInterface('SimpleWayToRunAlgorithm', coGetTune('Fin.OS.LocMnu.KatOS.DopFunc02'), 0, KatOs.nRec, 0);
    ReReadRecord(#KatOs);
  }

cmVal3:
  if (UpdateTable)
  {
    RunInterface('SimpleWayToRunAlgorithm', coGetTune('Fin.OS.LocMnu.KatOS.DopFunc03'), 0, KatOs.nRec, 0);
    ReReadRecord(#KatOs);
  }

cmVal4:
  if (UpdateTable)
  {
    RunInterface('SimpleWayToRunAlgorithm', coGetTune('Fin.OS.LocMnu.KatOS.DopFunc04'), 0, KatOs.nRec, 0);
    ReReadRecord(#KatOs);
  }

cmVal5:
{
  var CurCard: comp;
  var isNoInsert: boolean;
  var boInsNull: boolean;
  var isLoadPicked: boolean;

  Delete all mt_PrintTable;
  delete all mt_PrintCardRow;

  TreePushPos(trForm1);
  PushPos(#KatOs);
  CurCard := KatOs.NRec;
  isLoadPicked := false;
  isNoInsert   := true;

  Case isTree of
    True:
    {
      if TreeGetFirstEx(trDocument)
        do
        {
          if Vbr = 'V'
          {
            isLoadPicked := true;
            break;
          }
        }
        while TreeGetNextEx(trDocument);
    }
    False:
    {
      #ifdef GAL9_1
      if BrowseGetFirst(pDocument)
        do
        {
          if Vbr = 'V'
          {
            isLoadPicked := true;
            break;
          }
        }
        while BrowseGetNext(pDocument);
      #end
    }
  end;

  _loop SpForm
  {
    if not isLoadPicked
    {
      if SpForm.cKatOs <> CurCard
        Continue;
    }
    else
      if RecordExists Pick where((cgPick_KatOs == Pick.wList and
                                  SpForm.cKatOs == Pick.cRec)) <> tsOk
        continue;

    if GetFirst KatOs where((SpForm.cKatOs == KatOs.NRec)) <> tsOk {}

    ClearBuffer(#mt_PrintTable);
    mt_PrintTable.StrName    := KatForm.ParamName;
    mt_PrintTable.ParamNum   := KatForm.ParamNum;
    mt_PrintTable.FilialNo   := KatForm.FilialNo;
    mt_PrintTable.InvNum     := Katos.InNum;
    mt_PrintTable.NameOs     := Katos.NameOs;
    mt_PrintTable.DATOK      := Katos.DATOK;
    insert current mt_PrintTable;
    if isNoInsert
      isNoInsert := false;
  }


  if TreeGetFirstEx(trForm1)
    do
    {
      boInsNull := true;

      if (GetFirst SpForm_Tr = tsOk)
        do
        {
          if not isLoadPicked
          {
            if SpForm_Tr.cKatOs <> CurCard
              Continue;
          }
          else
            if RecordExists Pick where((cgPick_KatOs     == Pick.wList and
                                        SpForm_Tr.cKatOs == Pick.cRec)) <> tsOk
              continue;

          if GetFirst KatOs where ((SpForm_Tr.cKatOs == KatOs.NRec)) <> tsOk
            continue;

          boInsNull := false;

          ClearBuffer(#mt_PrintCardRow);
          mt_PrintCardRow.StrName    := KatForm_Tr.ParamName;
          mt_PrintCardRow.ParamNum   := KatForm_Tr.ParamNum;
          mt_PrintCardRow.FilialNo   := KatForm_Tr.FilialNo;
          mt_PrintCardRow.InvNum     := Katos.InNum;
          mt_PrintCardRow.NameOs     := Katos.NameOs;
          mt_PrintCardRow.DATOK      := Katos.DATOK;
          mt_PrintCardRow.Stoim      := Round(SpKatOs.Stoim, 2);
          mt_PrintCardRow.Ammort     := Round(SpKatos.SumIzn + SpKatos.SiznM, 2);
          mt_PrintCardRow.TreeLVL    := TreeLevel(trForm1);
          mt_PrintCardRow.isHaveCard := True;
          insert current mt_PrintCardRow;

          if isNoInsert
            isNoInsert := false;
        }
        while GetNext SpForm_Tr = tsOk;

      if boInsNull
      {
        ClearBuffer(#mt_PrintCardRow);
        mt_PrintCardRow.StrName    := KatForm_Tr.ParamName;
        mt_PrintCardRow.ParamNum   := KatForm_Tr.ParamNum;
        mt_PrintCardRow.FilialNo   := KatForm_Tr.FilialNo;
        mt_PrintCardRow.TreeLVL    := TreeLevel(trForm1);
        mt_PrintCardRow.isHaveCard := False;
        insert current mt_PrintCardRow;
      }
    }
    while TreeGetNextEx(trForm1);

  PopPos(#KatOs);
  TreePopPos(trForm1);

  if isNoInsert
  {
    Message('Нет данных для печати!', Warning);
    Exit;
  }

  RunFReport(PrintFR_RowCard, '', False);
}

end;

End.

//МЕНЮ ДЛЯ KATOS.VIP
! ОС - Browse
katos_HotKeys_OS Menu
{
- 'Фильтр...', cmFilterSave, 'Установка ограничений при просмотре инвентарных карточек', hcOsVFiltr, 'Alt+B', kbAltB, sci1Esc,,,,bmpBuhFilter;
- 'Сортировка...', cmDocBas, 'Установка режима сортировки при просмотре', hcOsSort, 'Alt+D', kbAltD, sci1Esc,,,,bmpSort;
-----------;
-'Создать инвентарную карточку по шаблону',   cmInsLowLevel, 'Создать инвентарную карточку по выбранному шаблону', , 'Ctrl+F7', kbCtrlF7, sci1Esc;
-----------;
- 'Смена метода учета', cmIEHist, 'Смена метода учета', hcOSChanNastrOs, 'Alt+H', kbAltH, sci1Esc,,,,bmpMetodUh;
- 'Смена плана счетов', cmPlansNo, 'Смена текущего плана счетов', hcKonsM1PlanSch, 'Alt+P', kbAltP, sci1Esc,,,,bmpPlansNo;
-----------;
- 'Режим представления: линейный/иерархический', cmAccording, 'Режим представления: линейный/иерархический', hcOSChTreeBrowse, 'Alt+S', kbAltS, sci1Esc,,,,bmpTree_brows;
-----------;
= 'Печать', '', hcNoContext, sci1Esc,,,bmpPrintDoc;
  {
  - 'Печать реестра инвентарных карточек',             cmPrintDoc, 'Печать реестра инвентарных карточек', hcOSPrnCard, 'Ctrl+P', kbCtrlP, sci1Esc;
  - 'Печать реестра операций по картотеке',             cmValue39, 'Печать реестра операций по выбранным инвентарным карточкам', hcOSPrnCard, , , sci1Esc;
  - 'Печать ведомостей наличия и износа',               cmValue6,  'Печать ведомостей наличия и износа', hcOSPrnQuickVed, , , sci1Esc;
  - 'Печать регистра информации об объекте',            cmValue15, 'Печать регистра информации об объекте', hcOSPrnNalRegistr, '', kbNoKey, sci1Esc;
  - 'Печать состава объектов',                          cmValue25, 'Печать состава объектов по материальным ценностям и услугам', hcOSViewSosnav, , , sci1Esc;
  - 'Печать инвентарной карточки',                      cmValue11, 'Печать инвентарной карточки', hcOSPrintIKexactdate, , , sci1Esc;
  - 'Печать инвентарных карточек группового учета',     cmValue32, 'Печать инвентарных карточек группового учета', hcOSPrintIKexactdate, '', kbNoKey, sci1Esc;
  - 'Печать карточек не в текущем отчетном периоде',    cmvalue12, 'Печать карточек не в текущем отчетном периоде', hcOSPrintIKPeriodError, '', kbNoKey, sci1Esc;
  - 'Печать данных по спец. оборудованию',              cmValue47, 'Печать данных по спец. оборудованию', , , , sci1Esc;
  - 'Печать ведомости амортизационных льгот',           cmValue53, 'Печать ведомости амортизационных льгот', hcOS_PrintVedAmortLgot, '', kbNoKey, sci1Esc;
  - 'Печать строк формы 11 с выбранными инвентарными карточками', cmVal5, '', hcNoContext,,, sci1Esc;
  -----------;
  - 'Реестр картотеки (настраиваемый)', cmValFld19, 'Реестр картотеки (настраиваемый)', , '', , sci1Esc;
  }
-----------;
- 'Формирование сложного объекта', cmValue8, 'Формирование сложного объекта из простого', hcOSstrukturSlojn, , , sci1Esc;
-------------;
- 'История изменений архивных данных', cmValue7, 'Просмотр истории изменений архивных данных по карточке', hcOSPrnHistory, , , sci1Esc;
-------------;
- 'Сравнение инвентарных карточек по методам учета', cmValue50, 'Сравнение ИК по методам учета', , , , sci1Esc;
-----------;
- 'Переход к новому отчетному периоду', cmValue19, 'Переход к новому отчетному периоду выбранных инвентарных объектов', hcOSNewPickPeriod, , , sci1Esc;
- 'Возврат к предыдущему отчетному периоду', cmValue20, 'Возврат к предыдущему отчетному периоду выбранных инвентарных объектов', hcOSOldPickPeriod, , , sci1Esc;
-----------;
- 'Перевод карточек в архив', cmValue17, 'Перевод выбывших карточек в архив', hcOSKatosToArc, , , sci1Esc;
- 'Переход в архив выбывших', cmValue2, 'Переключиться на архив выбывших', , , , sci1Esc;
-----------;
- 'Внешняя классификация', cmPickClass, 'Внешняя классификация', hcGkatalM1ExtClass, 'Alt+C', kbAltC, sci1Esc,,,,bmpClassifier;
- 'Внешние атрибуты',      cmPickAttr,  'Внешние атрибуты',      hcGkatalM1Attr,     'Alt+A', kbAltA, sci1Esc,,,,bmpAttribute;
- 'Внешние КАУ',           cmKauReff,   'Внешние коды аналитического учета', , 'Alt+T', kbAltT, sci1Esc;
-------------;
- 'Экспорт', cmExp, 'Экспорт документов', , , , sci1Esc,,,,bmpExpDoc;
- 'Импорт',  cmImp, 'Импорт документов', , , ,  sci1Esc,,,,bmpImpDoc;
- 'Пометка из внешнего источника', cmPickKod, 'Выбор ИК на основании данных внешнего источника', ,'',,sci1Esc;
-----------;
= 'Переоценка', '', hcNoContext, sci1Esc;
  {
  - 'Ввод коэффициентов переоценки', cmValue55, 'Ввод коэффициентов переоценки', hcOSM1PereocCoeff, , , sci1Esc;
  - 'Применить коэффициенты для выделенных записей', cmMulSelDO, 'Применить коэффициенты для выделенных записей',hcOSLocPereoCoeffApply, 'Ctrl+I', kbCtrlI, sci1Esc;
  - 'Отмена прямой переоценки для выделенных записей', cmIerarchy, 'Отмена прямой переоценки для выделенных записей',hcOSLocPereoCoeffApply, 'Ctrl+U', kbCtrlU, sci1Esc;
  - 'Печать ведомости переоценки прямым методом', cmValue56, 'Печать ведомости переоценки прямым методом', , , , sci1Esc;
  }
-----------;
= 'Дополнительно', '', hcNoContext, sci1Esc;
  {
  - 'Заполнение амортизационной группы', cmValue21, 'Заполнение амортизационной группы по данным из ОКОФ по текущему методу учета', hcOSBInvKart, '', kbNoKey, sci1Esc;
  - 'Заполнение срока полезного использования', cmValue22, 'Заполнение срока полезного использования по текущему методу учета', hcNoContext, '', kbNoKey, sci1Esc;
  -----------;
  - 'Пересчет сумм по методам учета', cmValue10, 'Пересчет сумм по методам учета', hcOSMRecalcSumsOnMethods, , , sci1Esc;
  - 'Пересчет срока использования', cmValue23, 'Пересчет срока использования после поступления по помеченным карточкам', hcOSBInvKart, '', kbNoKey, sci1Esc;
  - 'Пересчет накопленной переоценки стоимости и износа', cmValue36, 'Пересчет накопленной переоценки стоимости и износа', hcNoContext, '', kbNoKey, sci1Esc;
  -----------;
  - 'Тиражирование внешней классификации', cmValue5, 'Тиражирование внешней классификации', hcOSTirExtClass, , , sci1Esc;
  - 'Тиражирование внешних атрибутов', cmValue37, 'Тиражирование внешних атрибутов', hcNoContext, , , sci1Esc;
  - 'Тиражирование характеристики', cmValue35, 'Тиражирование характеристики', hcNoContext, , , sci1Esc;
  - 'Тиражирование драгметаллов', cmValue34, 'Тиражирование драгметаллов', hcNoContext, , , sci1Esc;
  - 'Тиражирование источников финансирования', cmValue54, 'Тиражирование источников финансирования', hcNoContext, , , sci1Esc;
  - 'Тиражирование прикрепленных документов', cmValue57, 'Тиражирование прикрепленных документов', hcNoContext, , , sci1Esc;
  -----------;
  - 'Расчет амортизаций будущих периодов', cmValFld5,' Расчет амортизаций будущих периодов до полного износа для выбранных объектов ОС', , , , sci1Esc;
  - 'Удаление амортизаций будущих периодов', cmValFld6,' Удаление рассчитанных амортизаций будущих периодов для выбранных объектов ОС', , , , sci1Esc;
  -----------;
  - 'Объект ОС в залоге', cmValue4, 'Просмотр списка кредитов, в которых в качестве залога участвует ОС',,,, sci1Esc;
  -----------;
  - 'Групповая замена привязки карточек к налоговым группам', cmValFld18, 'Групповая замена привязки карточек к налоговым группам', , '', , sci1Esc;
  -----------;
  }
}

! НМА - Browse
katos_HotKeys_NMA Menu
{
- 'Фильтр...', cmFilterSave, 'Установка ограничений при просмотре инвентарных карточек', hcOsVFiltr, 'Alt+B', kbAltB, sci1Esc,,,,bmpBuhFilter;
- 'Сортировка...', cmDocBas, 'Установка режима сортировки при просмотре', hcOsSort, 'Alt+D', kbAltD, sci1Esc,,,,bmpSort;
-----------;
-'Создать инвентарную карточку по шаблону',   cmInsLowLevel, 'Создать инвентарную карточку по выбранному шаблону', , 'Ctrl+F7', kbCtrlF7, sci1Esc;
-----------;
- 'Смена метода учета', cmIEHist, 'Смена метода учета', hcOSChanNastrOs, 'Alt+H', kbAltH, sci1Esc,,,,bmpMetodUh;
- 'Смена плана счетов', cmPlansNo, 'Смена текущего плана счетов', hcKonsM1PlanSch, 'Alt+P', kbAltP, sci1Esc,,,,bmpPlansNo;
-----------;
- 'Режим представления: линейный/иерархический', cmAccording, 'Режим представления: линейный/иерархический', hcOSChTreeBrowse, 'Alt+S', kbAltS, sci1Esc,,,,bmpTree_brows;
-----------;
= 'Печать', '', hcNoContext, sci1Esc,,,bmpPrintDoc;
  {
  - 'Печать реестра инвентарных карточек',           cmPrintDoc,'Печать реестра инвентарных карточек', hcOSPrnCard, 'Ctrl+P', kbCtrlP, sci1Esc;
  - 'Печать реестра операций по картотеке',          cmValue39, 'Печать реестра операций по выбранным инвентарным карточкам', hcOSPrnCard, , , sci1Esc;
  - 'Печать ведомостей наличия и износа',            cmValue6,  'Печать ведомостей наличия и износа', hcOSPrnQuickVed, , , sci1Esc;
  - 'Печать регистра информации об объекте',         cmValue15, 'Печать регистра информации об объекте', hcOSPrnNalRegistr, '', kbNoKey, sci1Esc;
  - 'Печать состава объектов',                       cmValue25, 'Печать состава объектов по материальным ценностям и услугам', hcOSViewSosnav, , , sci1Esc;
  - 'Печать инвентарной карточки',                   cmValue11, 'Печать инвентарной карточки', hcOSPrintIKexactdate, , , sci1Esc;
  - 'Печать карточек не в текущем отчетном периоде', cmvalue12, 'Печать карточек не в текущем отчетном периоде', hcOSPrintIKPeriodError, '', kbNoKey, sci1Esc;
  - 'Печать ведомости амортизационных льгот',        cmValue53, 'Печать ведомости амортизационных льгот', hcOS_PrintVedAmortLgot, '', kbNoKey, sci1Esc;
  }
-----------;
- 'Формирование сложного объекта', cmValue8, 'Формирование сложного объекта из простого', hcOSstrukturSlojn, , , sci1Esc;
-----------;
- 'История изменений архивных данных', cmValue7, 'Просмотр истории изменений архивных данных по карточке', hcOSPrnHistory, , , sci1Esc;
-------------;
- 'Сравнение инвентарных карточек по методам учета', cmValue50, 'Сравнение ИК по методам учета', , , , sci1Esc;
-----------;
- 'Переход к новому отчетному периоду', cmValue19, 'Переход к новому отчетному периоду выбранных инвентарных объектов', hcOSNewPickPeriod, , , sci1Esc;
- 'Возврат к предыдущему отчетному периоду', cmValue20, 'Возврат к предыдущему отчетному периоду выбранных инвентарных объектов', hcOSOldPickPeriod, , , sci1Esc;
-----------;
- 'Перевод карточек в архив', cmValue17, 'Перевод выбывших карточек в архив', hcOSKatosToArc, , , sci1Esc;
- 'Переход в архив выбывших', cmValue2, 'Переключиться на архив выбывших', , , , sci1Esc;
-----------;
- 'Внешняя классификация', cmPickClass, 'Внешняя классификация', hcGkatalM1ExtClass, 'Alt+C', kbAltC, sci1Esc,,,,bmpClassifier;
- 'Внешние атрибуты',      cmPickAttr,  'Внешние атрибуты',      hcGkatalM1Attr,     'Alt+A', kbAltA, sci1Esc,,,,bmpAttribute;
- 'Внешние КАУ',           cmKauReff,   'Внешние коды аналитического учета', , 'Alt+T', kbAltT, sci1Esc;
-------------;
- 'Экспорт', cmExp, 'Экспорт документов', , , , sci1Esc,,,,bmpExpDoc;
- 'Импорт',  cmImp, 'Импорт документов', , , ,  sci1Esc,,,,bmpImpDoc;
- 'Пометка из внешнего источника', cmPickKod, 'Выбор ИК на основании данных внешнего источника', ,'',,sci1Esc;
-----------;
= 'Дополнительно', '', hcNoContext, sci1Esc;
  {
  - 'Заполнение амортизационной группы', cmValue21, 'Заполнение амортизационной группы по данным из ОКОФ по текущему методу учета', hcNoContext, '', kbNoKey, sci1Esc;
  - 'Заполнение срока полезного использования', cmValue22, 'Заполнение срока полезного использования по текущему методу учета', hcNoContext, '', kbNoKey, sci1Esc;
  -----------;
  - 'Пересчет сумм по методам учета', cmValue10, 'Пересчет сумм по методам учета', hcOSMRecalcSumsOnMethods, , , sci1Esc;
  - 'Пересчет срока использования', cmValue23, 'Пересчет срока использования после поступления по помеченным карточкам', hcNoContext, '', kbNoKey, sci1Esc;
  -----------;
  - 'Тиражирование внешней классификации', cmValue5, 'Тиражирование внешней классификации', hcOSTirExtClass, , , sci1Esc;
  - 'Тиражирование внешних атрибутов', cmValue37, 'Тиражирование внешних атрибутов', hcNoContext, , , sci1Esc;
  - 'Тиражирование характеристики', cmValue35, 'Тиражирование характеристики', hcNoContext, , , sci1Esc;
  - 'Тиражирование источников финансирования', cmValue54, 'Тиражирование источников финансирования', hcNoContext, , , sci1Esc;
  - 'Тиражирование прикрепленных документов', cmValue57, 'Тиражирование прикрепленных документов', hcNoContext, , , sci1Esc;
  -----------;
  - 'Расчет амортизаций будущих периодов', cmValFld5, 'Расчет амортизаций будущих периодов до полного износа для выбранных объектов НМА', , , , sci1Esc;
  - 'Удаление амортизаций будущих периодов', cmValFld6, 'Удаление рассчитанных амортизаций будущих периодов для выбранных объектов НМА', , , , sci1Esc;
  -----------;
  - 'Групповая замена привязки карточек к налоговым группам', cmValFld18, 'Групповая замена привязки карточек к налоговым группам', , , , sci1Esc;
  -----------;
  }
}

! ОС - Browse - Архивная
katos_HotKeys_OS_Ar Menu
{
- 'Фильтр...', cmFilterSave, 'Установка ограничений при просмотре инвентарных карточек', hcOsVFiltr, 'Alt+B', kbAltB, sci1Esc,,,,bmpBuhFilter;
- 'Сортировка...', cmDocBas, 'Установка режима сортировки при просмотре', hcOsSort, 'Alt+D', kbAltD, sci1Esc,,,,bmpSort;
-----------;
- 'Смена метода учета', cmIEHist, 'Смена метода учета', hcOSChanNastrOs, 'Alt+H', kbAltH, sci1Esc,,,,bmpMetodUh;
- 'Смена плана счетов', cmPlansNo, 'Смена текущего плана счетов', hcKonsM1PlanSch, 'Alt+P', kbAltP, sci1Esc,,,,bmpPlansNo;
-----------;
- 'Режим представления: линейный/иерархический', cmAccording, 'Переключение режима панели "список-иерархия"', hcOSChTreeBrowse, 'Alt+S', kbAltS, sci1Esc,,,,bmpTree_brows;
-----------;
= 'Печать', '', hcNoContext, sci1Esc,,,bmpPrintDoc;
  {
  - 'Печать реестра инвентарных карточек', cmPrintDoc, 'Печать реестра инвентарных карточек', hcOSPrnCard, 'Ctrl+P', kbCtrlP, sci1Esc;
  - 'Печать реестра операций по картотеке', cmValue39, 'Печать реестра операций по выбранным инвентарным карточкам', hcOSPrnCard, , , sci1Esc;
  - 'Печать ведомостей наличия и износа', cmValue6, 'Печать ведомостей наличия и износа', hcOSPrnQuickVed, , , sci1Esc;
  - 'Печать состава объектов', cmValue25, 'Печать состава объектов по материальным ценностям и услугам',hcOSViewSosnav, , , sci1Esc;
  - 'Печать инвентарной карточки', cmValue11, 'Печать инвентарной карточки', hcOSPrintIKexactdate, , , sci1Esc;
  - 'Печать инвентарных карточек группового учета', cmValue32, 'Печать инвентарных карточек группового учета', hcOSPrintIKexactdate, '', kbNoKey, sci1Esc;
  - 'Печать карточек не в текущем отчетном периоде', cmvalue12, 'Печать карточек не в текущем отчетном периоде', hcOSPrintIKPeriodError, '', kbNoKey, sci1Esc;
  - 'Печать ведомости амортизационных льгот', cmValue53, 'Печать ведомости амортизационных льгот', hcOS_PrintVedAmortLgot, '', kbNoKey, sci1Esc;
  }
-----------;
- 'История изменений архивных данных', cmValue7, 'Просмотр истории изменений архивных данных по карточке', hcOSPrnHistory, , , sci1Esc;
-----------;
- 'Удаление карточек из настройки формы 11', cmValue46, 'Удаление карточек из настройки формы 11', , , , sci1Esc;
-----------;
- 'Перевод карточек из архива в картотеку', cmValue17, 'Перевод карточек из архива в картотеку', hcOSArcToKatos, , , sci1Esc;
- 'Переход в инвентарную картотеку', cmValue2, 'Переключиться в инвентарную картотеку', , , , sci1Esc;
-----------;
- 'Внешняя классификация', cmPickClass, 'Внешняя классификация', hcGkatalM1ExtClass, 'Alt+C', kbAltC, sci1Esc,,,,bmpClassifier;
- 'Внешние атрибуты',      cmPickAttr,  'Внешние атрибуты',      hcGkatalM1Attr,     'Alt+A', kbAltA, sci1Esc,,,,bmpAttribute;
- 'Внешние КАУ',           cmKauReff,   'Внешние коды аналитического учета', , 'Alt+T', kbAltT, sci1Esc;
}

! НМА - Browse - Архивная
katos_HotKeys_NMA_AR Menu
{
- 'Фильтр...', cmFilterSave, 'Установка ограничений при просмотре инвентарных карточек', hcOsVFiltr, 'Alt+B', kbAltB, sci1Esc,,,,bmpBuhFilter;
- 'Сортировка...', cmDocBas, 'Установка режима сортировки при просмотре', hcOsSort, 'Alt+D', kbAltD, sci1Esc,,,,bmpSort;
-----------;
- 'Смена метода учета', cmIEHist, 'Смена метода учета', hcOSChanNastrOs, 'Alt+H', kbAltH, sci1Esc,,,,bmpMetodUh;
- 'Смена плана счетов', cmPlansNo, 'Смена текущего плана счетов', hcKonsM1PlanSch, 'Alt+P', kbAltP, sci1Esc,,,,bmpPlansNo;
-----------;
- 'Режим представления: линейный/иерархический', cmAccording, 'Переключение режима панели "список-иерархия"', hcOSChTreeBrowse, 'Alt+S', kbAltS, sci1Esc,,,,bmpTree_brows;
-----------;
= 'Печать', '', hcNoContext, sci1Esc,,,bmpPrintDoc;
  {
  - 'Печать реестра инвентарных карточек', cmPrintDoc, 'Печать реестра инвентарных карточек', hcOSPrnCard, 'Ctrl+P', kbCtrlP, sci1Esc;
  - 'Печать реестра операций по картотеке', cmValue39, 'Печать реестра операций по выбранным инвентарным карточкам', hcOSPrnCard, , , sci1Esc;
  - 'Печать ведомостей наличия и износа', cmValue6, 'Печать ведомостей наличия и износа', hcOSPrnQuickVed, , , sci1Esc;
  - 'Печать состава объектов', cmValue25, 'Печать состава объектов по материальным ценностям и услугам', hcOSViewSosnav, , , sci1Esc;
  - 'Печать инвентарной карточки', cmValue11, 'Печать инвентарной карточки', hcOSPrintIKexactdate, , , sci1Esc;
  - 'Печать ведомости амортизационных льгот', cmValue53, 'Печать ведомости амортизационных льгот', hcOS_PrintVedAmortLgot, '', kbNoKey, sci1Esc;
  }
-----------;
- 'История изменений архивных данных', cmValue7, 'Просмотр истории изменений архивных данных по карточке', hcOSPrnHistory, , , sci1Esc;
-----------;
- 'Удаление карточек из настройки формы 11', cmValue46, 'Удаление карточек из настройки формы 11', , , , sci1Esc;
-----------;
- 'Перевод карточек из архива в картотеку', cmValue17, 'Перевод карточек из архива в картотеку', hcOSArcToKatos, , , sci1Esc;
- 'Переход в инвентарную картотеку', cmValue2, 'Переключиться в инвентарную картотеку', , , , sci1Esc;
-----------;
- 'Внешняя классификация', cmPickClass, 'Внешняя классификация', hcGkatalM1ExtClass, 'Alt+C', kbAltC, sci1Esc,,,,bmpClassifier;
- 'Внешние атрибуты',      cmPickAttr,  'Внешние атрибуты',      hcGkatalM1Attr,     'Alt+A', kbAltA, sci1Esc,,,,bmpAttribute;
- 'Внешние КАУ',           cmKauReff,   'Внешние коды аналитического учета', , 'Alt+T', kbAltT, sci1Esc;
}


! ОС - Edit
katos_HotKeys_OS_Win Menu
{
- 'Смена метода учета', cmIEHist, 'Смена метода учета', hcOSChanNastrOs, 'Alt+H', kbAltH, sci1Esc,,,,bmpMetodUh;
- 'Смена плана счетов', cmPlansNo, 'Смена текущего плана счетов', hcKonsM1PlanSch, 'Alt+P', kbAltP, sci1Esc,,,,bmpPlansNo;
-----------;
-'Создать инвентарную карточку по шаблону',   cmInsLowLevel, 'Создать инвентарную карточку по выбранному шаблону', , 'Ctrl+F7', kbCtrlF7, sci1Esc;
-----------;
- 'Печать инвентарной карточки', cmPrintDoc, 'Печать инвентарной карточки', hcOSPrmInvCard, 'Ctrl+P', kbCtrlP, sci1Esc,,,,bmpPrintDoc;
- 'Печать реестра операций по карточке',   cmValue39, 'Печать реестра операций по объекту ОС (НМА)', hcOSPrnCard, , , sci1Esc;
- 'Печать регистра информации об объекте', cmValue16, 'Печать регистра информации об объекте', hcOSPrnNalRegistr, '', kbNoKey, sci1Esc;
-----------;
- 'Тиражирование инвентарных карточек', cmNal, 'Тиражирование инвентарных карточек', hcOSSCardTirag,'Alt+F', kbAltF, sci1Esc;
- 'Отмена последнего тиражирования', cmDocBas, 'Отмена последнего тиражирования', hcOSSDelCardTirag,'Alt+D', kbAltD, sci1Esc;
-----------;
- 'Расчет амортизации за отчетный период', cmAccording, 'Расчет амортизации для карточки за текущий отчетный период', hcOSSAmortCalc, 'Alt+S', kbAltS, sci1Esc;
- 'Пересчет сумм по сложному объекту', cmValue17, 'Пересчет сумм по сложному объекту', hcOSRecalcComplex, , , sci1Esc;
-----------;
- 'Групповая замена поля в карточках', cmValue18, 'Групповая замена значения поля в карточках', hcOSGrZam, , , sci1Esc;
-----------;
- 'Привязка карточки к налоговым группам', cmLegend, 'Привязка карточки к налоговым группам', hcOSNMAM2KatNalGr, 'Alt+U', kbAltU, sci1Esc;
- 'Привязка ИК к строкам формы 11', cmValue13, 'Привязка инвентарной карточки к строкам формы 11', hcOSConCardToF11, , , sci1Esc;
----------;
- 'Перечень серийных номеров', cmXchangeMCSetup, 'Список серийных номеров МЦ привязанных к карточке', , , , sci1Esc;
-----------;
- 'Внешняя классификация', cmPickClass, 'Внешняя классификация', hcGkatalM1ExtClass, 'Alt+C', kbAltC, sci1Esc,,,,bmpClassifier;
- 'Внешние атрибуты',      cmPickAttr,  'Внешние атрибуты',      hcGkatalM1Attr,     'Alt+A', kbAltA, sci1Esc,,,,bmpAttribute;
- 'Внешние КАУ',           cmKauReff,   'Внешние коды аналитического учета', , 'Alt+T', kbAltT, sci1Esc;
-----------;
- 'Просмотр архива по карточке', cmEditBudget, 'Просмотр архива износа и изменений по карточке', hcOsViewArc, 'Ctrl+B', kbCtrlB, sci1Esc;
- 'Дополнительная информация по карточке', cmAttrib, 'Дополнительная информация по карточке', hcOSFInvKartDop, 'Ctrl+Enter', kbCtrlEnter, sci1Esc,,,,bmpDopInfo;
-----------;
- 'Копировать данные из другого метода учета', cmValue40, 'Копировать данные из другого метода учета', hcOSRecalcComplex, , , sci1Esc;
}


! ОС - Edit - Архивная
katos_HotKeys_OS_Arc_Win Menu
{
- 'Смена метода учета', cmIEHist, 'Смена метода учета', hcOSChanNastrOs, 'Alt+H', kbAltH, sci1Esc,,,,bmpMetodUh;
- 'Смена плана счетов', cmPlansNo, 'Смена текущего плана счетов', hcKonsM1PlanSch, 'Alt+P', kbAltP, sci1Esc,,,,bmpPlansNo;
-----------;
- 'Печать инвентарной карточки', cmPrintDoc, 'Печать инвентарной карточки', hcOSPrmInvCard, 'Ctrl+P', kbCtrlP, sci1Esc,,,,bmpPrintDoc;
- 'Печать реестра операций по карточке', cmValue39, 'Печать реестра операций по объекту ОС (НМА)', hcOSPrnCard, , , sci1Esc;
-----------;
- 'Привязка карточки к налоговым группам', cmLegend, 'Привязка карточки к налоговым группам', hcOSNMAM2KatNalGr, 'Alt+U', kbAltU, sci1Esc;
- 'Привязка ИК к строкам формы 11', cmValue13, 'Привязка инвентарной карточки к строкам формы 11', hcOSConCardToF11, , , sci1Esc;
-----------;
- 'Внешняя классификация', cmPickClass, 'Внешняя классификация', hcGkatalM1ExtClass, 'Alt+C', kbAltC, sci1Esc,,,,bmpClassifier;
- 'Внешние атрибуты',      cmPickAttr,  'Внешние атрибуты',      hcGkatalM1Attr,     'Alt+A', kbAltA, sci1Esc,,,,bmpAttribute;
- 'Внешние КАУ',           cmKauReff,   'Внешние коды аналитического учета', , 'Alt+T', kbAltT, sci1Esc;
-----------;
- 'Просмотр архива по карточке', cmEditBudget, 'Просмотр архива износа и изменений по карточке', hcOsViewArc, 'Ctrl+B', kbCtrlB, sci1Esc;
- 'Дополнительная информация по карточке', cmAttrib, 'Дополнительная информация по карточке', hcOSFInvKartDop, 'Ctrl+Enter', kbCtrlEnter, sci1Esc;
-----------;
}

! Меню для дополнительной информации
katos_HotKeys_DopInfo Menu
{
- 'Групповая замена поля в карточках', cmValue18, 'Групповая замена значения поля в карточках', hcOSGrZam, , , sci1Esc;
-----------;
- 'Исходный документ (накладная, операция)', cmValue30, 'Вызов исходного документа, по которому была сформирована карточка', hcWMoveOsPs,,,sci1Esc;
}

GetPrintKatos Menu
{
- 'Печать инвентарной карточки', cmValue6, 'Выберите необходимую форму и нажмите Enter', hcOSPrintIKexactdate, , , sci1Esc;
}

mnuPrnPrilKatos Menu
{
- 'Печать приложения к форме № OC-6', cmValue8, 'Выберите необходимую форму и нажмите Enter', hcOSPrintIKexactdate, , , sci1Esc;
}

Alt1Katos Menu
{
- 'Заполнение суммы амортизации', cmValue14, 'Заполнение фиксированной суммы по износу за отчетный период по помеченным карточкам', hcNoContext, , , sci1Esc;
}

mnuKatOsOborot Menu
{
- 'Смена плана счетов', cmPlansNo, 'Смена текущего плана счетов', hcKonsM1PlanSch, 'Alt+P', kbAltP, sci1Esc,,,,bmpPlansNo;
-----------;
- 'Отбор проводок по инвентарной карточке', cmHozOper, 'Отбор проводок по инвентарной карточке', hcOSBProvodki, 'Ctrl+H', kbCtrlH, sci1Esc;
}


// ------------------------------ Резервы --------------------------------------
// Резервы бровз
KatOs_HotKeys_RSRV Menu
{
- 'Фильтр...', cmFilterSave, 'Установка ограничений при просмотре инвентарных карточек', hcOsVFiltr, 'Alt+B', kbAltB, sci1Esc,,,,bmpBuhFilter;
- 'Сортировка...', cmDocBas, 'Установка режима сортировки при просмотре', hcOsSort, 'Alt+D', kbAltD, sci1Esc,,,,bmpSort;
-----------;
-'Создать инвентарную карточку по шаблону',   cmInsLowLevel, 'Создать инвентарную карточку по выбранному шаблону', , 'Ctrl+F7', kbCtrlF7, sci1Esc;
-----------;
- 'Смена плана счетов', cmPlansNo, 'Смена текущего плана счетов', hcKonsM1PlanSch, 'Alt+P', kbAltP, sci1Esc,,,,bmpPlansNo;
-----------;
= 'Печать', '', hcNoContext, sci1Esc,,,bmpPrintDoc;
  {
  - 'Печать реестра инвентарных карточек',             cmPrintDoc, 'Печать реестра инвентарных карточек', hcOSPrnCard, 'Ctrl+P', kbCtrlP, sci1Esc;
  - 'Печать реестра операций по картотеке',             cmValue39, 'Печать реестра операций по выбранным инвентарным карточкам', hcOSPrnCard, , , sci1Esc;
  - 'Печать инвентарной карточки',                      cmValue11, 'Печать инвентарной карточки', hcOSPrintIKexactdate, , , sci1Esc;
  -----------;
  - 'Реестр картотеки (настраиваемый)', cmValFld19, 'Реестр картотеки (настраиваемый)', , '', , sci1Esc;
  }
-----------;
- 'Переход к новому отчетному периоду',      cmValue19, 'Переход к новому отчетному периоду выбранных инвентарных объектов',      hcOSNewPickPeriod, , , sci1Esc;
- 'Возврат к предыдущему отчетному периоду', cmValue20, 'Возврат к предыдущему отчетному периоду выбранных инвентарных объектов', hcOSOldPickPeriod, , , sci1Esc;
-----------;
- 'Перевод карточек в архив', cmValue17, 'Перевод выбывших карточек в архив', hcOSKatosToArc, , , sci1Esc;
- 'Переход в архив выбывших', cmValue2, 'Переключиться на архив выбывших', , , , sci1Esc;
-----------;
- 'Внешняя классификация', cmPickClass, 'Внешняя классификация', hcGkatalM1ExtClass, 'Alt+C', kbAltC, sci1Esc,,,,bmpClassifier;
- 'Внешние атрибуты',      cmPickAttr,  'Внешние атрибуты',      hcGkatalM1Attr,     'Alt+A', kbAltA, sci1Esc,,,,bmpAttribute;
- 'Внешние КАУ',           cmKauReff,   'Внешние коды аналитического учета', ,       'Alt+T', kbAltT, sci1Esc;
-----------;
= 'Дополнительно', '', hcNoContext, sci1Esc;
  {
  - 'Тиражирование внешней классификации', cmValue5, 'Тиражирование внешней классификации', hcOSTirExtClass, , , sci1Esc;
  - 'Тиражирование внешних атрибутов', cmValue37, 'Тиражирование внешних атрибутов', hcNoContext, , , sci1Esc;
  - 'Тиражирование характеристики', cmValue35, 'Тиражирование характеристики', hcNoContext, , , sci1Esc;
  }
}

! Резервы - Browse - Архивная
katos_HotKeys_RSRV_Ar Menu
{
- 'Фильтр...', cmFilterSave, 'Установка ограничений при просмотре инвентарных карточек', hcOsVFiltr, 'Alt+B', kbAltB, sci1Esc,,,,bmpBuhFilter;
- 'Сортировка...', cmDocBas, 'Установка режима сортировки при просмотре', hcOsSort, 'Alt+D', kbAltD, sci1Esc,,,,bmpSort;
-----------;
- 'Смена плана счетов', cmPlansNo, 'Смена текущего плана счетов', hcKonsM1PlanSch, 'Alt+P', kbAltP, sci1Esc,,,,bmpPlansNo;
-----------;
= 'Печать', '', hcNoContext, sci1Esc,,,bmpPrintDoc;
  {
  - 'Печать реестра инвентарных карточек', cmPrintDoc, 'Печать реестра инвентарных карточек', hcOSPrnCard, 'Ctrl+P', kbCtrlP, sci1Esc;
  - 'Печать реестра операций по картотеке', cmValue39, 'Печать реестра операций по выбранным инвентарным карточкам', hcOSPrnCard, , , sci1Esc;
  - 'Печать инвентарной карточки', cmValue11, 'Печать инвентарной карточки', hcOSPrintIKexactdate, , , sci1Esc;
  -----------;
  - 'Реестр картотеки (настраиваемый)', cmValFld19, 'Реестр картотеки (настраиваемый)', , '', , sci1Esc;
  }
-----------;
- 'Перевод карточек из архива в картотеку', cmValue17, 'Перевод карточек из архива в картотеку', hcOSArcToKatos, , , sci1Esc;
- 'Переход в инвентарную картотеку', cmValue2, 'Переключиться в инвентарную картотеку', , , , sci1Esc;
-----------;
- 'Внешняя классификация', cmPickClass, 'Внешняя классификация', hcGkatalM1ExtClass, 'Alt+C', kbAltC, sci1Esc,,,,bmpClassifier;
- 'Внешние атрибуты',      cmPickAttr,  'Внешние атрибуты',      hcGkatalM1Attr,     'Alt+A', kbAltA, sci1Esc,,,,bmpAttribute;
- 'Внешние КАУ',           cmKauReff,   'Внешние коды аналитического учета', ,       'Alt+T', kbAltT, sci1Esc;
}

! Резервы - Edit
katos_HotKeys_RSRV_WIN Menu
{
- 'Смена плана счетов', cmPlansNo, 'Смена текущего плана счетов', hcKonsM1PlanSch, 'Alt+P', kbAltP, sci1Esc,,,,bmpPlansNo;
-----------;
-'Создать инвентарную карточку по шаблону',   cmInsLowLevel, 'Создать инвентарную карточку по выбранному шаблону', , 'Ctrl+F7', kbCtrlF7, sci1Esc;
-----------;
- 'Печать инвентарной карточки', cmPrintDoc, 'Печать инвентарной карточки', hcOSPrmInvCard, 'Ctrl+P', kbCtrlP, sci1Esc,,,,bmpPrintDoc;
- 'Печать реестра операций по карточке',   cmValue39, 'Печать реестра операций по объекту ОС (НМА)', hcOSPrnCard, , , sci1Esc;
-----------;
- 'Тиражирование инвентарных карточек', cmNal, 'Тиражирование инвентарных карточек', hcOSSCardTirag,'Alt+F', kbAltF, sci1Esc;
- 'Отмена последнего тиражирования', cmDocBas, 'Отмена последнего тиражирования', hcOSSDelCardTirag,'Alt+D', kbAltD, sci1Esc;
-----------;
- 'Расчет амортизации за отчетный период', cmAccording, 'Расчет амортизации для карточки за текущий отчетный период', hcOSSAmortCalc, 'Alt+S', kbAltS, sci1Esc;
-----------;
- 'Групповая замена поля в карточках', cmValue18, 'Групповая замена значения поля в карточках', hcOSGrZam, , , sci1Esc;
-----------;
- 'Внешняя классификация', cmPickClass, 'Внешняя классификация', hcGkatalM1ExtClass, 'Alt+C', kbAltC, sci1Esc,,,,bmpClassifier;
- 'Внешние атрибуты',      cmPickAttr,  'Внешние атрибуты',      hcGkatalM1Attr,     'Alt+A', kbAltA, sci1Esc,,,,bmpAttribute;
- 'Внешние КАУ',           cmKauReff,   'Внешние коды аналитического учета', ,       'Alt+T', kbAltT, sci1Esc;
-----------;
- 'Просмотр архива по карточке', cmEditBudget, 'Просмотр архива износа и изменений по карточке', hcOsViewArc, 'Ctrl+B', kbCtrlB, sci1Esc;
}

! Резерв - Edit - Архивная
katos_HotKeys_RSRV_Arc_WIN Menu
{
- 'Смена плана счетов', cmPlansNo, 'Смена текущего плана счетов', hcKonsM1PlanSch, 'Alt+P', kbAltP, sci1Esc,,,,bmpPlansNo;
-----------;
- 'Печать инвентарной карточки', cmPrintDoc, 'Печать инвентарной карточки', hcOSPrmInvCard, 'Ctrl+P', kbCtrlP, sci1Esc,,,,bmpPrintDoc;
- 'Печать реестра операций по карточке', cmValue39, 'Печать реестра операций по объекту ОС (НМА)', hcOSPrnCard, , , sci1Esc;
-----------;
- 'Внешняя классификация', cmPickClass, 'Внешняя классификация', hcGkatalM1ExtClass, 'Alt+C', kbAltC, sci1Esc,,,,bmpClassifier;
- 'Внешние атрибуты',      cmPickAttr,  'Внешние атрибуты',      hcGkatalM1Attr,     'Alt+A', kbAltA, sci1Esc,,,,bmpAttribute;
- 'Внешние КАУ',           cmKauReff,   'Внешние коды аналитического учета', , 'Alt+T', kbAltT, sci1Esc;
}

mnuPrnFrReestr Menu
{
- 'Печать', cmPrintDoc, 'Печать реестра', hcKonsM1PlanSch, 'Ctrl+P', kbCtrlP, sci1Esc,,,,bmpPrintDoc;
}


mnuGoPrevOs Menu
{
- 'Переход в предварительную картотеку', cmValue31, 'Переключиться в предварительную картотеку', , , , sci1Esc;
}
mnuGoMainOs Menu
{
- 'Переход в инвентарную картотеку', cmValue31, 'Переключиться в инвентарную картотеку', , , , sci1Esc;
}

// Последний номер  используемого события cmValue41
